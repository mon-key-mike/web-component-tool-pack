{"version":3,"file":"w-package-tools.umd.js","sources":["../src/getPks.mjs","../src/setPks.mjs","../src/getReadme.mjs","../src/addVersion.mjs","../src/cleanFolder.mjs","../src/deleteFolder.mjs","../src/getFiles.mjs","../src/modifyReadme.mjs","../src/pmSeries.mjs"],"sourcesContent":["import fs from 'fs'\r\n\r\n\r\n/**\r\n * 取得package.json資料物件\r\n *\r\n * @param {string} [fn='./package.json'] 輸入package.json路徑字串\r\n * @returns {Object} 回傳資料物件\r\n */\r\nfunction getPks(fn = './package.json') {\r\n    let c = fs.readFileSync(fn, 'utf8')\r\n    return JSON.parse(c)\r\n}\r\n\r\n\r\nexport default getPks\r\n","import fs from 'fs'\r\n\r\n\r\n/**\r\n * 儲存資料至package.json\r\n *\r\n * @param {Object} pks 輸入package.json資料物件\r\n * @param {string} [fn='./package.json'] 輸入package.json路徑字串\r\n */\r\nfunction setPks(pks, fn = './package.json') {\r\n    let c = JSON.stringify(pks, null, 2)\r\n    fs.writeFileSync(fn, c, 'utf8')\r\n}\r\n\r\n\r\nexport default setPks\r\n","import fs from 'fs'\r\nimport _ from 'lodash'\r\n\r\n\r\n/**\r\n * 讀取readme資料物件\r\n *\r\n * @param {string} [fn='./README.md'] 輸入readme檔案路徑字串\r\n * @returns {Object} 回傳readme資料物件\r\n */\r\nfunction getReadme(fn = './README.md') {\r\n    let c = fs.readFileSync(fn, 'utf8')\r\n    return {\r\n        content: c,\r\n        lines: _.split(c, '\\r\\n')\r\n    }\r\n}\r\n\r\n\r\nexport default getReadme\r\n","import _ from 'lodash'\r\nimport getPks from './getPks.mjs'\r\nimport setPks from './setPks.mjs'\r\n\r\n\r\n/**\r\n * 自動添加package.json內版本補丁號\r\n *\r\n */\r\nfunction addVersion(fnPks = './package.json') {\r\n\r\n    //pks\r\n    let pks = getPks(fnPks)\r\n\r\n    //v\r\n    let v = pks.version\r\n    let s = _.split(v, '.')\r\n    s[2] = _.toString(_.toNumber(s[2]) + 1)\r\n    pks.version = _.join(s, '.')\r\n\r\n    //save\r\n    setPks(pks, fnPks)\r\n\r\n    console.log('now version: ' + pks.version)\r\n\r\n}\r\n\r\n\r\nexport default addVersion\r\n","import fs from 'fs'\r\n\r\n\r\nfunction core(path) {\r\n    fs.readdirSync(path).forEach(function(file, index) {\r\n        var curPath = path + '/' + file\r\n        if (fs.lstatSync(curPath).isDirectory()) { // recurse\r\n            core(curPath)\r\n        }\r\n        else { // delete file\r\n            fs.unlinkSync(curPath)\r\n        }\r\n    })\r\n    fs.rmdirSync(path)\r\n}\r\n\r\n\r\n/**\r\n * 清空資料夾\r\n *\r\n * @param {String} path 輸入欲清空資料夾路徑字串\r\n */\r\nfunction cleanFolder(path) {\r\n    if (fs.existsSync(path)) {\r\n        fs.readdirSync(path).forEach(function(file, index) {\r\n            var curPath = path + '/' + file\r\n            if (fs.lstatSync(curPath).isDirectory()) { // recurse\r\n                core(curPath)\r\n            }\r\n            else {\r\n                fs.unlinkSync(curPath)\r\n            }\r\n        })\r\n    }\r\n    else {\r\n        fs.mkdirSync(path)\r\n    }\r\n}\r\n\r\n\r\nexport default cleanFolder\r\n","import fs from 'fs'\r\n\r\n\r\n/**\r\n * 刪除資料牙\r\n *\r\n * @param {Str} path 輸入欲刪除資料夾路徑字串\r\n */\r\nfunction deleteFolder(path) {\r\n    if (fs.existsSync(path)) {\r\n        //console.log('in: ', path)\r\n        fs.readdirSync(path).forEach(function(file, index) {\r\n            var curPath = path + '/' + file\r\n            if (fs.lstatSync(curPath).isDirectory()) { // recurse\r\n                deleteFolder(curPath)\r\n            }\r\n            else { // delete file\r\n                //console.log('delete file: ', curPath)\r\n                fs.unlinkSync(curPath)\r\n            }\r\n        })\r\n        //console.log('delete folder: ', path)\r\n        fs.rmdirSync(path)\r\n    }\r\n}\r\n\r\n\r\nexport default deleteFolder\r\n","import fs from 'fs'\r\n\r\n\r\n/**\r\n * 取得資料夾下所有檔案\r\n *\r\n * @param {String} fd 輸入資料夾路徑字串\r\n * @returns {Array} 回傳檔案字串陣列\r\n */\r\nfunction getFiles(fd) {\r\n\r\n    //check\r\n    if (!fs.existsSync(fd)) {\r\n        return []\r\n    }\r\n\r\n    //readdir\r\n    let ltfs = fs.readdirSync(fd, { withFileTypes: true })\r\n\r\n    //filter\r\n    ltfs = ltfs.filter((v) => {\r\n        let b = !v.isDirectory()\r\n        return b\r\n    })\r\n\r\n    //map\r\n    ltfs = ltfs.map((v) => {\r\n        return v.name\r\n    })\r\n\r\n    return ltfs\r\n}\r\n\r\n\r\nexport default getFiles\r\n","import fs from 'fs'\r\nimport getPks from './getPks.mjs'\r\nimport getReadme from './getReadme.mjs'\r\n\r\n\r\n/**\r\n * 更新readme內cdn連結為最新版本\r\n *\r\n * @param {string} [fnRM='./README.md'] 輸入readme檔案路徑字串\r\n */\r\nfunction modifyReadme(fnRM = './README.md', fnPks = './package.json') {\r\n\r\n    //pks\r\n    let pks = getPks(fnPks)\r\n\r\n    //rdme\r\n    let rdme = getReadme(fnRM)\r\n\r\n    //replace\r\n    let sf = `(${pks.name}@)+(\\\\d+.\\\\d+.\\\\d+)`\r\n    let sr = `${pks.name}@${pks.version}`\r\n    let reg = new RegExp(sf, 'g')\r\n    let c = rdme.content.replace(reg, sr)\r\n\r\n    //write\r\n    //console.log(c)\r\n    fs.writeFileSync(fnRM, c, 'utf8')\r\n\r\n}\r\n\r\n\r\nexport default modifyReadme\r\n","/**\r\n * 輸入數據陣列並循序執行\r\n *\r\n * @param {Array} pms 輸入數據陣列\r\n * @param {Function} fn 輸入執行函數，需return Promise\r\n * @returns {Promise} 回傳Promise，resolve為成功，reject為失敗並提供錯誤訊息\r\n */\r\nfunction pmSeries(pms, fn) {\r\n    return new Promise((resolve, reject) => {\r\n        pms.reduce(function(pmm, v) {\r\n            return pmm.then(function(t) {\r\n                return fn(v)\r\n            })\r\n        }, Promise.resolve())\r\n            .then(function() {\r\n                resolve()\r\n            }).catch(function(err) {\r\n                reject(err)\r\n            })\r\n    })\r\n}\r\n\r\nexport default pmSeries\r\n"],"names":["getPks","fn","c","fs","readFileSync","JSON","parse","setPks","pks","stringify","writeFileSync","getReadme","content","lines","_","split","fnPks","v","version","s","toString","toNumber","join","console","log","path","existsSync","readdirSync","forEach","file","index","curPath","lstatSync","isDirectory","core","unlinkSync","rmdirSync","mkdirSync","deleteFolder","fd","ltfs","withFileTypes","filter","map","name","fnRM","rdme","sf","sr","reg","RegExp","replace","pms","Promise","resolve","reject","reduce","pmm","then","t","err"],"mappings":";;;;;gRASA,SAASA,QAAOC,yDAAK,iBACbC,EAAIC,EAAGC,aAAaH,EAAI,eACrBI,KAAKC,MAAMJ,GCFtB,SAASK,EAAOC,OAAKP,yDAAK,iBAClBC,EAAIG,KAAKI,UAAUD,EAAK,KAAM,GAClCL,EAAGO,cAAcT,EAAIC,EAAG,QCD5B,SAASS,QAAUV,yDAAK,cAChBC,EAAIC,EAAGC,aAAaH,EAAI,cACrB,CACHW,QAASV,EACTW,MAAOC,EAAEC,MAAMb,EAAG,gHCL1B,eAAoBc,yDAAQ,iBAGpBR,EAAMR,EAAOgB,GAGbC,EAAIT,EAAIU,QACRC,EAAIL,EAAEC,MAAME,EAAG,KACnBE,EAAE,GAAKL,EAAEM,SAASN,EAAEO,SAASF,EAAE,IAAM,GACrCX,EAAIU,QAAUJ,EAAEQ,KAAKH,EAAG,KAGxBZ,EAAOC,EAAKQ,GAEZO,QAAQC,IAAI,gBAAkBhB,EAAIU,wBCDtC,SAAqBO,GACbtB,EAAGuB,WAAWD,GACdtB,EAAGwB,YAAYF,GAAMG,SAAQ,SAASC,EAAMC,OACpCC,EAAUN,EAAO,IAAMI,EACvB1B,EAAG6B,UAAUD,GAASE,cAvBtC,SAASC,EAAKT,GACVtB,EAAGwB,YAAYF,GAAMG,SAAQ,SAASC,EAAMC,OACpCC,EAAUN,EAAO,IAAMI,EACvB1B,EAAG6B,UAAUD,GAASE,cACtBC,EAAKH,GAGL5B,EAAGgC,WAAWJ,MAGtB5B,EAAGiC,UAAUX,GAcDS,CAAKH,GAGL5B,EAAGgC,WAAWJ,MAKtB5B,EAAGkC,UAAUZ,mBC3BrB,SAASa,EAAab,GACdtB,EAAGuB,WAAWD,KAEdtB,EAAGwB,YAAYF,GAAMG,SAAQ,SAASC,EAAMC,OACpCC,EAAUN,EAAO,IAAMI,EACvB1B,EAAG6B,UAAUD,GAASE,cACtBK,EAAaP,GAIb5B,EAAGgC,WAAWJ,MAItB5B,EAAGiC,UAAUX,gBCbrB,SAAkBc,OAGTpC,EAAGuB,WAAWa,SACR,OAIPC,EAAOrC,EAAGwB,YAAYY,EAAI,CAAEE,eAAe,WAS/CD,GANAA,EAAOA,EAAKE,QAAO,SAACzB,UACPA,EAAEgB,kBAKHU,KAAI,SAAC1B,UACNA,EAAE2B,iDCjBjB,eAAsBC,yDAAO,cAGrBrC,EAAMR,yDAHsC,kBAM5C8C,EAAOnC,EAAUkC,GAGjBE,aAASvC,EAAIoC,4BACbI,YAAQxC,EAAIoC,iBAAQpC,EAAIU,SACxB+B,EAAM,IAAIC,OAAOH,EAAI,KACrB7C,EAAI4C,EAAKlC,QAAQuC,QAAQF,EAAKD,GAIlC7C,EAAGO,cAAcmC,EAAM3C,EAAG,oBCnB9B,SAAkBkD,EAAKnD,UACZ,IAAIoD,SAAQ,SAACC,EAASC,GACzBH,EAAII,QAAO,SAASC,EAAKxC,UACdwC,EAAIC,MAAK,SAASC,UACd1D,EAAGgB,QAEfoC,QAAQC,WACNI,MAAK,WACFJ,cACK,SAASM,GACdL,EAAOK"}