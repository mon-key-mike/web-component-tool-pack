!function(l,Z){"object"==typeof exports&&"undefined"!=typeof module?module.exports=Z(require("worker_threads")):"function"==typeof define&&define.amd?define(["worker_threads"],Z):(l="undefined"!=typeof globalThis?globalThis:l||self).gWorker6_ObjStream=Z(l.worker_threads)}(this,(function(l){"use strict";function Z(l){return l&&"object"==typeof l&&"default"in l?l:{default:l}}var d=Z(l);function m(l){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(l){return typeof l}:function(l){return l&&"function"==typeof Symbol&&l.constructor===Symbol&&l!==Symbol.prototype?"symbol":typeof l})(l)}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function b(l){var Z={exports:{}};return l(Z,Z.exports),Z.exports}var c=b((function(l,Z){l.exports=function(l){function Z(l,Z){(null==Z||Z>l.length)&&(Z=l.length);for(var d=0,m=new Array(Z);d<Z;d++)m[d]=l[d];return m}function d(l){return function(l){if(Array.isArray(l))return Z(l)}(l)||function(l){if("undefined"!=typeof Symbol&&null!=l[Symbol.iterator]||null!=l["@@iterator"])return Array.from(l)}(l)||function(l,d){if(l){if("string"==typeof l)return Z(l,d);var m=Object.prototype.toString.call(l).slice(8,-1);return"Object"===m&&l.constructor&&(m=l.constructor.name),"Map"===m||"Set"===m?Array.from(l):"Arguments"===m||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m)?Z(l,d):void 0}}(l)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(l,Z,d,m,b,c,G){try{var X=l[c](G),W=X.value}catch(l){return void d(l)}X.done?Z(W):Promise.resolve(W).then(m,b)}function c(l){return function(){var Z=this,d=arguments;return new Promise((function(m,c){var G=l.apply(Z,d);function X(l){b(G,m,c,X,W,"next",l)}function W(l){b(G,m,c,X,W,"throw",l)}X(void 0)}))}}function G(l){return(G="function"==typeof Symbol&&"symbol"==m(Symbol.iterator)?function(l){return m(l)}:function(l){return l&&"function"==typeof Symbol&&l.constructor===Symbol&&l!==Symbol.prototype?"symbol":m(l)})(l)}function X(l){var Z={exports:{}};return l(Z,Z.exports),Z.exports}var W,i=X((function(l){var Z=function(l){var Z,d=Object.prototype,m=d.hasOwnProperty,b="function"==typeof Symbol?Symbol:{},c=b.iterator||"@@iterator",X=b.asyncIterator||"@@asyncIterator",W=b.toStringTag||"@@toStringTag";function i(l,Z,d){return Object.defineProperty(l,Z,{value:d,enumerable:!0,configurable:!0,writable:!0}),l[Z]}try{i({},"")}catch(l){i=function(l,Z,d){return l[Z]=d}}function u(l,Z,d,m){var b=Z&&Z.prototype instanceof Y?Z:Y,c=Object.create(b.prototype),G=new t(m||[]);return c._invoke=function(l,Z,d){var m=p;return function(b,c){if(m===I)throw new Error("Generator is already running");if(m===h){if("throw"===b)throw c;return N()}for(d.method=b,d.arg=c;;){var G=d.delegate;if(G){var X=S(G,d);if(X){if(X===a)continue;return X}}if("next"===d.method)d.sent=d._sent=d.arg;else if("throw"===d.method){if(m===p)throw m=h,d.arg;d.dispatchException(d.arg)}else"return"===d.method&&d.abrupt("return",d.arg);m=I;var W=y(l,Z,d);if("normal"===W.type){if(m=d.done?h:V,W.arg===a)continue;return{value:W.arg,done:d.done}}"throw"===W.type&&(m=h,d.method="throw",d.arg=W.arg)}}}(l,d,G),c}function y(l,Z,d){try{return{type:"normal",arg:l.call(Z,d)}}catch(l){return{type:"throw",arg:l}}}l.wrap=u;var p="suspendedStart",V="suspendedYield",I="executing",h="completed",a={};function Y(){}function R(){}function K(){}var o={};o[c]=function(){return this};var L=Object.getPrototypeOf,J=L&&L(L(T([])));J&&J!==d&&m.call(J,c)&&(o=J);var n=K.prototype=Y.prototype=Object.create(o);function H(l){["next","throw","return"].forEach((function(Z){i(l,Z,(function(l){return this._invoke(Z,l)}))}))}function s(l,Z){function d(b,c,X,W){var i=y(l[b],l,c);if("throw"!==i.type){var u=i.arg,p=u.value;return p&&"object"===G(p)&&m.call(p,"__await")?Z.resolve(p.__await).then((function(l){d("next",l,X,W)}),(function(l){d("throw",l,X,W)})):Z.resolve(p).then((function(l){u.value=l,X(u)}),(function(l){return d("throw",l,X,W)}))}W(i.arg)}var b;this._invoke=function(l,m){function c(){return new Z((function(Z,b){d(l,m,Z,b)}))}return b=b?b.then(c,c):c()}}function S(l,d){var m=l.iterator[d.method];if(m===Z){if(d.delegate=null,"throw"===d.method){if(l.iterator.return&&(d.method="return",d.arg=Z,S(l,d),"throw"===d.method))return a;d.method="throw",d.arg=new TypeError("The iterator does not provide a 'throw' method")}return a}var b=y(m,l.iterator,d.arg);if("throw"===b.type)return d.method="throw",d.arg=b.arg,d.delegate=null,a;var c=b.arg;return c?c.done?(d[l.resultName]=c.value,d.next=l.nextLoc,"return"!==d.method&&(d.method="next",d.arg=Z),d.delegate=null,a):c:(d.method="throw",d.arg=new TypeError("iterator result is not an object"),d.delegate=null,a)}function C(l){var Z={tryLoc:l[0]};1 in l&&(Z.catchLoc=l[1]),2 in l&&(Z.finallyLoc=l[2],Z.afterLoc=l[3]),this.tryEntries.push(Z)}function x(l){var Z=l.completion||{};Z.type="normal",delete Z.arg,l.completion=Z}function t(l){this.tryEntries=[{tryLoc:"root"}],l.forEach(C,this),this.reset(!0)}function T(l){if(l){var d=l[c];if(d)return d.call(l);if("function"==typeof l.next)return l;if(!isNaN(l.length)){var b=-1,G=function d(){for(;++b<l.length;)if(m.call(l,b))return d.value=l[b],d.done=!1,d;return d.value=Z,d.done=!0,d};return G.next=G}}return{next:N}}function N(){return{value:Z,done:!0}}return R.prototype=n.constructor=K,K.constructor=R,R.displayName=i(K,W,"GeneratorFunction"),l.isGeneratorFunction=function(l){var Z="function"==typeof l&&l.constructor;return!!Z&&(Z===R||"GeneratorFunction"===(Z.displayName||Z.name))},l.mark=function(l){return Object.setPrototypeOf?Object.setPrototypeOf(l,K):(l.__proto__=K,i(l,W,"GeneratorFunction")),l.prototype=Object.create(n),l},l.awrap=function(l){return{__await:l}},H(s.prototype),s.prototype[X]=function(){return this},l.AsyncIterator=s,l.async=function(Z,d,m,b,c){void 0===c&&(c=Promise);var G=new s(u(Z,d,m,b),c);return l.isGeneratorFunction(d)?G:G.next().then((function(l){return l.done?l.value:G.next()}))},H(n),i(n,W,"Generator"),n[c]=function(){return this},n.toString=function(){return"[object Generator]"},l.keys=function(l){var Z=[];for(var d in l)Z.push(d);return Z.reverse(),function d(){for(;Z.length;){var m=Z.pop();if(m in l)return d.value=m,d.done=!1,d}return d.done=!0,d}},l.values=T,t.prototype={constructor:t,reset:function(l){if(this.prev=0,this.next=0,this.sent=this._sent=Z,this.done=!1,this.delegate=null,this.method="next",this.arg=Z,this.tryEntries.forEach(x),!l)for(var d in this)"t"===d.charAt(0)&&m.call(this,d)&&!isNaN(+d.slice(1))&&(this[d]=Z)},stop:function(){this.done=!0;var l=this.tryEntries[0].completion;if("throw"===l.type)throw l.arg;return this.rval},dispatchException:function(l){if(this.done)throw l;var d=this;function b(m,b){return X.type="throw",X.arg=l,d.next=m,b&&(d.method="next",d.arg=Z),!!b}for(var c=this.tryEntries.length-1;c>=0;--c){var G=this.tryEntries[c],X=G.completion;if("root"===G.tryLoc)return b("end");if(G.tryLoc<=this.prev){var W=m.call(G,"catchLoc"),i=m.call(G,"finallyLoc");if(W&&i){if(this.prev<G.catchLoc)return b(G.catchLoc,!0);if(this.prev<G.finallyLoc)return b(G.finallyLoc)}else if(W){if(this.prev<G.catchLoc)return b(G.catchLoc,!0)}else{if(!i)throw new Error("try statement without catch or finally");if(this.prev<G.finallyLoc)return b(G.finallyLoc)}}}},abrupt:function(l,Z){for(var d=this.tryEntries.length-1;d>=0;--d){var b=this.tryEntries[d];if(b.tryLoc<=this.prev&&m.call(b,"finallyLoc")&&this.prev<b.finallyLoc){var c=b;break}}c&&("break"===l||"continue"===l)&&c.tryLoc<=Z&&Z<=c.finallyLoc&&(c=null);var G=c?c.completion:{};return G.type=l,G.arg=Z,c?(this.method="next",this.next=c.finallyLoc,a):this.complete(G)},complete:function(l,Z){if("throw"===l.type)throw l.arg;return"break"===l.type||"continue"===l.type?this.next=l.arg:"return"===l.type?(this.rval=this.arg=l.arg,this.method="return",this.next="end"):"normal"===l.type&&Z&&(this.next=Z),a},finish:function(l){for(var Z=this.tryEntries.length-1;Z>=0;--Z){var d=this.tryEntries[Z];if(d.finallyLoc===l)return this.complete(d.completion,d.afterLoc),x(d),a}},catch:function(l){for(var Z=this.tryEntries.length-1;Z>=0;--Z){var d=this.tryEntries[Z];if(d.tryLoc===l){var m=d.completion;if("throw"===m.type){var b=m.arg;x(d)}return b}}throw new Error("illegal catch attempt")},delegateYield:function(l,d,m){return this.delegate={iterator:T(l),resultName:d,nextLoc:m},"next"===this.method&&(this.arg=Z),a}},l}(l.exports);try{regeneratorRuntime=Z}catch(l){Function("r","regeneratorRuntime = r")(Z)}})),u=X((function(l){var Z=Object.prototype.hasOwnProperty,d="~";function m(){}function b(l,Z,d){this.fn=l,this.context=Z,this.once=d||!1}function c(l,Z,m,c,G){if("function"!=typeof m)throw new TypeError("The listener must be a function");var X=new b(m,c||l,G),W=d?d+Z:Z;return l._events[W]?l._events[W].fn?l._events[W]=[l._events[W],X]:l._events[W].push(X):(l._events[W]=X,l._eventsCount++),l}function G(l,Z){0==--l._eventsCount?l._events=new m:delete l._events[Z]}function X(){this._events=new m,this._eventsCount=0}Object.create&&(m.prototype=Object.create(null),(new m).__proto__||(d=!1)),X.prototype.eventNames=function(){var l,m,b=[];if(0===this._eventsCount)return b;for(m in l=this._events)Z.call(l,m)&&b.push(d?m.slice(1):m);return Object.getOwnPropertySymbols?b.concat(Object.getOwnPropertySymbols(l)):b},X.prototype.listeners=function(l){var Z=d?d+l:l,m=this._events[Z];if(!m)return[];if(m.fn)return[m.fn];for(var b=0,c=m.length,G=new Array(c);b<c;b++)G[b]=m[b].fn;return G},X.prototype.listenerCount=function(l){var Z=d?d+l:l,m=this._events[Z];return m?m.fn?1:m.length:0},X.prototype.emit=function(l,Z,m,b,c,G){var X=d?d+l:l;if(!this._events[X])return!1;var W,i,u=this._events[X],y=arguments.length;if(u.fn){switch(u.once&&this.removeListener(l,u.fn,void 0,!0),y){case 1:return u.fn.call(u.context),!0;case 2:return u.fn.call(u.context,Z),!0;case 3:return u.fn.call(u.context,Z,m),!0;case 4:return u.fn.call(u.context,Z,m,b),!0;case 5:return u.fn.call(u.context,Z,m,b,c),!0;case 6:return u.fn.call(u.context,Z,m,b,c,G),!0}for(i=1,W=new Array(y-1);i<y;i++)W[i-1]=arguments[i];u.fn.apply(u.context,W)}else{var p,V=u.length;for(i=0;i<V;i++)switch(u[i].once&&this.removeListener(l,u[i].fn,void 0,!0),y){case 1:u[i].fn.call(u[i].context);break;case 2:u[i].fn.call(u[i].context,Z);break;case 3:u[i].fn.call(u[i].context,Z,m);break;case 4:u[i].fn.call(u[i].context,Z,m,b);break;default:if(!W)for(p=1,W=new Array(y-1);p<y;p++)W[p-1]=arguments[p];u[i].fn.apply(u[i].context,W)}}return!0},X.prototype.on=function(l,Z,d){return c(this,l,Z,d,!1)},X.prototype.once=function(l,Z,d){return c(this,l,Z,d,!0)},X.prototype.removeListener=function(l,Z,m,b){var c=d?d+l:l;if(!this._events[c])return this;if(!Z)return G(this,c),this;var X=this._events[c];if(X.fn)X.fn!==Z||b&&!X.once||m&&X.context!==m||G(this,c);else{for(var W=0,i=[],u=X.length;W<u;W++)(X[W].fn!==Z||b&&!X[W].once||m&&X[W].context!==m)&&i.push(X[W]);i.length?this._events[c]=1===i.length?i[0]:i:G(this,c)}return this},X.prototype.removeAllListeners=function(l){var Z;return l?(Z=d?d+l:l,this._events[Z]&&G(this,Z)):(this._events=new m,this._eventsCount=0),this},X.prototype.off=X.prototype.removeListener,X.prototype.addListener=X.prototype.on,X.prefixed=d,X.EventEmitter=X,l.exports=X}));return function(){if("nodejs"!=("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;function Z(){return new u}function m(){var l,Z,d=new Promise((function(){l=arguments[0],Z=arguments[1]}));return d.resolve=l,d.reject=Z,d}function b(){for(var l=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,Z=[],d="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),m=d.length,b=0;b<l;b++)Z[b]=d[0|Math.random()*m];return Z.join("")}var G,X=(G="CgogICAgICAgIGxldCB7IHBhcmVudFBvcnQgfSA9IHJlcXVpcmUoJ3dvcmtlcl90aHJlYWRzJykKICAgICAgICAKCi8qIQogKiB3LWpzb24tc3RyZWFtIHYxLjAuMTAKICogKGMpIDIwMTgtMjAyMSB5dWRhLWx5dShzZW1pc3BoZXJlKQogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuCiAqLwpmdW5jdGlvbiB0KHQsZSxyLG4saSxvLGEpe3RyeXt2YXIgcz10W29dKGEpLHU9cy52YWx1ZX1jYXRjaCh0KXtyZXR1cm4gdm9pZCByKHQpfXMuZG9uZT9lKHUpOlByb21pc2UucmVzb2x2ZSh1KS50aGVuKG4saSl9ZnVuY3Rpb24gZShlKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgcj10aGlzLG49YXJndW1lbnRzO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oaSxvKXt2YXIgYT1lLmFwcGx5KHIsbik7ZnVuY3Rpb24gcyhlKXt0KGEsaSxvLHMsdSwibmV4dCIsZSl9ZnVuY3Rpb24gdShlKXt0KGEsaSxvLHMsdSwidGhyb3ciLGUpfXModm9pZCAwKX0pKX19ZnVuY3Rpb24gcih0KXtyZXR1cm4ocj0iZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiYic3ltYm9sIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiYiZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT8ic3ltYm9sIjp0eXBlb2YgdH0pKHQpfXZhciBuPSJ1bmRlZmluZWQiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOiJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93P3dpbmRvdzoidW5kZWZpbmVkIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6InVuZGVmaW5lZCIhPXR5cGVvZiBzZWxmP3NlbGY6e307ZnVuY3Rpb24gaSh0KXtpZih0Ll9fZXNNb2R1bGUpcmV0dXJuIHQ7dmFyIGU9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTtyZXR1cm4gT2JqZWN0LmtleXModCkuZm9yRWFjaCgoZnVuY3Rpb24ocil7dmFyIG49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LHIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIsbi5nZXQ/bjp7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdFtyXX19KX0pKSxlfWZ1bmN0aW9uIG8odCl7dmFyIGU9e2V4cG9ydHM6e319O3JldHVybiB0KGUsZS5leHBvcnRzKSxlLmV4cG9ydHN9dmFyIGE9bygoZnVuY3Rpb24odCl7dmFyIGU9ZnVuY3Rpb24odCl7dmFyIGUsbj1PYmplY3QucHJvdG90eXBlLGk9bi5oYXNPd25Qcm9wZXJ0eSxvPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2w/U3ltYm9sOnt9LGE9by5pdGVyYXRvcnx8IkBAaXRlcmF0b3IiLHM9by5hc3luY0l0ZXJhdG9yfHwiQEBhc3luY0l0ZXJhdG9yIix1PW8udG9TdHJpbmdUYWd8fCJAQHRvU3RyaW5nVGFnIjtmdW5jdGlvbiBmKHQsZSxyKXtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7dmFsdWU6cixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pLHRbZV19dHJ5e2Yoe30sIiIpfWNhdGNoKHQpe2Y9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0W2VdPXJ9fWZ1bmN0aW9uIGgodCxlLHIsbil7dmFyIGk9ZSYmZS5wcm90b3R5cGUgaW5zdGFuY2VvZiB2P2U6dixvPU9iamVjdC5jcmVhdGUoaS5wcm90b3R5cGUpLGE9bmV3IE8obnx8W10pO3JldHVybiBvLl9pbnZva2U9ZnVuY3Rpb24odCxlLHIpe3ZhciBuPWw7cmV0dXJuIGZ1bmN0aW9uKGksbyl7aWYobj09PXApdGhyb3cgbmV3IEVycm9yKCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nIik7aWYobj09PWcpe2lmKCJ0aHJvdyI9PT1pKXRocm93IG87cmV0dXJuIEwoKX1mb3Ioci5tZXRob2Q9aSxyLmFyZz1vOzspe3ZhciBhPXIuZGVsZWdhdGU7aWYoYSl7dmFyIHM9aihhLHIpO2lmKHMpe2lmKHM9PT15KWNvbnRpbnVlO3JldHVybiBzfX1pZigibmV4dCI9PT1yLm1ldGhvZClyLnNlbnQ9ci5fc2VudD1yLmFyZztlbHNlIGlmKCJ0aHJvdyI9PT1yLm1ldGhvZCl7aWYobj09PWwpdGhyb3cgbj1nLHIuYXJnO3IuZGlzcGF0Y2hFeGNlcHRpb24oci5hcmcpfWVsc2UicmV0dXJuIj09PXIubWV0aG9kJiZyLmFicnVwdCgicmV0dXJuIixyLmFyZyk7bj1wO3ZhciB1PWModCxlLHIpO2lmKCJub3JtYWwiPT09dS50eXBlKXtpZihuPXIuZG9uZT9nOmQsdS5hcmc9PT15KWNvbnRpbnVlO3JldHVybnt2YWx1ZTp1LmFyZyxkb25lOnIuZG9uZX19InRocm93Ij09PXUudHlwZSYmKG49ZyxyLm1ldGhvZD0idGhyb3ciLHIuYXJnPXUuYXJnKX19fSh0LHIsYSksb31mdW5jdGlvbiBjKHQsZSxyKXt0cnl7cmV0dXJue3R5cGU6Im5vcm1hbCIsYXJnOnQuY2FsbChlLHIpfX1jYXRjaCh0KXtyZXR1cm57dHlwZToidGhyb3ciLGFyZzp0fX19dC53cmFwPWg7dmFyIGw9InN1c3BlbmRlZFN0YXJ0IixkPSJzdXNwZW5kZWRZaWVsZCIscD0iZXhlY3V0aW5nIixnPSJjb21wbGV0ZWQiLHk9e307ZnVuY3Rpb24gdigpe31mdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIHcoKXt9dmFyIG09e307bVthXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfTt2YXIgXz1PYmplY3QuZ2V0UHJvdG90eXBlT2YsUz1fJiZfKF8oQShbXSkpKTtTJiZTIT09biYmaS5jYWxsKFMsYSkmJihtPVMpO3ZhciBFPXcucHJvdG90eXBlPXYucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobSk7ZnVuY3Rpb24gayh0KXtbIm5leHQiLCJ0aHJvdyIsInJldHVybiJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe2YodCxlLChmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5faW52b2tlKGUsdCl9KSl9KSl9ZnVuY3Rpb24gUih0LGUpe2Z1bmN0aW9uIG4obyxhLHMsdSl7dmFyIGY9Yyh0W29dLHQsYSk7aWYoInRocm93IiE9PWYudHlwZSl7dmFyIGg9Zi5hcmcsbD1oLnZhbHVlO3JldHVybiBsJiYib2JqZWN0Ij09PXIobCkmJmkuY2FsbChsLCJfX2F3YWl0Iik/ZS5yZXNvbHZlKGwuX19hd2FpdCkudGhlbigoZnVuY3Rpb24odCl7bigibmV4dCIsdCxzLHUpfSksKGZ1bmN0aW9uKHQpe24oInRocm93Iix0LHMsdSl9KSk6ZS5yZXNvbHZlKGwpLnRoZW4oKGZ1bmN0aW9uKHQpe2gudmFsdWU9dCxzKGgpfSksKGZ1bmN0aW9uKHQpe3JldHVybiBuKCJ0aHJvdyIsdCxzLHUpfSkpfXUoZi5hcmcpfXZhciBvO3RoaXMuX2ludm9rZT1mdW5jdGlvbih0LHIpe2Z1bmN0aW9uIGkoKXtyZXR1cm4gbmV3IGUoKGZ1bmN0aW9uKGUsaSl7bih0LHIsZSxpKX0pKX1yZXR1cm4gbz1vP28udGhlbihpLGkpOmkoKX19ZnVuY3Rpb24gaih0LHIpe3ZhciBuPXQuaXRlcmF0b3Jbci5tZXRob2RdO2lmKG49PT1lKXtpZihyLmRlbGVnYXRlPW51bGwsInRocm93Ij09PXIubWV0aG9kKXtpZih0Lml0ZXJhdG9yLnJldHVybiYmKHIubWV0aG9kPSJyZXR1cm4iLHIuYXJnPWUsaih0LHIpLCJ0aHJvdyI9PT1yLm1ldGhvZCkpcmV0dXJuIHk7ci5tZXRob2Q9InRocm93IixyLmFyZz1uZXcgVHlwZUVycm9yKCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kIil9cmV0dXJuIHl9dmFyIGk9YyhuLHQuaXRlcmF0b3Isci5hcmcpO2lmKCJ0aHJvdyI9PT1pLnR5cGUpcmV0dXJuIHIubWV0aG9kPSJ0aHJvdyIsci5hcmc9aS5hcmcsci5kZWxlZ2F0ZT1udWxsLHk7dmFyIG89aS5hcmc7cmV0dXJuIG8/by5kb25lPyhyW3QucmVzdWx0TmFtZV09by52YWx1ZSxyLm5leHQ9dC5uZXh0TG9jLCJyZXR1cm4iIT09ci5tZXRob2QmJihyLm1ldGhvZD0ibmV4dCIsci5hcmc9ZSksci5kZWxlZ2F0ZT1udWxsLHkpOm86KHIubWV0aG9kPSJ0aHJvdyIsci5hcmc9bmV3IFR5cGVFcnJvcigiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3QiKSxyLmRlbGVnYXRlPW51bGwseSl9ZnVuY3Rpb24geCh0KXt2YXIgZT17dHJ5TG9jOnRbMF19OzEgaW4gdCYmKGUuY2F0Y2hMb2M9dFsxXSksMiBpbiB0JiYoZS5maW5hbGx5TG9jPXRbMl0sZS5hZnRlckxvYz10WzNdKSx0aGlzLnRyeUVudHJpZXMucHVzaChlKX1mdW5jdGlvbiBUKHQpe3ZhciBlPXQuY29tcGxldGlvbnx8e307ZS50eXBlPSJub3JtYWwiLGRlbGV0ZSBlLmFyZyx0LmNvbXBsZXRpb249ZX1mdW5jdGlvbiBPKHQpe3RoaXMudHJ5RW50cmllcz1be3RyeUxvYzoicm9vdCJ9XSx0LmZvckVhY2goeCx0aGlzKSx0aGlzLnJlc2V0KCEwKX1mdW5jdGlvbiBBKHQpe2lmKHQpe3ZhciByPXRbYV07aWYocilyZXR1cm4gci5jYWxsKHQpO2lmKCJmdW5jdGlvbiI9PXR5cGVvZiB0Lm5leHQpcmV0dXJuIHQ7aWYoIWlzTmFOKHQubGVuZ3RoKSl7dmFyIG49LTEsbz1mdW5jdGlvbiByKCl7Zm9yKDsrK248dC5sZW5ndGg7KWlmKGkuY2FsbCh0LG4pKXJldHVybiByLnZhbHVlPXRbbl0sci5kb25lPSExLHI7cmV0dXJuIHIudmFsdWU9ZSxyLmRvbmU9ITAscn07cmV0dXJuIG8ubmV4dD1vfX1yZXR1cm57bmV4dDpMfX1mdW5jdGlvbiBMKCl7cmV0dXJue3ZhbHVlOmUsZG9uZTohMH19cmV0dXJuIGIucHJvdG90eXBlPUUuY29uc3RydWN0b3I9dyx3LmNvbnN0cnVjdG9yPWIsYi5kaXNwbGF5TmFtZT1mKHcsdSwiR2VuZXJhdG9yRnVuY3Rpb24iKSx0LmlzR2VuZXJhdG9yRnVuY3Rpb249ZnVuY3Rpb24odCl7dmFyIGU9ImZ1bmN0aW9uIj09dHlwZW9mIHQmJnQuY29uc3RydWN0b3I7cmV0dXJuISFlJiYoZT09PWJ8fCJHZW5lcmF0b3JGdW5jdGlvbiI9PT0oZS5kaXNwbGF5TmFtZXx8ZS5uYW1lKSl9LHQubWFyaz1mdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZih0LHcpOih0Ll9fcHJvdG9fXz13LGYodCx1LCJHZW5lcmF0b3JGdW5jdGlvbiIpKSx0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEUpLHR9LHQuYXdyYXA9ZnVuY3Rpb24odCl7cmV0dXJue19fYXdhaXQ6dH19LGsoUi5wcm90b3R5cGUpLFIucHJvdG90eXBlW3NdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LHQuQXN5bmNJdGVyYXRvcj1SLHQuYXN5bmM9ZnVuY3Rpb24oZSxyLG4saSxvKXt2b2lkIDA9PT1vJiYobz1Qcm9taXNlKTt2YXIgYT1uZXcgUihoKGUscixuLGkpLG8pO3JldHVybiB0LmlzR2VuZXJhdG9yRnVuY3Rpb24ocik/YTphLm5leHQoKS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gdC5kb25lP3QudmFsdWU6YS5uZXh0KCl9KSl9LGsoRSksZihFLHUsIkdlbmVyYXRvciIpLEVbYV09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sRS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiJbb2JqZWN0IEdlbmVyYXRvcl0ifSx0LmtleXM9ZnVuY3Rpb24odCl7dmFyIGU9W107Zm9yKHZhciByIGluIHQpZS5wdXNoKHIpO3JldHVybiBlLnJldmVyc2UoKSxmdW5jdGlvbiByKCl7Zm9yKDtlLmxlbmd0aDspe3ZhciBuPWUucG9wKCk7aWYobiBpbiB0KXJldHVybiByLnZhbHVlPW4sci5kb25lPSExLHJ9cmV0dXJuIHIuZG9uZT0hMCxyfX0sdC52YWx1ZXM9QSxPLnByb3RvdHlwZT17Y29uc3RydWN0b3I6TyxyZXNldDpmdW5jdGlvbih0KXtpZih0aGlzLnByZXY9MCx0aGlzLm5leHQ9MCx0aGlzLnNlbnQ9dGhpcy5fc2VudD1lLHRoaXMuZG9uZT0hMSx0aGlzLmRlbGVnYXRlPW51bGwsdGhpcy5tZXRob2Q9Im5leHQiLHRoaXMuYXJnPWUsdGhpcy50cnlFbnRyaWVzLmZvckVhY2goVCksIXQpZm9yKHZhciByIGluIHRoaXMpInQiPT09ci5jaGFyQXQoMCkmJmkuY2FsbCh0aGlzLHIpJiYhaXNOYU4oK3Iuc2xpY2UoMSkpJiYodGhpc1tyXT1lKX0sc3RvcDpmdW5jdGlvbigpe3RoaXMuZG9uZT0hMDt2YXIgdD10aGlzLnRyeUVudHJpZXNbMF0uY29tcGxldGlvbjtpZigidGhyb3ciPT09dC50eXBlKXRocm93IHQuYXJnO3JldHVybiB0aGlzLnJ2YWx9LGRpc3BhdGNoRXhjZXB0aW9uOmZ1bmN0aW9uKHQpe2lmKHRoaXMuZG9uZSl0aHJvdyB0O3ZhciByPXRoaXM7ZnVuY3Rpb24gbihuLGkpe3JldHVybiBzLnR5cGU9InRocm93IixzLmFyZz10LHIubmV4dD1uLGkmJihyLm1ldGhvZD0ibmV4dCIsci5hcmc9ZSksISFpfWZvcih2YXIgbz10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7bz49MDstLW8pe3ZhciBhPXRoaXMudHJ5RW50cmllc1tvXSxzPWEuY29tcGxldGlvbjtpZigicm9vdCI9PT1hLnRyeUxvYylyZXR1cm4gbigiZW5kIik7aWYoYS50cnlMb2M8PXRoaXMucHJldil7dmFyIHU9aS5jYWxsKGEsImNhdGNoTG9jIiksZj1pLmNhbGwoYSwiZmluYWxseUxvYyIpO2lmKHUmJmYpe2lmKHRoaXMucHJldjxhLmNhdGNoTG9jKXJldHVybiBuKGEuY2F0Y2hMb2MsITApO2lmKHRoaXMucHJldjxhLmZpbmFsbHlMb2MpcmV0dXJuIG4oYS5maW5hbGx5TG9jKX1lbHNlIGlmKHUpe2lmKHRoaXMucHJldjxhLmNhdGNoTG9jKXJldHVybiBuKGEuY2F0Y2hMb2MsITApfWVsc2V7aWYoIWYpdGhyb3cgbmV3IEVycm9yKCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseSIpO2lmKHRoaXMucHJldjxhLmZpbmFsbHlMb2MpcmV0dXJuIG4oYS5maW5hbGx5TG9jKX19fX0sYWJydXB0OmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciByPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtyPj0wOy0tcil7dmFyIG49dGhpcy50cnlFbnRyaWVzW3JdO2lmKG4udHJ5TG9jPD10aGlzLnByZXYmJmkuY2FsbChuLCJmaW5hbGx5TG9jIikmJnRoaXMucHJldjxuLmZpbmFsbHlMb2Mpe3ZhciBvPW47YnJlYWt9fW8mJigiYnJlYWsiPT09dHx8ImNvbnRpbnVlIj09PXQpJiZvLnRyeUxvYzw9ZSYmZTw9by5maW5hbGx5TG9jJiYobz1udWxsKTt2YXIgYT1vP28uY29tcGxldGlvbjp7fTtyZXR1cm4gYS50eXBlPXQsYS5hcmc9ZSxvPyh0aGlzLm1ldGhvZD0ibmV4dCIsdGhpcy5uZXh0PW8uZmluYWxseUxvYyx5KTp0aGlzLmNvbXBsZXRlKGEpfSxjb21wbGV0ZTpmdW5jdGlvbih0LGUpe2lmKCJ0aHJvdyI9PT10LnR5cGUpdGhyb3cgdC5hcmc7cmV0dXJuImJyZWFrIj09PXQudHlwZXx8ImNvbnRpbnVlIj09PXQudHlwZT90aGlzLm5leHQ9dC5hcmc6InJldHVybiI9PT10LnR5cGU/KHRoaXMucnZhbD10aGlzLmFyZz10LmFyZyx0aGlzLm1ldGhvZD0icmV0dXJuIix0aGlzLm5leHQ9ImVuZCIpOiJub3JtYWwiPT09dC50eXBlJiZlJiYodGhpcy5uZXh0PWUpLHl9LGZpbmlzaDpmdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO2U+PTA7LS1lKXt2YXIgcj10aGlzLnRyeUVudHJpZXNbZV07aWYoci5maW5hbGx5TG9jPT09dClyZXR1cm4gdGhpcy5jb21wbGV0ZShyLmNvbXBsZXRpb24sci5hZnRlckxvYyksVChyKSx5fX0sY2F0Y2g6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtlPj0wOy0tZSl7dmFyIHI9dGhpcy50cnlFbnRyaWVzW2VdO2lmKHIudHJ5TG9jPT09dCl7dmFyIG49ci5jb21wbGV0aW9uO2lmKCJ0aHJvdyI9PT1uLnR5cGUpe3ZhciBpPW4uYXJnO1Qocil9cmV0dXJuIGl9fXRocm93IG5ldyBFcnJvcigiaWxsZWdhbCBjYXRjaCBhdHRlbXB0Iil9LGRlbGVnYXRlWWllbGQ6ZnVuY3Rpb24odCxyLG4pe3JldHVybiB0aGlzLmRlbGVnYXRlPXtpdGVyYXRvcjpBKHQpLHJlc3VsdE5hbWU6cixuZXh0TG9jOm59LCJuZXh0Ij09PXRoaXMubWV0aG9kJiYodGhpcy5hcmc9ZSkseX19LHR9KHQuZXhwb3J0cyk7dHJ5e3JlZ2VuZXJhdG9yUnVudGltZT1lfWNhdGNoKHQpe0Z1bmN0aW9uKCJyIiwicmVnZW5lcmF0b3JSdW50aW1lID0gciIpKGUpfX0pKSxzPSJ1bmRlZmluZWQiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDoidW5kZWZpbmVkIiE9dHlwZW9mIHNlbGY/c2VsZjoidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e307ZnVuY3Rpb24gdSgpe3Rocm93IG5ldyBFcnJvcigic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCIpfWZ1bmN0aW9uIGYoKXt0aHJvdyBuZXcgRXJyb3IoImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCIpfXZhciBoPXUsYz1mO2Z1bmN0aW9uIGwodCl7aWYoaD09PXNldFRpbWVvdXQpcmV0dXJuIHNldFRpbWVvdXQodCwwKTtpZigoaD09PXV8fCFoKSYmc2V0VGltZW91dClyZXR1cm4gaD1zZXRUaW1lb3V0LHNldFRpbWVvdXQodCwwKTt0cnl7cmV0dXJuIGgodCwwKX1jYXRjaChlKXt0cnl7cmV0dXJuIGguY2FsbChudWxsLHQsMCl9Y2F0Y2goZSl7cmV0dXJuIGguY2FsbCh0aGlzLHQsMCl9fX0iZnVuY3Rpb24iPT10eXBlb2Ygcy5zZXRUaW1lb3V0JiYoaD1zZXRUaW1lb3V0KSwiZnVuY3Rpb24iPT10eXBlb2Ygcy5jbGVhclRpbWVvdXQmJihjPWNsZWFyVGltZW91dCk7dmFyIGQscD1bXSxnPSExLHk9LTE7ZnVuY3Rpb24gdigpe2cmJmQmJihnPSExLGQubGVuZ3RoP3A9ZC5jb25jYXQocCk6eT0tMSxwLmxlbmd0aCYmYigpKX1mdW5jdGlvbiBiKCl7aWYoIWcpe3ZhciB0PWwodik7Zz0hMDtmb3IodmFyIGU9cC5sZW5ndGg7ZTspe2ZvcihkPXAscD1bXTsrK3k8ZTspZCYmZFt5XS5ydW4oKTt5PS0xLGU9cC5sZW5ndGh9ZD1udWxsLGc9ITEsZnVuY3Rpb24odCl7aWYoYz09PWNsZWFyVGltZW91dClyZXR1cm4gY2xlYXJUaW1lb3V0KHQpO2lmKChjPT09Znx8IWMpJiZjbGVhclRpbWVvdXQpcmV0dXJuIGM9Y2xlYXJUaW1lb3V0LGNsZWFyVGltZW91dCh0KTt0cnl7Yyh0KX1jYXRjaChlKXt0cnl7cmV0dXJuIGMuY2FsbChudWxsLHQpfWNhdGNoKGUpe3JldHVybiBjLmNhbGwodGhpcyx0KX19fSh0KX19ZnVuY3Rpb24gdyh0KXt2YXIgZT1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpZm9yKHZhciByPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyllW3ItMV09YXJndW1lbnRzW3JdO3AucHVzaChuZXcgbSh0LGUpKSwxIT09cC5sZW5ndGh8fGd8fGwoYil9ZnVuY3Rpb24gbSh0LGUpe3RoaXMuZnVuPXQsdGhpcy5hcnJheT1lfW0ucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSl9O2Z1bmN0aW9uIF8oKXt9dmFyIFM9XyxFPV8saz1fLFI9XyxqPV8seD1fLFQ9Xzt2YXIgTz1zLnBlcmZvcm1hbmNlfHx7fSxBPU8ubm93fHxPLm1vek5vd3x8Ty5tc05vd3x8Ty5vTm93fHxPLndlYmtpdE5vd3x8ZnVuY3Rpb24oKXtyZXR1cm4obmV3IERhdGUpLmdldFRpbWUoKX07dmFyIEw9bmV3IERhdGU7dmFyIEM9e25leHRUaWNrOncsdGl0bGU6ImJyb3dzZXIiLGJyb3dzZXI6ITAsZW52Ont9LGFyZ3Y6W10sdmVyc2lvbjoiIix2ZXJzaW9uczp7fSxvbjpTLGFkZExpc3RlbmVyOkUsb25jZTprLG9mZjpSLHJlbW92ZUxpc3RlbmVyOmoscmVtb3ZlQWxsTGlzdGVuZXJzOngsZW1pdDpULGJpbmRpbmc6ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCIpfSxjd2Q6ZnVuY3Rpb24oKXtyZXR1cm4iLyJ9LGNoZGlyOmZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcigicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkIil9LHVtYXNrOmZ1bmN0aW9uKCl7cmV0dXJuIDB9LGhydGltZTpmdW5jdGlvbih0KXt2YXIgZT0uMDAxKkEuY2FsbChPKSxyPU1hdGguZmxvb3IoZSksbj1NYXRoLmZsb29yKGUlMSoxZTkpO3JldHVybiB0JiYoci09dFswXSwobi09dFsxXSk8MCYmKHItLSxuKz0xZTkpKSxbcixuXX0scGxhdGZvcm06ImJyb3dzZXIiLHJlbGVhc2U6e30sY29uZmlnOnt9LHVwdGltZTpmdW5jdGlvbigpe3JldHVybihuZXcgRGF0ZS1MKS8xZTN9fSxNPW8oKGZ1bmN0aW9uKHQpe3ZvaWQgMD09PUN8fCFDLnZlcnNpb258fDA9PT1DLnZlcnNpb24uaW5kZXhPZigidjAuIil8fDA9PT1DLnZlcnNpb24uaW5kZXhPZigidjEuIikmJjAhPT1DLnZlcnNpb24uaW5kZXhPZigidjEuOC4iKT90LmV4cG9ydHM9e25leHRUaWNrOmZ1bmN0aW9uKHQsZSxyLG4pe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoJyJjYWxsYmFjayIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7dmFyIGksbyxhPWFyZ3VtZW50cy5sZW5ndGg7c3dpdGNoKGEpe2Nhc2UgMDpjYXNlIDE6cmV0dXJuIEMubmV4dFRpY2sodCk7Y2FzZSAyOnJldHVybiBDLm5leHRUaWNrKChmdW5jdGlvbigpe3QuY2FsbChudWxsLGUpfSkpO2Nhc2UgMzpyZXR1cm4gQy5uZXh0VGljaygoZnVuY3Rpb24oKXt0LmNhbGwobnVsbCxlLHIpfSkpO2Nhc2UgNDpyZXR1cm4gQy5uZXh0VGljaygoZnVuY3Rpb24oKXt0LmNhbGwobnVsbCxlLHIsbil9KSk7ZGVmYXVsdDpmb3IoaT1uZXcgQXJyYXkoYS0xKSxvPTA7bzxpLmxlbmd0aDspaVtvKytdPWFyZ3VtZW50c1tvXTtyZXR1cm4gQy5uZXh0VGljaygoZnVuY3Rpb24oKXt0LmFwcGx5KG51bGwsaSl9KSl9fX06dC5leHBvcnRzPUN9KSksUD17fS50b1N0cmluZyxCPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKHQpe3JldHVybiJbb2JqZWN0IEFycmF5XSI9PVAuY2FsbCh0KX07ZnVuY3Rpb24gTigpe31mdW5jdGlvbiBVKCl7VS5pbml0LmNhbGwodGhpcyl9ZnVuY3Rpb24gRCh0KXtyZXR1cm4gdm9pZCAwPT09dC5fbWF4TGlzdGVuZXJzP1UuZGVmYXVsdE1heExpc3RlbmVyczp0Ll9tYXhMaXN0ZW5lcnN9ZnVuY3Rpb24gSSh0LGUscil7aWYoZSl0LmNhbGwocik7ZWxzZSBmb3IodmFyIG49dC5sZW5ndGgsaT1IKHQsbiksbz0wO288bjsrK28paVtvXS5jYWxsKHIpfWZ1bmN0aW9uIEYodCxlLHIsbil7aWYoZSl0LmNhbGwocixuKTtlbHNlIGZvcih2YXIgaT10Lmxlbmd0aCxvPUgodCxpKSxhPTA7YTxpOysrYSlvW2FdLmNhbGwocixuKX1mdW5jdGlvbiBxKHQsZSxyLG4saSl7aWYoZSl0LmNhbGwocixuLGkpO2Vsc2UgZm9yKHZhciBvPXQubGVuZ3RoLGE9SCh0LG8pLHM9MDtzPG87KytzKWFbc10uY2FsbChyLG4saSl9ZnVuY3Rpb24gVyh0LGUscixuLGksbyl7aWYoZSl0LmNhbGwocixuLGksbyk7ZWxzZSBmb3IodmFyIGE9dC5sZW5ndGgscz1IKHQsYSksdT0wO3U8YTsrK3Upc1t1XS5jYWxsKHIsbixpLG8pfWZ1bmN0aW9uIHoodCxlLHIsbil7aWYoZSl0LmFwcGx5KHIsbik7ZWxzZSBmb3IodmFyIGk9dC5sZW5ndGgsbz1IKHQsaSksYT0wO2E8aTsrK2Epb1thXS5hcHBseShyLG4pfWZ1bmN0aW9uIFkodCxlLHIsbil7dmFyIGksbyxhLHM7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIHIpdGhyb3cgbmV3IFR5cGVFcnJvcignImxpc3RlbmVyIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtpZigobz10Ll9ldmVudHMpPyhvLm5ld0xpc3RlbmVyJiYodC5lbWl0KCJuZXdMaXN0ZW5lciIsZSxyLmxpc3RlbmVyP3IubGlzdGVuZXI6ciksbz10Ll9ldmVudHMpLGE9b1tlXSk6KG89dC5fZXZlbnRzPW5ldyBOLHQuX2V2ZW50c0NvdW50PTApLGEpe2lmKCJmdW5jdGlvbiI9PXR5cGVvZiBhP2E9b1tlXT1uP1tyLGFdOlthLHJdOm4/YS51bnNoaWZ0KHIpOmEucHVzaChyKSwhYS53YXJuZWQmJihpPUQodCkpJiZpPjAmJmEubGVuZ3RoPmkpe2Eud2FybmVkPSEwO3ZhciB1PW5ldyBFcnJvcigiUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAiK2EubGVuZ3RoKyIgIitlKyIgbGlzdGVuZXJzIGFkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdCIpO3UubmFtZT0iTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nIix1LmVtaXR0ZXI9dCx1LnR5cGU9ZSx1LmNvdW50PWEubGVuZ3RoLHM9dSwiZnVuY3Rpb24iPT10eXBlb2YgY29uc29sZS53YXJuP2NvbnNvbGUud2FybihzKTpjb25zb2xlLmxvZyhzKX19ZWxzZSBhPW9bZV09ciwrK3QuX2V2ZW50c0NvdW50O3JldHVybiB0fWZ1bmN0aW9uICQodCxlLHIpe3ZhciBuPSExO2Z1bmN0aW9uIGkoKXt0LnJlbW92ZUxpc3RlbmVyKGUsaSksbnx8KG49ITAsci5hcHBseSh0LGFyZ3VtZW50cykpfXJldHVybiBpLmxpc3RlbmVyPXIsaX1mdW5jdGlvbiBHKHQpe3ZhciBlPXRoaXMuX2V2ZW50cztpZihlKXt2YXIgcj1lW3RdO2lmKCJmdW5jdGlvbiI9PXR5cGVvZiByKXJldHVybiAxO2lmKHIpcmV0dXJuIHIubGVuZ3RofXJldHVybiAwfWZ1bmN0aW9uIEgodCxlKXtmb3IodmFyIHI9bmV3IEFycmF5KGUpO2UtLTspcltlXT10W2VdO3JldHVybiByfU4ucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobnVsbCksVS5FdmVudEVtaXR0ZXI9VSxVLnVzaW5nRG9tYWlucz0hMSxVLnByb3RvdHlwZS5kb21haW49dm9pZCAwLFUucHJvdG90eXBlLl9ldmVudHM9dm9pZCAwLFUucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnM9dm9pZCAwLFUuZGVmYXVsdE1heExpc3RlbmVycz0xMCxVLmluaXQ9ZnVuY3Rpb24oKXt0aGlzLmRvbWFpbj1udWxsLFUudXNpbmdEb21haW5zJiZ1bmRlZmluZWQuYWN0aXZlLHRoaXMuX2V2ZW50cyYmdGhpcy5fZXZlbnRzIT09T2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHN8fCh0aGlzLl9ldmVudHM9bmV3IE4sdGhpcy5fZXZlbnRzQ291bnQ9MCksdGhpcy5fbWF4TGlzdGVuZXJzPXRoaXMuX21heExpc3RlbmVyc3x8dm9pZCAwfSxVLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24odCl7aWYoIm51bWJlciIhPXR5cGVvZiB0fHx0PDB8fGlzTmFOKHQpKXRocm93IG5ldyBUeXBlRXJyb3IoJyJuIiBhcmd1bWVudCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7cmV0dXJuIHRoaXMuX21heExpc3RlbmVycz10LHRoaXN9LFUucHJvdG90eXBlLmdldE1heExpc3RlbmVycz1mdW5jdGlvbigpe3JldHVybiBEKHRoaXMpfSxVLnByb3RvdHlwZS5lbWl0PWZ1bmN0aW9uKHQpe3ZhciBlLHIsbixpLG8sYSxzLHU9ImVycm9yIj09PXQ7aWYoYT10aGlzLl9ldmVudHMpdT11JiZudWxsPT1hLmVycm9yO2Vsc2UgaWYoIXUpcmV0dXJuITE7aWYocz10aGlzLmRvbWFpbix1KXtpZihlPWFyZ3VtZW50c1sxXSwhcyl7aWYoZSBpbnN0YW5jZW9mIEVycm9yKXRocm93IGU7dmFyIGY9bmV3IEVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgImVycm9yIiBldmVudC4gKCcrZSsiKSIpO3Rocm93IGYuY29udGV4dD1lLGZ9cmV0dXJuIGV8fChlPW5ldyBFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkICJlcnJvciIgZXZlbnQnKSksZS5kb21haW5FbWl0dGVyPXRoaXMsZS5kb21haW49cyxlLmRvbWFpblRocm93bj0hMSxzLmVtaXQoImVycm9yIixlKSwhMX1pZighKHI9YVt0XSkpcmV0dXJuITE7dmFyIGg9ImZ1bmN0aW9uIj09dHlwZW9mIHI7c3dpdGNoKG49YXJndW1lbnRzLmxlbmd0aCl7Y2FzZSAxOkkocixoLHRoaXMpO2JyZWFrO2Nhc2UgMjpGKHIsaCx0aGlzLGFyZ3VtZW50c1sxXSk7YnJlYWs7Y2FzZSAzOnEocixoLHRoaXMsYXJndW1lbnRzWzFdLGFyZ3VtZW50c1syXSk7YnJlYWs7Y2FzZSA0OlcocixoLHRoaXMsYXJndW1lbnRzWzFdLGFyZ3VtZW50c1syXSxhcmd1bWVudHNbM10pO2JyZWFrO2RlZmF1bHQ6Zm9yKGk9bmV3IEFycmF5KG4tMSksbz0xO288bjtvKyspaVtvLTFdPWFyZ3VtZW50c1tvXTt6KHIsaCx0aGlzLGkpfXJldHVybiEwfSxVLnByb3RvdHlwZS5hZGRMaXN0ZW5lcj1mdW5jdGlvbih0LGUpe3JldHVybiBZKHRoaXMsdCxlLCExKX0sVS5wcm90b3R5cGUub249VS5wcm90b3R5cGUuYWRkTGlzdGVuZXIsVS5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIFkodGhpcyx0LGUsITApfSxVLnByb3RvdHlwZS5vbmNlPWZ1bmN0aW9uKHQsZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcignImxpc3RlbmVyIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtyZXR1cm4gdGhpcy5vbih0LCQodGhpcyx0LGUpKSx0aGlzfSxVLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyPWZ1bmN0aW9uKHQsZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcignImxpc3RlbmVyIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtyZXR1cm4gdGhpcy5wcmVwZW5kTGlzdGVuZXIodCwkKHRoaXMsdCxlKSksdGhpc30sVS5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI9ZnVuY3Rpb24odCxlKXt2YXIgcixuLGksbyxhO2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoJyJsaXN0ZW5lciIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7aWYoIShuPXRoaXMuX2V2ZW50cykpcmV0dXJuIHRoaXM7aWYoIShyPW5bdF0pKXJldHVybiB0aGlzO2lmKHI9PT1lfHxyLmxpc3RlbmVyJiZyLmxpc3RlbmVyPT09ZSkwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1uZXcgTjooZGVsZXRlIG5bdF0sbi5yZW1vdmVMaXN0ZW5lciYmdGhpcy5lbWl0KCJyZW1vdmVMaXN0ZW5lciIsdCxyLmxpc3RlbmVyfHxlKSk7ZWxzZSBpZigiZnVuY3Rpb24iIT10eXBlb2Ygcil7Zm9yKGk9LTEsbz1yLmxlbmd0aDtvLS0gPjA7KWlmKHJbb109PT1lfHxyW29dLmxpc3RlbmVyJiZyW29dLmxpc3RlbmVyPT09ZSl7YT1yW29dLmxpc3RlbmVyLGk9bzticmVha31pZihpPDApcmV0dXJuIHRoaXM7aWYoMT09PXIubGVuZ3RoKXtpZihyWzBdPXZvaWQgMCwwPT0tLXRoaXMuX2V2ZW50c0NvdW50KXJldHVybiB0aGlzLl9ldmVudHM9bmV3IE4sdGhpcztkZWxldGUgblt0XX1lbHNlIWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciByPWUsbj1yKzEsaT10Lmxlbmd0aDtuPGk7cis9MSxuKz0xKXRbcl09dFtuXTt0LnBvcCgpfShyLGkpO24ucmVtb3ZlTGlzdGVuZXImJnRoaXMuZW1pdCgicmVtb3ZlTGlzdGVuZXIiLHQsYXx8ZSl9cmV0dXJuIHRoaXN9LFUucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycz1mdW5jdGlvbih0KXt2YXIgZSxyO2lmKCEocj10aGlzLl9ldmVudHMpKXJldHVybiB0aGlzO2lmKCFyLnJlbW92ZUxpc3RlbmVyKXJldHVybiAwPT09YXJndW1lbnRzLmxlbmd0aD8odGhpcy5fZXZlbnRzPW5ldyBOLHRoaXMuX2V2ZW50c0NvdW50PTApOnJbdF0mJigwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1uZXcgTjpkZWxldGUgclt0XSksdGhpcztpZigwPT09YXJndW1lbnRzLmxlbmd0aCl7Zm9yKHZhciBuLGk9T2JqZWN0LmtleXMociksbz0wO288aS5sZW5ndGg7KytvKSJyZW1vdmVMaXN0ZW5lciIhPT0obj1pW29dKSYmdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMobik7cmV0dXJuIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCJyZW1vdmVMaXN0ZW5lciIpLHRoaXMuX2V2ZW50cz1uZXcgTix0aGlzLl9ldmVudHNDb3VudD0wLHRoaXN9aWYoImZ1bmN0aW9uIj09dHlwZW9mKGU9clt0XSkpdGhpcy5yZW1vdmVMaXN0ZW5lcih0LGUpO2Vsc2UgaWYoZSlkb3t0aGlzLnJlbW92ZUxpc3RlbmVyKHQsZVtlLmxlbmd0aC0xXSl9d2hpbGUoZVswXSk7cmV0dXJuIHRoaXN9LFUucHJvdG90eXBlLmxpc3RlbmVycz1mdW5jdGlvbih0KXt2YXIgZSxyPXRoaXMuX2V2ZW50cztyZXR1cm4gciYmKGU9clt0XSk/ImZ1bmN0aW9uIj09dHlwZW9mIGU/W2UubGlzdGVuZXJ8fGVdOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgQXJyYXkodC5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrcillW3JdPXRbcl0ubGlzdGVuZXJ8fHRbcl07cmV0dXJuIGV9KGUpOltdfSxVLmxpc3RlbmVyQ291bnQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4iZnVuY3Rpb24iPT10eXBlb2YgdC5saXN0ZW5lckNvdW50P3QubGlzdGVuZXJDb3VudChlKTpHLmNhbGwodCxlKX0sVS5wcm90b3R5cGUubGlzdGVuZXJDb3VudD1HLFUucHJvdG90eXBlLmV2ZW50TmFtZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQ+MD9SZWZsZWN0Lm93bktleXModGhpcy5fZXZlbnRzKTpbXX07dmFyIEo9aShPYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxkZWZhdWx0OlUsRXZlbnRFbWl0dGVyOlV9KSksVj1KLkV2ZW50RW1pdHRlcixLPVtdLFo9W10sWD0idW5kZWZpbmVkIiE9dHlwZW9mIFVpbnQ4QXJyYXk/VWludDhBcnJheTpBcnJheSxRPSExO2Z1bmN0aW9uIHR0KCl7UT0hMDtmb3IodmFyIHQ9IkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8iLGU9MCxyPXQubGVuZ3RoO2U8cjsrK2UpS1tlXT10W2VdLFpbdC5jaGFyQ29kZUF0KGUpXT1lO1pbIi0iLmNoYXJDb2RlQXQoMCldPTYyLFpbIl8iLmNoYXJDb2RlQXQoMCldPTYzfWZ1bmN0aW9uIGV0KHQsZSxyKXtmb3IodmFyIG4saSxvPVtdLGE9ZTthPHI7YSs9MyluPSh0W2FdPDwxNikrKHRbYSsxXTw8OCkrdFthKzJdLG8ucHVzaChLWyhpPW4pPj4xOCY2M10rS1tpPj4xMiY2M10rS1tpPj42JjYzXStLWzYzJmldKTtyZXR1cm4gby5qb2luKCIiKX1mdW5jdGlvbiBydCh0KXt2YXIgZTtRfHx0dCgpO2Zvcih2YXIgcj10Lmxlbmd0aCxuPXIlMyxpPSIiLG89W10sYT0xNjM4MyxzPTAsdT1yLW47czx1O3MrPWEpby5wdXNoKGV0KHQscyxzK2E+dT91OnMrYSkpO3JldHVybiAxPT09bj8oZT10W3ItMV0saSs9S1tlPj4yXSxpKz1LW2U8PDQmNjNdLGkrPSI9PSIpOjI9PT1uJiYoZT0odFtyLTJdPDw4KSt0W3ItMV0saSs9S1tlPj4xMF0saSs9S1tlPj40JjYzXSxpKz1LW2U8PDImNjNdLGkrPSI9Iiksby5wdXNoKGkpLG8uam9pbigiIil9ZnVuY3Rpb24gbnQodCxlLHIsbixpKXt2YXIgbyxhLHM9OCppLW4tMSx1PSgxPDxzKS0xLGY9dT4+MSxoPS03LGM9cj9pLTE6MCxsPXI/LTE6MSxkPXRbZStjXTtmb3IoYys9bCxvPWQmKDE8PC1oKS0xLGQ+Pj0taCxoKz1zO2g+MDtvPTI1NipvK3RbZStjXSxjKz1sLGgtPTgpO2ZvcihhPW8mKDE8PC1oKS0xLG8+Pj0taCxoKz1uO2g+MDthPTI1NiphK3RbZStjXSxjKz1sLGgtPTgpO2lmKDA9PT1vKW89MS1mO2Vsc2V7aWYobz09PXUpcmV0dXJuIGE/TmFOOjEvMCooZD8tMToxKTthKz1NYXRoLnBvdygyLG4pLG8tPWZ9cmV0dXJuKGQ/LTE6MSkqYSpNYXRoLnBvdygyLG8tbil9ZnVuY3Rpb24gaXQodCxlLHIsbixpLG8pe3ZhciBhLHMsdSxmPTgqby1pLTEsaD0oMTw8ZiktMSxjPWg+PjEsbD0yMz09PWk/TWF0aC5wb3coMiwtMjQpLU1hdGgucG93KDIsLTc3KTowLGQ9bj8wOm8tMSxwPW4/MTotMSxnPWU8MHx8MD09PWUmJjEvZTwwPzE6MDtmb3IoZT1NYXRoLmFicyhlKSxpc05hTihlKXx8ZT09PTEvMD8ocz1pc05hTihlKT8xOjAsYT1oKTooYT1NYXRoLmZsb29yKE1hdGgubG9nKGUpL01hdGguTE4yKSxlKih1PU1hdGgucG93KDIsLWEpKTwxJiYoYS0tLHUqPTIpLChlKz1hK2M+PTE/bC91OmwqTWF0aC5wb3coMiwxLWMpKSp1Pj0yJiYoYSsrLHUvPTIpLGErYz49aD8ocz0wLGE9aCk6YStjPj0xPyhzPShlKnUtMSkqTWF0aC5wb3coMixpKSxhKz1jKToocz1lKk1hdGgucG93KDIsYy0xKSpNYXRoLnBvdygyLGkpLGE9MCkpO2k+PTg7dFtyK2RdPTI1NSZzLGQrPXAscy89MjU2LGktPTgpO2ZvcihhPWE8PGl8cyxmKz1pO2Y+MDt0W3IrZF09MjU1JmEsZCs9cCxhLz0yNTYsZi09OCk7dFtyK2QtcF18PTEyOCpnfXZhciBvdD17fS50b1N0cmluZyxhdD1BcnJheS5pc0FycmF5fHxmdW5jdGlvbih0KXtyZXR1cm4iW29iamVjdCBBcnJheV0iPT1vdC5jYWxsKHQpfTtodC5UWVBFRF9BUlJBWV9TVVBQT1JUPXZvaWQgMD09PXMuVFlQRURfQVJSQVlfU1VQUE9SVHx8cy5UWVBFRF9BUlJBWV9TVVBQT1JUO3ZhciBzdD11dCgpO2Z1bmN0aW9uIHV0KCl7cmV0dXJuIGh0LlRZUEVEX0FSUkFZX1NVUFBPUlQ/MjE0NzQ4MzY0NzoxMDczNzQxODIzfWZ1bmN0aW9uIGZ0KHQsZSl7aWYodXQoKTxlKXRocm93IG5ldyBSYW5nZUVycm9yKCJJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCIpO3JldHVybiBodC5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0PW5ldyBVaW50OEFycmF5KGUpKS5fX3Byb3RvX189aHQucHJvdG90eXBlOihudWxsPT09dCYmKHQ9bmV3IGh0KGUpKSx0Lmxlbmd0aD1lKSx0fWZ1bmN0aW9uIGh0KHQsZSxyKXtpZighKGh0LlRZUEVEX0FSUkFZX1NVUFBPUlR8fHRoaXMgaW5zdGFuY2VvZiBodCkpcmV0dXJuIG5ldyBodCh0LGUscik7aWYoIm51bWJlciI9PXR5cGVvZiB0KXtpZigic3RyaW5nIj09dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKCJJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZyIpO3JldHVybiBkdCh0aGlzLHQpfXJldHVybiBjdCh0aGlzLHQsZSxyKX1mdW5jdGlvbiBjdCh0LGUscixuKXtpZigibnVtYmVyIj09dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcignInZhbHVlIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpO3JldHVybiJ1bmRlZmluZWQiIT10eXBlb2YgQXJyYXlCdWZmZXImJmUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcj9mdW5jdGlvbih0LGUscixuKXtpZihlLmJ5dGVMZW5ndGgscjwwfHxlLmJ5dGVMZW5ndGg8cil0aHJvdyBuZXcgUmFuZ2VFcnJvcigiJ29mZnNldCcgaXMgb3V0IG9mIGJvdW5kcyIpO2lmKGUuYnl0ZUxlbmd0aDxyKyhufHwwKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcigiJ2xlbmd0aCcgaXMgb3V0IG9mIGJvdW5kcyIpO2U9dm9pZCAwPT09ciYmdm9pZCAwPT09bj9uZXcgVWludDhBcnJheShlKTp2b2lkIDA9PT1uP25ldyBVaW50OEFycmF5KGUscik6bmV3IFVpbnQ4QXJyYXkoZSxyLG4pO2h0LlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHQ9ZSkuX19wcm90b19fPWh0LnByb3RvdHlwZTp0PXB0KHQsZSk7cmV0dXJuIHR9KHQsZSxyLG4pOiJzdHJpbmciPT10eXBlb2YgZT9mdW5jdGlvbih0LGUscil7InN0cmluZyI9PXR5cGVvZiByJiYiIiE9PXJ8fChyPSJ1dGY4Iik7aWYoIWh0LmlzRW5jb2RpbmcocikpdGhyb3cgbmV3IFR5cGVFcnJvcignImVuY29kaW5nIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJyk7dmFyIG49MHx2dChlLHIpLGk9KHQ9ZnQodCxuKSkud3JpdGUoZSxyKTtpIT09biYmKHQ9dC5zbGljZSgwLGkpKTtyZXR1cm4gdH0odCxlLHIpOmZ1bmN0aW9uKHQsZSl7aWYoeXQoZSkpe3ZhciByPTB8Z3QoZS5sZW5ndGgpO3JldHVybiAwPT09KHQ9ZnQodCxyKSkubGVuZ3RofHxlLmNvcHkodCwwLDAsciksdH1pZihlKXtpZigidW5kZWZpbmVkIiE9dHlwZW9mIEFycmF5QnVmZmVyJiZlLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyfHwibGVuZ3RoImluIGUpcmV0dXJuIm51bWJlciIhPXR5cGVvZiBlLmxlbmd0aHx8ZnVuY3Rpb24odCl7cmV0dXJuIHQhPXR9KGUubGVuZ3RoKT9mdCh0LDApOnB0KHQsZSk7aWYoIkJ1ZmZlciI9PT1lLnR5cGUmJmF0KGUuZGF0YSkpcmV0dXJuIHB0KHQsZS5kYXRhKX10aHJvdyBuZXcgVHlwZUVycm9yKCJGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuIil9KHQsZSl9ZnVuY3Rpb24gbHQodCl7aWYoIm51bWJlciIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoJyJzaXplIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJyk7aWYodDwwKXRocm93IG5ldyBSYW5nZUVycm9yKCcic2l6ZSIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKX1mdW5jdGlvbiBkdCh0LGUpe2lmKGx0KGUpLHQ9ZnQodCxlPDA/MDowfGd0KGUpKSwhaHQuVFlQRURfQVJSQVlfU1VQUE9SVClmb3IodmFyIHI9MDtyPGU7KytyKXRbcl09MDtyZXR1cm4gdH1mdW5jdGlvbiBwdCh0LGUpe3ZhciByPWUubGVuZ3RoPDA/MDowfGd0KGUubGVuZ3RoKTt0PWZ0KHQscik7Zm9yKHZhciBuPTA7bjxyO24rPTEpdFtuXT0yNTUmZVtuXTtyZXR1cm4gdH1mdW5jdGlvbiBndCh0KXtpZih0Pj11dCgpKXRocm93IG5ldyBSYW5nZUVycm9yKCJBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtIHNpemU6IDB4Iit1dCgpLnRvU3RyaW5nKDE2KSsiIGJ5dGVzIik7cmV0dXJuIDB8dH1mdW5jdGlvbiB5dCh0KXtyZXR1cm4hKG51bGw9PXR8fCF0Ll9pc0J1ZmZlcil9ZnVuY3Rpb24gdnQodCxlKXtpZih5dCh0KSlyZXR1cm4gdC5sZW5ndGg7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmImZ1bmN0aW9uIj09dHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyYmKEFycmF5QnVmZmVyLmlzVmlldyh0KXx8dCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSlyZXR1cm4gdC5ieXRlTGVuZ3RoOyJzdHJpbmciIT10eXBlb2YgdCYmKHQ9IiIrdCk7dmFyIHI9dC5sZW5ndGg7aWYoMD09PXIpcmV0dXJuIDA7Zm9yKHZhciBuPSExOzspc3dpdGNoKGUpe2Nhc2UiYXNjaWkiOmNhc2UibGF0aW4xIjpjYXNlImJpbmFyeSI6cmV0dXJuIHI7Y2FzZSJ1dGY4IjpjYXNlInV0Zi04IjpjYXNlIHZvaWQgMDpyZXR1cm4genQodCkubGVuZ3RoO2Nhc2UidWNzMiI6Y2FzZSJ1Y3MtMiI6Y2FzZSJ1dGYxNmxlIjpjYXNlInV0Zi0xNmxlIjpyZXR1cm4gMipyO2Nhc2UiaGV4IjpyZXR1cm4gcj4+PjE7Y2FzZSJiYXNlNjQiOnJldHVybiBZdCh0KS5sZW5ndGg7ZGVmYXVsdDppZihuKXJldHVybiB6dCh0KS5sZW5ndGg7ZT0oIiIrZSkudG9Mb3dlckNhc2UoKSxuPSEwfX1mdW5jdGlvbiBidCh0LGUscil7dmFyIG49ITE7aWYoKHZvaWQgMD09PWV8fGU8MCkmJihlPTApLGU+dGhpcy5sZW5ndGgpcmV0dXJuIiI7aWYoKHZvaWQgMD09PXJ8fHI+dGhpcy5sZW5ndGgpJiYocj10aGlzLmxlbmd0aCkscjw9MClyZXR1cm4iIjtpZigocj4+Pj0wKTw9KGU+Pj49MCkpcmV0dXJuIiI7Zm9yKHR8fCh0PSJ1dGY4Iik7Oylzd2l0Y2godCl7Y2FzZSJoZXgiOnJldHVybiBDdCh0aGlzLGUscik7Y2FzZSJ1dGY4IjpjYXNlInV0Zi04IjpyZXR1cm4gT3QodGhpcyxlLHIpO2Nhc2UiYXNjaWkiOnJldHVybiBBdCh0aGlzLGUscik7Y2FzZSJsYXRpbjEiOmNhc2UiYmluYXJ5IjpyZXR1cm4gTHQodGhpcyxlLHIpO2Nhc2UiYmFzZTY0IjpyZXR1cm4gVHQodGhpcyxlLHIpO2Nhc2UidWNzMiI6Y2FzZSJ1Y3MtMiI6Y2FzZSJ1dGYxNmxlIjpjYXNlInV0Zi0xNmxlIjpyZXR1cm4gTXQodGhpcyxlLHIpO2RlZmF1bHQ6aWYobil0aHJvdyBuZXcgVHlwZUVycm9yKCJVbmtub3duIGVuY29kaW5nOiAiK3QpO3Q9KHQrIiIpLnRvTG93ZXJDYXNlKCksbj0hMH19ZnVuY3Rpb24gd3QodCxlLHIpe3ZhciBuPXRbZV07dFtlXT10W3JdLHRbcl09bn1mdW5jdGlvbiBtdCh0LGUscixuLGkpe2lmKDA9PT10Lmxlbmd0aClyZXR1cm4tMTtpZigic3RyaW5nIj09dHlwZW9mIHI/KG49cixyPTApOnI+MjE0NzQ4MzY0Nz9yPTIxNDc0ODM2NDc6cjwtMjE0NzQ4MzY0OCYmKHI9LTIxNDc0ODM2NDgpLHI9K3IsaXNOYU4ocikmJihyPWk/MDp0Lmxlbmd0aC0xKSxyPDAmJihyPXQubGVuZ3RoK3IpLHI+PXQubGVuZ3RoKXtpZihpKXJldHVybi0xO3I9dC5sZW5ndGgtMX1lbHNlIGlmKHI8MCl7aWYoIWkpcmV0dXJuLTE7cj0wfWlmKCJzdHJpbmciPT10eXBlb2YgZSYmKGU9aHQuZnJvbShlLG4pKSx5dChlKSlyZXR1cm4gMD09PWUubGVuZ3RoPy0xOl90KHQsZSxyLG4saSk7aWYoIm51bWJlciI9PXR5cGVvZiBlKXJldHVybiBlJj0yNTUsaHQuVFlQRURfQVJSQVlfU1VQUE9SVCYmImZ1bmN0aW9uIj09dHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2Y/aT9VaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwodCxlLHIpOlVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwodCxlLHIpOl90KHQsW2VdLHIsbixpKTt0aHJvdyBuZXcgVHlwZUVycm9yKCJ2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXIiKX1mdW5jdGlvbiBfdCh0LGUscixuLGkpe3ZhciBvLGE9MSxzPXQubGVuZ3RoLHU9ZS5sZW5ndGg7aWYodm9pZCAwIT09biYmKCJ1Y3MyIj09PShuPVN0cmluZyhuKS50b0xvd2VyQ2FzZSgpKXx8InVjcy0yIj09PW58fCJ1dGYxNmxlIj09PW58fCJ1dGYtMTZsZSI9PT1uKSl7aWYodC5sZW5ndGg8Mnx8ZS5sZW5ndGg8MilyZXR1cm4tMTthPTIscy89Mix1Lz0yLHIvPTJ9ZnVuY3Rpb24gZih0LGUpe3JldHVybiAxPT09YT90W2VdOnQucmVhZFVJbnQxNkJFKGUqYSl9aWYoaSl7dmFyIGg9LTE7Zm9yKG89cjtvPHM7bysrKWlmKGYodCxvKT09PWYoZSwtMT09PWg/MDpvLWgpKXtpZigtMT09PWgmJihoPW8pLG8taCsxPT09dSlyZXR1cm4gaCphfWVsc2UtMSE9PWgmJihvLT1vLWgpLGg9LTF9ZWxzZSBmb3Iocit1PnMmJihyPXMtdSksbz1yO28+PTA7by0tKXtmb3IodmFyIGM9ITAsbD0wO2w8dTtsKyspaWYoZih0LG8rbCkhPT1mKGUsbCkpe2M9ITE7YnJlYWt9aWYoYylyZXR1cm4gb31yZXR1cm4tMX1mdW5jdGlvbiBTdCh0LGUscixuKXtyPU51bWJlcihyKXx8MDt2YXIgaT10Lmxlbmd0aC1yO24/KG49TnVtYmVyKG4pKT5pJiYobj1pKTpuPWk7dmFyIG89ZS5sZW5ndGg7aWYobyUyIT0wKXRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgaGV4IHN0cmluZyIpO24+by8yJiYobj1vLzIpO2Zvcih2YXIgYT0wO2E8bjsrK2Epe3ZhciBzPXBhcnNlSW50KGUuc3Vic3RyKDIqYSwyKSwxNik7aWYoaXNOYU4ocykpcmV0dXJuIGE7dFtyK2FdPXN9cmV0dXJuIGF9ZnVuY3Rpb24gRXQodCxlLHIsbil7cmV0dXJuICR0KHp0KGUsdC5sZW5ndGgtciksdCxyLG4pfWZ1bmN0aW9uIGt0KHQsZSxyLG4pe3JldHVybiAkdChmdW5jdGlvbih0KXtmb3IodmFyIGU9W10scj0wO3I8dC5sZW5ndGg7KytyKWUucHVzaCgyNTUmdC5jaGFyQ29kZUF0KHIpKTtyZXR1cm4gZX0oZSksdCxyLG4pfWZ1bmN0aW9uIFJ0KHQsZSxyLG4pe3JldHVybiBrdCh0LGUscixuKX1mdW5jdGlvbiBqdCh0LGUscixuKXtyZXR1cm4gJHQoWXQoZSksdCxyLG4pfWZ1bmN0aW9uIHh0KHQsZSxyLG4pe3JldHVybiAkdChmdW5jdGlvbih0LGUpe2Zvcih2YXIgcixuLGksbz1bXSxhPTA7YTx0Lmxlbmd0aCYmISgoZS09Mik8MCk7KythKW49KHI9dC5jaGFyQ29kZUF0KGEpKT4+OCxpPXIlMjU2LG8ucHVzaChpKSxvLnB1c2gobik7cmV0dXJuIG99KGUsdC5sZW5ndGgtciksdCxyLG4pfWZ1bmN0aW9uIFR0KHQsZSxyKXtyZXR1cm4gMD09PWUmJnI9PT10Lmxlbmd0aD9ydCh0KTpydCh0LnNsaWNlKGUscikpfWZ1bmN0aW9uIE90KHQsZSxyKXtyPU1hdGgubWluKHQubGVuZ3RoLHIpO2Zvcih2YXIgbj1bXSxpPWU7aTxyOyl7dmFyIG8sYSxzLHUsZj10W2ldLGg9bnVsbCxjPWY+MjM5PzQ6Zj4yMjM/MzpmPjE5MT8yOjE7aWYoaStjPD1yKXN3aXRjaChjKXtjYXNlIDE6ZjwxMjgmJihoPWYpO2JyZWFrO2Nhc2UgMjoxMjg9PSgxOTImKG89dFtpKzFdKSkmJih1PSgzMSZmKTw8Nnw2MyZvKT4xMjcmJihoPXUpO2JyZWFrO2Nhc2UgMzpvPXRbaSsxXSxhPXRbaSsyXSwxMjg9PSgxOTImbykmJjEyOD09KDE5MiZhKSYmKHU9KDE1JmYpPDwxMnwoNjMmbyk8PDZ8NjMmYSk+MjA0NyYmKHU8NTUyOTZ8fHU+NTczNDMpJiYoaD11KTticmVhaztjYXNlIDQ6bz10W2krMV0sYT10W2krMl0scz10W2krM10sMTI4PT0oMTkyJm8pJiYxMjg9PSgxOTImYSkmJjEyOD09KDE5MiZzKSYmKHU9KDE1JmYpPDwxOHwoNjMmbyk8PDEyfCg2MyZhKTw8Nnw2MyZzKT42NTUzNSYmdTwxMTE0MTEyJiYoaD11KX1udWxsPT09aD8oaD02NTUzMyxjPTEpOmg+NjU1MzUmJihoLT02NTUzNixuLnB1c2goaD4+PjEwJjEwMjN8NTUyOTYpLGg9NTYzMjB8MTAyMyZoKSxuLnB1c2goaCksaSs9Y31yZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5sZW5ndGg7aWYoZTw9NDA5NilyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsdCk7dmFyIHI9IiIsbj0wO2Zvcig7bjxlOylyKz1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyx0LnNsaWNlKG4sbis9NDA5NikpO3JldHVybiByfShuKX1odC5wb29sU2l6ZT04MTkyLGh0Ll9hdWdtZW50PWZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fXz1odC5wcm90b3R5cGUsdH0saHQuZnJvbT1mdW5jdGlvbih0LGUscil7cmV0dXJuIGN0KG51bGwsdCxlLHIpfSxodC5UWVBFRF9BUlJBWV9TVVBQT1JUJiYoaHQucHJvdG90eXBlLl9fcHJvdG9fXz1VaW50OEFycmF5LnByb3RvdHlwZSxodC5fX3Byb3RvX189VWludDhBcnJheSksaHQuYWxsb2M9ZnVuY3Rpb24odCxlLHIpe3JldHVybiBmdW5jdGlvbih0LGUscixuKXtyZXR1cm4gbHQoZSksZTw9MD9mdCh0LGUpOnZvaWQgMCE9PXI/InN0cmluZyI9PXR5cGVvZiBuP2Z0KHQsZSkuZmlsbChyLG4pOmZ0KHQsZSkuZmlsbChyKTpmdCh0LGUpfShudWxsLHQsZSxyKX0saHQuYWxsb2NVbnNhZmU9ZnVuY3Rpb24odCl7cmV0dXJuIGR0KG51bGwsdCl9LGh0LmFsbG9jVW5zYWZlU2xvdz1mdW5jdGlvbih0KXtyZXR1cm4gZHQobnVsbCx0KX0saHQuaXNCdWZmZXI9R3QsaHQuY29tcGFyZT1mdW5jdGlvbih0LGUpe2lmKCF5dCh0KXx8IXl0KGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkFyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMiKTtpZih0PT09ZSlyZXR1cm4gMDtmb3IodmFyIHI9dC5sZW5ndGgsbj1lLmxlbmd0aCxpPTAsbz1NYXRoLm1pbihyLG4pO2k8bzsrK2kpaWYodFtpXSE9PWVbaV0pe3I9dFtpXSxuPWVbaV07YnJlYWt9cmV0dXJuIHI8bj8tMTpuPHI/MTowfSxodC5pc0VuY29kaW5nPWZ1bmN0aW9uKHQpe3N3aXRjaChTdHJpbmcodCkudG9Mb3dlckNhc2UoKSl7Y2FzZSJoZXgiOmNhc2UidXRmOCI6Y2FzZSJ1dGYtOCI6Y2FzZSJhc2NpaSI6Y2FzZSJsYXRpbjEiOmNhc2UiYmluYXJ5IjpjYXNlImJhc2U2NCI6Y2FzZSJ1Y3MyIjpjYXNlInVjcy0yIjpjYXNlInV0ZjE2bGUiOmNhc2UidXRmLTE2bGUiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fSxodC5jb25jYXQ9ZnVuY3Rpb24odCxlKXtpZighYXQodCkpdGhyb3cgbmV3IFR5cGVFcnJvcignImxpc3QiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpO2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gaHQuYWxsb2MoMCk7dmFyIHI7aWYodm9pZCAwPT09ZSlmb3IoZT0wLHI9MDtyPHQubGVuZ3RoOysrcillKz10W3JdLmxlbmd0aDt2YXIgbj1odC5hbGxvY1Vuc2FmZShlKSxpPTA7Zm9yKHI9MDtyPHQubGVuZ3RoOysrcil7dmFyIG89dFtyXTtpZigheXQobykpdGhyb3cgbmV3IFR5cGVFcnJvcignImxpc3QiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpO28uY29weShuLGkpLGkrPW8ubGVuZ3RofXJldHVybiBufSxodC5ieXRlTGVuZ3RoPXZ0LGh0LnByb3RvdHlwZS5faXNCdWZmZXI9ITAsaHQucHJvdG90eXBlLnN3YXAxNj1mdW5jdGlvbigpe3ZhciB0PXRoaXMubGVuZ3RoO2lmKHQlMiE9MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcigiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMiKTtmb3IodmFyIGU9MDtlPHQ7ZSs9Mil3dCh0aGlzLGUsZSsxKTtyZXR1cm4gdGhpc30saHQucHJvdG90eXBlLnN3YXAzMj1mdW5jdGlvbigpe3ZhciB0PXRoaXMubGVuZ3RoO2lmKHQlNCE9MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcigiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMiKTtmb3IodmFyIGU9MDtlPHQ7ZSs9NCl3dCh0aGlzLGUsZSszKSx3dCh0aGlzLGUrMSxlKzIpO3JldHVybiB0aGlzfSxodC5wcm90b3R5cGUuc3dhcDY0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5sZW5ndGg7aWYodCU4IT0wKXRocm93IG5ldyBSYW5nZUVycm9yKCJCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cyIpO2Zvcih2YXIgZT0wO2U8dDtlKz04KXd0KHRoaXMsZSxlKzcpLHd0KHRoaXMsZSsxLGUrNiksd3QodGhpcyxlKzIsZSs1KSx3dCh0aGlzLGUrMyxlKzQpO3JldHVybiB0aGlzfSxodC5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgdD0wfHRoaXMubGVuZ3RoO3JldHVybiAwPT09dD8iIjowPT09YXJndW1lbnRzLmxlbmd0aD9PdCh0aGlzLDAsdCk6YnQuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxodC5wcm90b3R5cGUuZXF1YWxzPWZ1bmN0aW9uKHQpe2lmKCF5dCh0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIik7cmV0dXJuIHRoaXM9PT10fHwwPT09aHQuY29tcGFyZSh0aGlzLHQpfSxodC5wcm90b3R5cGUuaW5zcGVjdD1mdW5jdGlvbigpe3ZhciB0PSIiO3JldHVybiB0aGlzLmxlbmd0aD4wJiYodD10aGlzLnRvU3RyaW5nKCJoZXgiLDAsNTApLm1hdGNoKC8uezJ9L2cpLmpvaW4oIiAiKSx0aGlzLmxlbmd0aD41MCYmKHQrPSIgLi4uICIpKSwiPEJ1ZmZlciAiK3QrIj4ifSxodC5wcm90b3R5cGUuY29tcGFyZT1mdW5jdGlvbih0LGUscixuLGkpe2lmKCF5dCh0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIik7aWYodm9pZCAwPT09ZSYmKGU9MCksdm9pZCAwPT09ciYmKHI9dD90Lmxlbmd0aDowKSx2b2lkIDA9PT1uJiYobj0wKSx2b2lkIDA9PT1pJiYoaT10aGlzLmxlbmd0aCksZTwwfHxyPnQubGVuZ3RofHxuPDB8fGk+dGhpcy5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoIm91dCBvZiByYW5nZSBpbmRleCIpO2lmKG4+PWkmJmU+PXIpcmV0dXJuIDA7aWYobj49aSlyZXR1cm4tMTtpZihlPj1yKXJldHVybiAxO2lmKHRoaXM9PT10KXJldHVybiAwO2Zvcih2YXIgbz0oaT4+Pj0wKS0obj4+Pj0wKSxhPShyPj4+PTApLShlPj4+PTApLHM9TWF0aC5taW4obyxhKSx1PXRoaXMuc2xpY2UobixpKSxmPXQuc2xpY2UoZSxyKSxoPTA7aDxzOysraClpZih1W2hdIT09ZltoXSl7bz11W2hdLGE9ZltoXTticmVha31yZXR1cm4gbzxhPy0xOmE8bz8xOjB9LGh0LnByb3RvdHlwZS5pbmNsdWRlcz1mdW5jdGlvbih0LGUscil7cmV0dXJuLTEhPT10aGlzLmluZGV4T2YodCxlLHIpfSxodC5wcm90b3R5cGUuaW5kZXhPZj1mdW5jdGlvbih0LGUscil7cmV0dXJuIG10KHRoaXMsdCxlLHIsITApfSxodC5wcm90b3R5cGUubGFzdEluZGV4T2Y9ZnVuY3Rpb24odCxlLHIpe3JldHVybiBtdCh0aGlzLHQsZSxyLCExKX0saHQucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHQsZSxyLG4pe2lmKHZvaWQgMD09PWUpbj0idXRmOCIscj10aGlzLmxlbmd0aCxlPTA7ZWxzZSBpZih2b2lkIDA9PT1yJiYic3RyaW5nIj09dHlwZW9mIGUpbj1lLHI9dGhpcy5sZW5ndGgsZT0wO2Vsc2V7aWYoIWlzRmluaXRlKGUpKXRocm93IG5ldyBFcnJvcigiQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQiKTtlfD0wLGlzRmluaXRlKHIpPyhyfD0wLHZvaWQgMD09PW4mJihuPSJ1dGY4IikpOihuPXIscj12b2lkIDApfXZhciBpPXRoaXMubGVuZ3RoLWU7aWYoKHZvaWQgMD09PXJ8fHI+aSkmJihyPWkpLHQubGVuZ3RoPjAmJihyPDB8fGU8MCl8fGU+dGhpcy5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoIkF0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzIik7bnx8KG49InV0ZjgiKTtmb3IodmFyIG89ITE7Oylzd2l0Y2gobil7Y2FzZSJoZXgiOnJldHVybiBTdCh0aGlzLHQsZSxyKTtjYXNlInV0ZjgiOmNhc2UidXRmLTgiOnJldHVybiBFdCh0aGlzLHQsZSxyKTtjYXNlImFzY2lpIjpyZXR1cm4ga3QodGhpcyx0LGUscik7Y2FzZSJsYXRpbjEiOmNhc2UiYmluYXJ5IjpyZXR1cm4gUnQodGhpcyx0LGUscik7Y2FzZSJiYXNlNjQiOnJldHVybiBqdCh0aGlzLHQsZSxyKTtjYXNlInVjczIiOmNhc2UidWNzLTIiOmNhc2UidXRmMTZsZSI6Y2FzZSJ1dGYtMTZsZSI6cmV0dXJuIHh0KHRoaXMsdCxlLHIpO2RlZmF1bHQ6aWYobyl0aHJvdyBuZXcgVHlwZUVycm9yKCJVbmtub3duIGVuY29kaW5nOiAiK24pO249KCIiK24pLnRvTG93ZXJDYXNlKCksbz0hMH19LGh0LnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm57dHlwZToiQnVmZmVyIixkYXRhOkFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2Fycnx8dGhpcywwKX19O2Z1bmN0aW9uIEF0KHQsZSxyKXt2YXIgbj0iIjtyPU1hdGgubWluKHQubGVuZ3RoLHIpO2Zvcih2YXIgaT1lO2k8cjsrK2kpbis9U3RyaW5nLmZyb21DaGFyQ29kZSgxMjcmdFtpXSk7cmV0dXJuIG59ZnVuY3Rpb24gTHQodCxlLHIpe3ZhciBuPSIiO3I9TWF0aC5taW4odC5sZW5ndGgscik7Zm9yKHZhciBpPWU7aTxyOysraSluKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHRbaV0pO3JldHVybiBufWZ1bmN0aW9uIEN0KHQsZSxyKXt2YXIgbj10Lmxlbmd0aDsoIWV8fGU8MCkmJihlPTApLCghcnx8cjwwfHxyPm4pJiYocj1uKTtmb3IodmFyIGk9IiIsbz1lO288cjsrK28paSs9V3QodFtvXSk7cmV0dXJuIGl9ZnVuY3Rpb24gTXQodCxlLHIpe2Zvcih2YXIgbj10LnNsaWNlKGUsciksaT0iIixvPTA7bzxuLmxlbmd0aDtvKz0yKWkrPVN0cmluZy5mcm9tQ2hhckNvZGUobltvXSsyNTYqbltvKzFdKTtyZXR1cm4gaX1mdW5jdGlvbiBQdCh0LGUscil7aWYodCUxIT0wfHx0PDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoIm9mZnNldCBpcyBub3QgdWludCIpO2lmKHQrZT5yKXRocm93IG5ldyBSYW5nZUVycm9yKCJUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoIil9ZnVuY3Rpb24gQnQodCxlLHIsbixpLG8pe2lmKCF5dCh0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCciYnVmZmVyIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJyk7aWYoZT5pfHxlPG8pdGhyb3cgbmV3IFJhbmdlRXJyb3IoJyJ2YWx1ZSIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpO2lmKHIrbj50Lmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcigiSW5kZXggb3V0IG9mIHJhbmdlIil9ZnVuY3Rpb24gTnQodCxlLHIsbil7ZTwwJiYoZT02NTUzNStlKzEpO2Zvcih2YXIgaT0wLG89TWF0aC5taW4odC5sZW5ndGgtciwyKTtpPG87KytpKXRbcitpXT0oZSYyNTU8PDgqKG4/aToxLWkpKT4+PjgqKG4/aToxLWkpfWZ1bmN0aW9uIFV0KHQsZSxyLG4pe2U8MCYmKGU9NDI5NDk2NzI5NStlKzEpO2Zvcih2YXIgaT0wLG89TWF0aC5taW4odC5sZW5ndGgtciw0KTtpPG87KytpKXRbcitpXT1lPj4+OCoobj9pOjMtaSkmMjU1fWZ1bmN0aW9uIER0KHQsZSxyLG4saSxvKXtpZihyK24+dC5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoIkluZGV4IG91dCBvZiByYW5nZSIpO2lmKHI8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcigiSW5kZXggb3V0IG9mIHJhbmdlIil9ZnVuY3Rpb24gSXQodCxlLHIsbixpKXtyZXR1cm4gaXx8RHQodCwwLHIsNCksaXQodCxlLHIsbiwyMyw0KSxyKzR9ZnVuY3Rpb24gRnQodCxlLHIsbixpKXtyZXR1cm4gaXx8RHQodCwwLHIsOCksaXQodCxlLHIsbiw1Miw4KSxyKzh9aHQucHJvdG90eXBlLnNsaWNlPWZ1bmN0aW9uKHQsZSl7dmFyIHIsbj10aGlzLmxlbmd0aDtpZigodD1+fnQpPDA/KHQrPW4pPDAmJih0PTApOnQ+biYmKHQ9biksKGU9dm9pZCAwPT09ZT9uOn5+ZSk8MD8oZSs9bik8MCYmKGU9MCk6ZT5uJiYoZT1uKSxlPHQmJihlPXQpLGh0LlRZUEVEX0FSUkFZX1NVUFBPUlQpKHI9dGhpcy5zdWJhcnJheSh0LGUpKS5fX3Byb3RvX189aHQucHJvdG90eXBlO2Vsc2V7dmFyIGk9ZS10O3I9bmV3IGh0KGksdm9pZCAwKTtmb3IodmFyIG89MDtvPGk7KytvKXJbb109dGhpc1tvK3RdfXJldHVybiByfSxodC5wcm90b3R5cGUucmVhZFVJbnRMRT1mdW5jdGlvbih0LGUscil7dHw9MCxlfD0wLHJ8fFB0KHQsZSx0aGlzLmxlbmd0aCk7Zm9yKHZhciBuPXRoaXNbdF0saT0xLG89MDsrK288ZSYmKGkqPTI1Nik7KW4rPXRoaXNbdCtvXSppO3JldHVybiBufSxodC5wcm90b3R5cGUucmVhZFVJbnRCRT1mdW5jdGlvbih0LGUscil7dHw9MCxlfD0wLHJ8fFB0KHQsZSx0aGlzLmxlbmd0aCk7Zm9yKHZhciBuPXRoaXNbdCstLWVdLGk9MTtlPjAmJihpKj0yNTYpOyluKz10aGlzW3QrLS1lXSppO3JldHVybiBufSxodC5wcm90b3R5cGUucmVhZFVJbnQ4PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV8fFB0KHQsMSx0aGlzLmxlbmd0aCksdGhpc1t0XX0saHQucHJvdG90eXBlLnJlYWRVSW50MTZMRT1mdW5jdGlvbih0LGUpe3JldHVybiBlfHxQdCh0LDIsdGhpcy5sZW5ndGgpLHRoaXNbdF18dGhpc1t0KzFdPDw4fSxodC5wcm90b3R5cGUucmVhZFVJbnQxNkJFPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV8fFB0KHQsMix0aGlzLmxlbmd0aCksdGhpc1t0XTw8OHx0aGlzW3QrMV19LGh0LnByb3RvdHlwZS5yZWFkVUludDMyTEU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZXx8UHQodCw0LHRoaXMubGVuZ3RoKSwodGhpc1t0XXx0aGlzW3QrMV08PDh8dGhpc1t0KzJdPDwxNikrMTY3NzcyMTYqdGhpc1t0KzNdfSxodC5wcm90b3R5cGUucmVhZFVJbnQzMkJFPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV8fFB0KHQsNCx0aGlzLmxlbmd0aCksMTY3NzcyMTYqdGhpc1t0XSsodGhpc1t0KzFdPDwxNnx0aGlzW3QrMl08PDh8dGhpc1t0KzNdKX0saHQucHJvdG90eXBlLnJlYWRJbnRMRT1mdW5jdGlvbih0LGUscil7dHw9MCxlfD0wLHJ8fFB0KHQsZSx0aGlzLmxlbmd0aCk7Zm9yKHZhciBuPXRoaXNbdF0saT0xLG89MDsrK288ZSYmKGkqPTI1Nik7KW4rPXRoaXNbdCtvXSppO3JldHVybiBuPj0oaSo9MTI4KSYmKG4tPU1hdGgucG93KDIsOCplKSksbn0saHQucHJvdG90eXBlLnJlYWRJbnRCRT1mdW5jdGlvbih0LGUscil7dHw9MCxlfD0wLHJ8fFB0KHQsZSx0aGlzLmxlbmd0aCk7Zm9yKHZhciBuPWUsaT0xLG89dGhpc1t0Ky0tbl07bj4wJiYoaSo9MjU2KTspbys9dGhpc1t0Ky0tbl0qaTtyZXR1cm4gbz49KGkqPTEyOCkmJihvLT1NYXRoLnBvdygyLDgqZSkpLG99LGh0LnByb3RvdHlwZS5yZWFkSW50OD1mdW5jdGlvbih0LGUpe3JldHVybiBlfHxQdCh0LDEsdGhpcy5sZW5ndGgpLDEyOCZ0aGlzW3RdPy0xKigyNTUtdGhpc1t0XSsxKTp0aGlzW3RdfSxodC5wcm90b3R5cGUucmVhZEludDE2TEU9ZnVuY3Rpb24odCxlKXtlfHxQdCh0LDIsdGhpcy5sZW5ndGgpO3ZhciByPXRoaXNbdF18dGhpc1t0KzFdPDw4O3JldHVybiAzMjc2OCZyPzQyOTQ5MDE3NjB8cjpyfSxodC5wcm90b3R5cGUucmVhZEludDE2QkU9ZnVuY3Rpb24odCxlKXtlfHxQdCh0LDIsdGhpcy5sZW5ndGgpO3ZhciByPXRoaXNbdCsxXXx0aGlzW3RdPDw4O3JldHVybiAzMjc2OCZyPzQyOTQ5MDE3NjB8cjpyfSxodC5wcm90b3R5cGUucmVhZEludDMyTEU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZXx8UHQodCw0LHRoaXMubGVuZ3RoKSx0aGlzW3RdfHRoaXNbdCsxXTw8OHx0aGlzW3QrMl08PDE2fHRoaXNbdCszXTw8MjR9LGh0LnByb3RvdHlwZS5yZWFkSW50MzJCRT1mdW5jdGlvbih0LGUpe3JldHVybiBlfHxQdCh0LDQsdGhpcy5sZW5ndGgpLHRoaXNbdF08PDI0fHRoaXNbdCsxXTw8MTZ8dGhpc1t0KzJdPDw4fHRoaXNbdCszXX0saHQucHJvdG90eXBlLnJlYWRGbG9hdExFPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV8fFB0KHQsNCx0aGlzLmxlbmd0aCksbnQodGhpcyx0LCEwLDIzLDQpfSxodC5wcm90b3R5cGUucmVhZEZsb2F0QkU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZXx8UHQodCw0LHRoaXMubGVuZ3RoKSxudCh0aGlzLHQsITEsMjMsNCl9LGh0LnByb3RvdHlwZS5yZWFkRG91YmxlTEU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZXx8UHQodCw4LHRoaXMubGVuZ3RoKSxudCh0aGlzLHQsITAsNTIsOCl9LGh0LnByb3RvdHlwZS5yZWFkRG91YmxlQkU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZXx8UHQodCw4LHRoaXMubGVuZ3RoKSxudCh0aGlzLHQsITEsNTIsOCl9LGh0LnByb3RvdHlwZS53cml0ZVVJbnRMRT1mdW5jdGlvbih0LGUscixuKXsodD0rdCxlfD0wLHJ8PTAsbil8fEJ0KHRoaXMsdCxlLHIsTWF0aC5wb3coMiw4KnIpLTEsMCk7dmFyIGk9MSxvPTA7Zm9yKHRoaXNbZV09MjU1JnQ7KytvPHImJihpKj0yNTYpOyl0aGlzW2Urb109dC9pJjI1NTtyZXR1cm4gZStyfSxodC5wcm90b3R5cGUud3JpdGVVSW50QkU9ZnVuY3Rpb24odCxlLHIsbil7KHQ9K3QsZXw9MCxyfD0wLG4pfHxCdCh0aGlzLHQsZSxyLE1hdGgucG93KDIsOCpyKS0xLDApO3ZhciBpPXItMSxvPTE7Zm9yKHRoaXNbZStpXT0yNTUmdDstLWk+PTAmJihvKj0yNTYpOyl0aGlzW2UraV09dC9vJjI1NTtyZXR1cm4gZStyfSxodC5wcm90b3R5cGUud3JpdGVVSW50OD1mdW5jdGlvbih0LGUscil7cmV0dXJuIHQ9K3QsZXw9MCxyfHxCdCh0aGlzLHQsZSwxLDI1NSwwKSxodC5UWVBFRF9BUlJBWV9TVVBQT1JUfHwodD1NYXRoLmZsb29yKHQpKSx0aGlzW2VdPTI1NSZ0LGUrMX0saHQucHJvdG90eXBlLndyaXRlVUludDE2TEU9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0PSt0LGV8PTAscnx8QnQodGhpcyx0LGUsMiw2NTUzNSwwKSxodC5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0aGlzW2VdPTI1NSZ0LHRoaXNbZSsxXT10Pj4+OCk6TnQodGhpcyx0LGUsITApLGUrMn0saHQucHJvdG90eXBlLndyaXRlVUludDE2QkU9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0PSt0LGV8PTAscnx8QnQodGhpcyx0LGUsMiw2NTUzNSwwKSxodC5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0aGlzW2VdPXQ+Pj44LHRoaXNbZSsxXT0yNTUmdCk6TnQodGhpcyx0LGUsITEpLGUrMn0saHQucHJvdG90eXBlLndyaXRlVUludDMyTEU9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0PSt0LGV8PTAscnx8QnQodGhpcyx0LGUsNCw0Mjk0OTY3Mjk1LDApLGh0LlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbZSszXT10Pj4+MjQsdGhpc1tlKzJdPXQ+Pj4xNix0aGlzW2UrMV09dD4+PjgsdGhpc1tlXT0yNTUmdCk6VXQodGhpcyx0LGUsITApLGUrNH0saHQucHJvdG90eXBlLndyaXRlVUludDMyQkU9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0PSt0LGV8PTAscnx8QnQodGhpcyx0LGUsNCw0Mjk0OTY3Mjk1LDApLGh0LlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbZV09dD4+PjI0LHRoaXNbZSsxXT10Pj4+MTYsdGhpc1tlKzJdPXQ+Pj44LHRoaXNbZSszXT0yNTUmdCk6VXQodGhpcyx0LGUsITEpLGUrNH0saHQucHJvdG90eXBlLndyaXRlSW50TEU9ZnVuY3Rpb24odCxlLHIsbil7aWYodD0rdCxlfD0wLCFuKXt2YXIgaT1NYXRoLnBvdygyLDgqci0xKTtCdCh0aGlzLHQsZSxyLGktMSwtaSl9dmFyIG89MCxhPTEscz0wO2Zvcih0aGlzW2VdPTI1NSZ0OysrbzxyJiYoYSo9MjU2KTspdDwwJiYwPT09cyYmMCE9PXRoaXNbZStvLTFdJiYocz0xKSx0aGlzW2Urb109KHQvYT4+MCktcyYyNTU7cmV0dXJuIGUrcn0saHQucHJvdG90eXBlLndyaXRlSW50QkU9ZnVuY3Rpb24odCxlLHIsbil7aWYodD0rdCxlfD0wLCFuKXt2YXIgaT1NYXRoLnBvdygyLDgqci0xKTtCdCh0aGlzLHQsZSxyLGktMSwtaSl9dmFyIG89ci0xLGE9MSxzPTA7Zm9yKHRoaXNbZStvXT0yNTUmdDstLW8+PTAmJihhKj0yNTYpOyl0PDAmJjA9PT1zJiYwIT09dGhpc1tlK28rMV0mJihzPTEpLHRoaXNbZStvXT0odC9hPj4wKS1zJjI1NTtyZXR1cm4gZStyfSxodC5wcm90b3R5cGUud3JpdGVJbnQ4PWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdD0rdCxlfD0wLHJ8fEJ0KHRoaXMsdCxlLDEsMTI3LC0xMjgpLGh0LlRZUEVEX0FSUkFZX1NVUFBPUlR8fCh0PU1hdGguZmxvb3IodCkpLHQ8MCYmKHQ9MjU1K3QrMSksdGhpc1tlXT0yNTUmdCxlKzF9LGh0LnByb3RvdHlwZS53cml0ZUludDE2TEU9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0PSt0LGV8PTAscnx8QnQodGhpcyx0LGUsMiwzMjc2NywtMzI3NjgpLGh0LlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbZV09MjU1JnQsdGhpc1tlKzFdPXQ+Pj44KTpOdCh0aGlzLHQsZSwhMCksZSsyfSxodC5wcm90b3R5cGUud3JpdGVJbnQxNkJFPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdD0rdCxlfD0wLHJ8fEJ0KHRoaXMsdCxlLDIsMzI3NjcsLTMyNzY4KSxodC5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0aGlzW2VdPXQ+Pj44LHRoaXNbZSsxXT0yNTUmdCk6TnQodGhpcyx0LGUsITEpLGUrMn0saHQucHJvdG90eXBlLndyaXRlSW50MzJMRT1mdW5jdGlvbih0LGUscil7cmV0dXJuIHQ9K3QsZXw9MCxyfHxCdCh0aGlzLHQsZSw0LDIxNDc0ODM2NDcsLTIxNDc0ODM2NDgpLGh0LlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbZV09MjU1JnQsdGhpc1tlKzFdPXQ+Pj44LHRoaXNbZSsyXT10Pj4+MTYsdGhpc1tlKzNdPXQ+Pj4yNCk6VXQodGhpcyx0LGUsITApLGUrNH0saHQucHJvdG90eXBlLndyaXRlSW50MzJCRT1mdW5jdGlvbih0LGUscil7cmV0dXJuIHQ9K3QsZXw9MCxyfHxCdCh0aGlzLHQsZSw0LDIxNDc0ODM2NDcsLTIxNDc0ODM2NDgpLHQ8MCYmKHQ9NDI5NDk2NzI5NSt0KzEpLGh0LlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbZV09dD4+PjI0LHRoaXNbZSsxXT10Pj4+MTYsdGhpc1tlKzJdPXQ+Pj44LHRoaXNbZSszXT0yNTUmdCk6VXQodGhpcyx0LGUsITEpLGUrNH0saHQucHJvdG90eXBlLndyaXRlRmxvYXRMRT1mdW5jdGlvbih0LGUscil7cmV0dXJuIEl0KHRoaXMsdCxlLCEwLHIpfSxodC5wcm90b3R5cGUud3JpdGVGbG9hdEJFPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gSXQodGhpcyx0LGUsITEscil9LGh0LnByb3RvdHlwZS53cml0ZURvdWJsZUxFPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gRnQodGhpcyx0LGUsITAscil9LGh0LnByb3RvdHlwZS53cml0ZURvdWJsZUJFPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gRnQodGhpcyx0LGUsITEscil9LGh0LnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKHQsZSxyLG4pe2lmKHJ8fChyPTApLG58fDA9PT1ufHwobj10aGlzLmxlbmd0aCksZT49dC5sZW5ndGgmJihlPXQubGVuZ3RoKSxlfHwoZT0wKSxuPjAmJm48ciYmKG49ciksbj09PXIpcmV0dXJuIDA7aWYoMD09PXQubGVuZ3RofHwwPT09dGhpcy5sZW5ndGgpcmV0dXJuIDA7aWYoZTwwKXRocm93IG5ldyBSYW5nZUVycm9yKCJ0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzIik7aWYocjwwfHxyPj10aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcigic291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcyIpO2lmKG48MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcigic291cmNlRW5kIG91dCBvZiBib3VuZHMiKTtuPnRoaXMubGVuZ3RoJiYobj10aGlzLmxlbmd0aCksdC5sZW5ndGgtZTxuLXImJihuPXQubGVuZ3RoLWUrcik7dmFyIGksbz1uLXI7aWYodGhpcz09PXQmJnI8ZSYmZTxuKWZvcihpPW8tMTtpPj0wOy0taSl0W2krZV09dGhpc1tpK3JdO2Vsc2UgaWYobzwxZTN8fCFodC5UWVBFRF9BUlJBWV9TVVBQT1JUKWZvcihpPTA7aTxvOysraSl0W2krZV09dGhpc1tpK3JdO2Vsc2UgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwodCx0aGlzLnN1YmFycmF5KHIscitvKSxlKTtyZXR1cm4gb30saHQucHJvdG90eXBlLmZpbGw9ZnVuY3Rpb24odCxlLHIsbil7aWYoInN0cmluZyI9PXR5cGVvZiB0KXtpZigic3RyaW5nIj09dHlwZW9mIGU/KG49ZSxlPTAscj10aGlzLmxlbmd0aCk6InN0cmluZyI9PXR5cGVvZiByJiYobj1yLHI9dGhpcy5sZW5ndGgpLDE9PT10Lmxlbmd0aCl7dmFyIGk9dC5jaGFyQ29kZUF0KDApO2k8MjU2JiYodD1pKX1pZih2b2lkIDAhPT1uJiYic3RyaW5nIiE9dHlwZW9mIG4pdGhyb3cgbmV3IFR5cGVFcnJvcigiZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZyIpO2lmKCJzdHJpbmciPT10eXBlb2YgbiYmIWh0LmlzRW5jb2RpbmcobikpdGhyb3cgbmV3IFR5cGVFcnJvcigiVW5rbm93biBlbmNvZGluZzogIituKX1lbHNlIm51bWJlciI9PXR5cGVvZiB0JiYodCY9MjU1KTtpZihlPDB8fHRoaXMubGVuZ3RoPGV8fHRoaXMubGVuZ3RoPHIpdGhyb3cgbmV3IFJhbmdlRXJyb3IoIk91dCBvZiByYW5nZSBpbmRleCIpO2lmKHI8PWUpcmV0dXJuIHRoaXM7dmFyIG87aWYoZT4+Pj0wLHI9dm9pZCAwPT09cj90aGlzLmxlbmd0aDpyPj4+MCx0fHwodD0wKSwibnVtYmVyIj09dHlwZW9mIHQpZm9yKG89ZTtvPHI7KytvKXRoaXNbb109dDtlbHNle3ZhciBhPXl0KHQpP3Q6enQobmV3IGh0KHQsbikudG9TdHJpbmcoKSkscz1hLmxlbmd0aDtmb3Iobz0wO288ci1lOysrbyl0aGlzW28rZV09YVtvJXNdfXJldHVybiB0aGlzfTt2YXIgcXQ9L1teK1wvMC05QS1aYS16LV9dL2c7ZnVuY3Rpb24gV3QodCl7cmV0dXJuIHQ8MTY/IjAiK3QudG9TdHJpbmcoMTYpOnQudG9TdHJpbmcoMTYpfWZ1bmN0aW9uIHp0KHQsZSl7dmFyIHI7ZT1lfHwxLzA7Zm9yKHZhciBuPXQubGVuZ3RoLGk9bnVsbCxvPVtdLGE9MDthPG47KythKXtpZigocj10LmNoYXJDb2RlQXQoYSkpPjU1Mjk1JiZyPDU3MzQ0KXtpZighaSl7aWYocj41NjMxOSl7KGUtPTMpPi0xJiZvLnB1c2goMjM5LDE5MSwxODkpO2NvbnRpbnVlfWlmKGErMT09PW4peyhlLT0zKT4tMSYmby5wdXNoKDIzOSwxOTEsMTg5KTtjb250aW51ZX1pPXI7Y29udGludWV9aWYocjw1NjMyMCl7KGUtPTMpPi0xJiZvLnB1c2goMjM5LDE5MSwxODkpLGk9cjtjb250aW51ZX1yPTY1NTM2KyhpLTU1Mjk2PDwxMHxyLTU2MzIwKX1lbHNlIGkmJihlLT0zKT4tMSYmby5wdXNoKDIzOSwxOTEsMTg5KTtpZihpPW51bGwscjwxMjgpe2lmKChlLT0xKTwwKWJyZWFrO28ucHVzaChyKX1lbHNlIGlmKHI8MjA0OCl7aWYoKGUtPTIpPDApYnJlYWs7by5wdXNoKHI+PjZ8MTkyLDYzJnJ8MTI4KX1lbHNlIGlmKHI8NjU1MzYpe2lmKChlLT0zKTwwKWJyZWFrO28ucHVzaChyPj4xMnwyMjQscj4+NiY2M3wxMjgsNjMmcnwxMjgpfWVsc2V7aWYoIShyPDExMTQxMTIpKXRocm93IG5ldyBFcnJvcigiSW52YWxpZCBjb2RlIHBvaW50Iik7aWYoKGUtPTQpPDApYnJlYWs7by5wdXNoKHI+PjE4fDI0MCxyPj4xMiY2M3wxMjgscj4+NiY2M3wxMjgsNjMmcnwxMjgpfX1yZXR1cm4gb31mdW5jdGlvbiBZdCh0KXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGUscixuLGksbyxhO1F8fHR0KCk7dmFyIHM9dC5sZW5ndGg7aWYocyU0PjApdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0Iik7bz0iPSI9PT10W3MtMl0/MjoiPSI9PT10W3MtMV0/MTowLGE9bmV3IFgoMypzLzQtbyksbj1vPjA/cy00OnM7dmFyIHU9MDtmb3IoZT0wLHI9MDtlPG47ZSs9NCxyKz0zKWk9Wlt0LmNoYXJDb2RlQXQoZSldPDwxOHxaW3QuY2hhckNvZGVBdChlKzEpXTw8MTJ8Wlt0LmNoYXJDb2RlQXQoZSsyKV08PDZ8Wlt0LmNoYXJDb2RlQXQoZSszKV0sYVt1KytdPWk+PjE2JjI1NSxhW3UrK109aT4+OCYyNTUsYVt1KytdPTI1NSZpO3JldHVybiAyPT09bz8oaT1aW3QuY2hhckNvZGVBdChlKV08PDJ8Wlt0LmNoYXJDb2RlQXQoZSsxKV0+PjQsYVt1KytdPTI1NSZpKToxPT09byYmKGk9Wlt0LmNoYXJDb2RlQXQoZSldPDwxMHxaW3QuY2hhckNvZGVBdChlKzEpXTw8NHxaW3QuY2hhckNvZGVBdChlKzIpXT4+MixhW3UrK109aT4+OCYyNTUsYVt1KytdPTI1NSZpKSxhfShmdW5jdGlvbih0KXtpZigodD1mdW5jdGlvbih0KXtyZXR1cm4gdC50cmltP3QudHJpbSgpOnQucmVwbGFjZSgvXlxzK3xccyskL2csIiIpfSh0KS5yZXBsYWNlKHF0LCIiKSkubGVuZ3RoPDIpcmV0dXJuIiI7Zm9yKDt0Lmxlbmd0aCU0IT0wOyl0Kz0iPSI7cmV0dXJuIHR9KHQpKX1mdW5jdGlvbiAkdCh0LGUscixuKXtmb3IodmFyIGk9MDtpPG4mJiEoaStyPj1lLmxlbmd0aHx8aT49dC5sZW5ndGgpOysraSllW2krcl09dFtpXTtyZXR1cm4gaX1mdW5jdGlvbiBHdCh0KXtyZXR1cm4gbnVsbCE9dCYmKCEhdC5faXNCdWZmZXJ8fEh0KHQpfHxmdW5jdGlvbih0KXtyZXR1cm4iZnVuY3Rpb24iPT10eXBlb2YgdC5yZWFkRmxvYXRMRSYmImZ1bmN0aW9uIj09dHlwZW9mIHQuc2xpY2UmJkh0KHQuc2xpY2UoMCwwKSl9KHQpKX1mdW5jdGlvbiBIdCh0KXtyZXR1cm4hIXQuY29uc3RydWN0b3ImJiJmdW5jdGlvbiI9PXR5cGVvZiB0LmNvbnN0cnVjdG9yLmlzQnVmZmVyJiZ0LmNvbnN0cnVjdG9yLmlzQnVmZmVyKHQpfXZhciBKdD1pKE9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLEJ1ZmZlcjpodCxJTlNQRUNUX01BWF9CWVRFUzo1MCxTbG93QnVmZmVyOmZ1bmN0aW9uKHQpe3JldHVybit0IT10JiYodD0wKSxodC5hbGxvYygrdCl9LGlzQnVmZmVyOkd0LGtNYXhMZW5ndGg6c3R9KSksVnQ9bygoZnVuY3Rpb24odCxlKXt2YXIgcj1KdC5CdWZmZXI7ZnVuY3Rpb24gbih0LGUpe2Zvcih2YXIgciBpbiB0KWVbcl09dFtyXX1mdW5jdGlvbiBpKHQsZSxuKXtyZXR1cm4gcih0LGUsbil9ci5mcm9tJiZyLmFsbG9jJiZyLmFsbG9jVW5zYWZlJiZyLmFsbG9jVW5zYWZlU2xvdz90LmV4cG9ydHM9SnQ6KG4oSnQsZSksZS5CdWZmZXI9aSksbihyLGkpLGkuZnJvbT1mdW5jdGlvbih0LGUsbil7aWYoIm51bWJlciI9PXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoIkFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyIik7cmV0dXJuIHIodCxlLG4pfSxpLmFsbG9jPWZ1bmN0aW9uKHQsZSxuKXtpZigibnVtYmVyIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcigiQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlciIpO3ZhciBpPXIodCk7cmV0dXJuIHZvaWQgMCE9PWU/InN0cmluZyI9PXR5cGVvZiBuP2kuZmlsbChlLG4pOmkuZmlsbChlKTppLmZpbGwoMCksaX0saS5hbGxvY1Vuc2FmZT1mdW5jdGlvbih0KXtpZigibnVtYmVyIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcigiQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlciIpO3JldHVybiByKHQpfSxpLmFsbG9jVW5zYWZlU2xvdz1mdW5jdGlvbih0KXtpZigibnVtYmVyIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcigiQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlciIpO3JldHVybiBKdC5TbG93QnVmZmVyKHQpfX0pKTtmdW5jdGlvbiBLdCh0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpfXZhciBadD17aXNBcnJheTpmdW5jdGlvbih0KXtyZXR1cm4gQXJyYXkuaXNBcnJheT9BcnJheS5pc0FycmF5KHQpOiJbb2JqZWN0IEFycmF5XSI9PT1LdCh0KX0saXNCb29sZWFuOmZ1bmN0aW9uKHQpe3JldHVybiJib29sZWFuIj09dHlwZW9mIHR9LGlzTnVsbDpmdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09PXR9LGlzTnVsbE9yVW5kZWZpbmVkOmZ1bmN0aW9uKHQpe3JldHVybiBudWxsPT10fSxpc051bWJlcjpmdW5jdGlvbih0KXtyZXR1cm4ibnVtYmVyIj09dHlwZW9mIHR9LGlzU3RyaW5nOmZ1bmN0aW9uKHQpe3JldHVybiJzdHJpbmciPT10eXBlb2YgdH0saXNTeW1ib2w6ZnVuY3Rpb24odCl7cmV0dXJuInN5bWJvbCI9PT1yKHQpfSxpc1VuZGVmaW5lZDpmdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dH0saXNSZWdFeHA6ZnVuY3Rpb24odCl7cmV0dXJuIltvYmplY3QgUmVnRXhwXSI9PT1LdCh0KX0saXNPYmplY3Q6ZnVuY3Rpb24odCl7cmV0dXJuIm9iamVjdCI9PT1yKHQpJiZudWxsIT09dH0saXNEYXRlOmZ1bmN0aW9uKHQpe3JldHVybiJbb2JqZWN0IERhdGVdIj09PUt0KHQpfSxpc0Vycm9yOmZ1bmN0aW9uKHQpe3JldHVybiJbb2JqZWN0IEVycm9yXSI9PT1LdCh0KXx8dCBpbnN0YW5jZW9mIEVycm9yfSxpc0Z1bmN0aW9uOmZ1bmN0aW9uKHQpe3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiB0fSxpc1ByaW1pdGl2ZTpmdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09PXR8fCJib29sZWFuIj09dHlwZW9mIHR8fCJudW1iZXIiPT10eXBlb2YgdHx8InN0cmluZyI9PXR5cGVvZiB0fHwic3ltYm9sIj09PXIodCl8fHZvaWQgMD09PXR9LGlzQnVmZmVyOmh0LmlzQnVmZmVyfSxYdD1vKChmdW5jdGlvbih0KXsiZnVuY3Rpb24iPT10eXBlb2YgT2JqZWN0LmNyZWF0ZT90LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtlJiYodC5zdXBlcl89ZSx0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSl9OnQuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2lmKGUpe3Quc3VwZXJfPWU7dmFyIHI9ZnVuY3Rpb24oKXt9O3IucHJvdG90eXBlPWUucHJvdG90eXBlLHQucHJvdG90eXBlPW5ldyByLHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPXR9fX0pKSxRdD0iZnVuY3Rpb24iPT10eXBlb2YgT2JqZWN0LmNyZWF0ZT9mdW5jdGlvbih0LGUpe3Quc3VwZXJfPWUsdC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSl9OmZ1bmN0aW9uKHQsZSl7dC5zdXBlcl89ZTt2YXIgcj1mdW5jdGlvbigpe307ci5wcm90b3R5cGU9ZS5wcm90b3R5cGUsdC5wcm90b3R5cGU9bmV3IHIsdC5wcm90b3R5cGUuY29uc3RydWN0b3I9dH0sdGU9LyVbc2RqJV0vZztmdW5jdGlvbiBlZSh0KXtpZighdmUodCkpe2Zvcih2YXIgZT1bXSxyPTA7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyllLnB1c2goYWUoYXJndW1lbnRzW3JdKSk7cmV0dXJuIGUuam9pbigiICIpfXI9MTtmb3IodmFyIG49YXJndW1lbnRzLGk9bi5sZW5ndGgsbz1TdHJpbmcodCkucmVwbGFjZSh0ZSwoZnVuY3Rpb24odCl7aWYoIiUlIj09PXQpcmV0dXJuIiUiO2lmKHI+PWkpcmV0dXJuIHQ7c3dpdGNoKHQpe2Nhc2UiJXMiOnJldHVybiBTdHJpbmcobltyKytdKTtjYXNlIiVkIjpyZXR1cm4gTnVtYmVyKG5bcisrXSk7Y2FzZSIlaiI6dHJ5e3JldHVybiBKU09OLnN0cmluZ2lmeShuW3IrK10pfWNhdGNoKHQpe3JldHVybiJbQ2lyY3VsYXJdIn1kZWZhdWx0OnJldHVybiB0fX0pKSxhPW5bcl07cjxpO2E9blsrK3JdKXBlKGEpfHwhX2UoYSk/bys9IiAiK2E6bys9IiAiK2FlKGEpO3JldHVybiBvfWZ1bmN0aW9uIHJlKHQsZSl7aWYod2Uocy5wcm9jZXNzKSlyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gcmUodCxlKS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O2lmKCEwPT09Qy5ub0RlcHJlY2F0aW9uKXJldHVybiB0O3ZhciByPSExO3JldHVybiBmdW5jdGlvbigpe2lmKCFyKXtpZihDLnRocm93RGVwcmVjYXRpb24pdGhyb3cgbmV3IEVycm9yKGUpO0MudHJhY2VEZXByZWNhdGlvbj9jb25zb2xlLnRyYWNlKGUpOmNvbnNvbGUuZXJyb3IoZSkscj0hMH1yZXR1cm4gdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fXZhciBuZSxpZT17fTtmdW5jdGlvbiBvZSh0KXtpZih3ZShuZSkmJihuZT1DLmVudi5OT0RFX0RFQlVHfHwiIiksdD10LnRvVXBwZXJDYXNlKCksIWllW3RdKWlmKG5ldyBSZWdFeHAoIlxcYiIrdCsiXFxiIiwiaSIpLnRlc3QobmUpKXtpZVt0XT1mdW5jdGlvbigpe3ZhciBlPWVlLmFwcGx5KG51bGwsYXJndW1lbnRzKTtjb25zb2xlLmVycm9yKCIlcyAlZDogJXMiLHQsMCxlKX19ZWxzZSBpZVt0XT1mdW5jdGlvbigpe307cmV0dXJuIGllW3RdfWZ1bmN0aW9uIGFlKHQsZSl7dmFyIHI9e3NlZW46W10sc3R5bGl6ZTp1ZX07cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg+PTMmJihyLmRlcHRoPWFyZ3VtZW50c1syXSksYXJndW1lbnRzLmxlbmd0aD49NCYmKHIuY29sb3JzPWFyZ3VtZW50c1szXSksZGUoZSk/ci5zaG93SGlkZGVuPWU6ZSYmQ2UocixlKSx3ZShyLnNob3dIaWRkZW4pJiYoci5zaG93SGlkZGVuPSExKSx3ZShyLmRlcHRoKSYmKHIuZGVwdGg9Miksd2Uoci5jb2xvcnMpJiYoci5jb2xvcnM9ITEpLHdlKHIuY3VzdG9tSW5zcGVjdCkmJihyLmN1c3RvbUluc3BlY3Q9ITApLHIuY29sb3JzJiYoci5zdHlsaXplPXNlKSxmZShyLHQsci5kZXB0aCl9ZnVuY3Rpb24gc2UodCxlKXt2YXIgcj1hZS5zdHlsZXNbZV07cmV0dXJuIHI/IhtbIithZS5jb2xvcnNbcl1bMF0rIm0iK3QrIhtbIithZS5jb2xvcnNbcl1bMV0rIm0iOnR9ZnVuY3Rpb24gdWUodCxlKXtyZXR1cm4gdH1mdW5jdGlvbiBmZSh0LGUscil7aWYodC5jdXN0b21JbnNwZWN0JiZlJiZrZShlLmluc3BlY3QpJiZlLmluc3BlY3QhPT1hZSYmKCFlLmNvbnN0cnVjdG9yfHxlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSE9PWUpKXt2YXIgbj1lLmluc3BlY3Qocix0KTtyZXR1cm4gdmUobil8fChuPWZlKHQsbixyKSksbn12YXIgaT1mdW5jdGlvbih0LGUpe2lmKHdlKGUpKXJldHVybiB0LnN0eWxpemUoInVuZGVmaW5lZCIsInVuZGVmaW5lZCIpO2lmKHZlKGUpKXt2YXIgcj0iJyIrSlNPTi5zdHJpbmdpZnkoZSkucmVwbGFjZSgvXiJ8IiQvZywiIikucmVwbGFjZSgvJy9nLCJcXCciKS5yZXBsYWNlKC9cXCIvZywnIicpKyInIjtyZXR1cm4gdC5zdHlsaXplKHIsInN0cmluZyIpfWlmKHllKGUpKXJldHVybiB0LnN0eWxpemUoIiIrZSwibnVtYmVyIik7aWYoZGUoZSkpcmV0dXJuIHQuc3R5bGl6ZSgiIitlLCJib29sZWFuIik7aWYocGUoZSkpcmV0dXJuIHQuc3R5bGl6ZSgibnVsbCIsIm51bGwiKX0odCxlKTtpZihpKXJldHVybiBpO3ZhciBvPU9iamVjdC5rZXlzKGUpLGE9ZnVuY3Rpb24odCl7dmFyIGU9e307cmV0dXJuIHQuZm9yRWFjaCgoZnVuY3Rpb24odCxyKXtlW3RdPSEwfSkpLGV9KG8pO2lmKHQuc2hvd0hpZGRlbiYmKG89T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZSkpLEVlKGUpJiYoby5pbmRleE9mKCJtZXNzYWdlIik+PTB8fG8uaW5kZXhPZigiZGVzY3JpcHRpb24iKT49MCkpcmV0dXJuIGhlKGUpO2lmKDA9PT1vLmxlbmd0aCl7aWYoa2UoZSkpe3ZhciBzPWUubmFtZT8iOiAiK2UubmFtZToiIjtyZXR1cm4gdC5zdHlsaXplKCJbRnVuY3Rpb24iK3MrIl0iLCJzcGVjaWFsIil9aWYobWUoZSkpcmV0dXJuIHQuc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSksInJlZ2V4cCIpO2lmKFNlKGUpKXJldHVybiB0LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSwiZGF0ZSIpO2lmKEVlKGUpKXJldHVybiBoZShlKX12YXIgdSxmPSIiLGg9ITEsYz1bInsiLCJ9Il07KGxlKGUpJiYoaD0hMCxjPVsiWyIsIl0iXSksa2UoZSkpJiYoZj0iIFtGdW5jdGlvbiIrKGUubmFtZT8iOiAiK2UubmFtZToiIikrIl0iKTtyZXR1cm4gbWUoZSkmJihmPSIgIitSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkpLFNlKGUpJiYoZj0iICIrRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbChlKSksRWUoZSkmJihmPSIgIitoZShlKSksMCE9PW8ubGVuZ3RofHxoJiYwIT1lLmxlbmd0aD9yPDA/bWUoZSk/dC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSwicmVnZXhwIik6dC5zdHlsaXplKCJbT2JqZWN0XSIsInNwZWNpYWwiKToodC5zZWVuLnB1c2goZSksdT1oP2Z1bmN0aW9uKHQsZSxyLG4saSl7Zm9yKHZhciBvPVtdLGE9MCxzPWUubGVuZ3RoO2E8czsrK2EpTWUoZSxTdHJpbmcoYSkpP28ucHVzaChjZSh0LGUscixuLFN0cmluZyhhKSwhMCkpOm8ucHVzaCgiIik7cmV0dXJuIGkuZm9yRWFjaCgoZnVuY3Rpb24oaSl7aS5tYXRjaCgvXlxkKyQvKXx8by5wdXNoKGNlKHQsZSxyLG4saSwhMCkpfSkpLG99KHQsZSxyLGEsbyk6by5tYXAoKGZ1bmN0aW9uKG4pe3JldHVybiBjZSh0LGUscixhLG4saCl9KSksdC5zZWVuLnBvcCgpLGZ1bmN0aW9uKHQsZSxyKXtpZih0LnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5pbmRleE9mKCJcbiIpLHQrZS5yZXBsYWNlKC9cdTAwMWJcW1xkXGQ/bS9nLCIiKS5sZW5ndGgrMX0pLDApPjYwKXJldHVybiByWzBdKygiIj09PWU/IiI6ZSsiXG4gIikrIiAiK3Quam9pbigiLFxuICAiKSsiICIrclsxXTtyZXR1cm4gclswXStlKyIgIit0LmpvaW4oIiwgIikrIiAiK3JbMV19KHUsZixjKSk6Y1swXStmK2NbMV19ZnVuY3Rpb24gaGUodCl7cmV0dXJuIlsiK0Vycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKyJdIn1mdW5jdGlvbiBjZSh0LGUscixuLGksbyl7dmFyIGEscyx1O2lmKCh1PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxpKXx8e3ZhbHVlOmVbaV19KS5nZXQ/cz11LnNldD90LnN0eWxpemUoIltHZXR0ZXIvU2V0dGVyXSIsInNwZWNpYWwiKTp0LnN0eWxpemUoIltHZXR0ZXJdIiwic3BlY2lhbCIpOnUuc2V0JiYocz10LnN0eWxpemUoIltTZXR0ZXJdIiwic3BlY2lhbCIpKSxNZShuLGkpfHwoYT0iWyIraSsiXSIpLHN8fCh0LnNlZW4uaW5kZXhPZih1LnZhbHVlKTwwPyhzPXBlKHIpP2ZlKHQsdS52YWx1ZSxudWxsKTpmZSh0LHUudmFsdWUsci0xKSkuaW5kZXhPZigiXG4iKT4tMSYmKHM9bz9zLnNwbGl0KCJcbiIpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIiAgIit0fSkpLmpvaW4oIlxuIikuc3Vic3RyKDIpOiJcbiIrcy5zcGxpdCgiXG4iKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiIgICAiK3R9KSkuam9pbigiXG4iKSk6cz10LnN0eWxpemUoIltDaXJjdWxhcl0iLCJzcGVjaWFsIikpLHdlKGEpKXtpZihvJiZpLm1hdGNoKC9eXGQrJC8pKXJldHVybiBzOyhhPUpTT04uc3RyaW5naWZ5KCIiK2kpKS5tYXRjaCgvXiIoW2EtekEtWl9dW2EtekEtWl8wLTldKikiJC8pPyhhPWEuc3Vic3RyKDEsYS5sZW5ndGgtMiksYT10LnN0eWxpemUoYSwibmFtZSIpKTooYT1hLnJlcGxhY2UoLycvZywiXFwnIikucmVwbGFjZSgvXFwiL2csJyInKS5yZXBsYWNlKC8oXiJ8IiQpL2csIiciKSxhPXQuc3R5bGl6ZShhLCJzdHJpbmciKSl9cmV0dXJuIGErIjogIitzfWZ1bmN0aW9uIGxlKHQpe3JldHVybiBBcnJheS5pc0FycmF5KHQpfWZ1bmN0aW9uIGRlKHQpe3JldHVybiJib29sZWFuIj09dHlwZW9mIHR9ZnVuY3Rpb24gcGUodCl7cmV0dXJuIG51bGw9PT10fWZ1bmN0aW9uIGdlKHQpe3JldHVybiBudWxsPT10fWZ1bmN0aW9uIHllKHQpe3JldHVybiJudW1iZXIiPT10eXBlb2YgdH1mdW5jdGlvbiB2ZSh0KXtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIHR9ZnVuY3Rpb24gYmUodCl7cmV0dXJuInN5bWJvbCI9PT1yKHQpfWZ1bmN0aW9uIHdlKHQpe3JldHVybiB2b2lkIDA9PT10fWZ1bmN0aW9uIG1lKHQpe3JldHVybiBfZSh0KSYmIltvYmplY3QgUmVnRXhwXSI9PT14ZSh0KX1mdW5jdGlvbiBfZSh0KXtyZXR1cm4ib2JqZWN0Ij09PXIodCkmJm51bGwhPT10fWZ1bmN0aW9uIFNlKHQpe3JldHVybiBfZSh0KSYmIltvYmplY3QgRGF0ZV0iPT09eGUodCl9ZnVuY3Rpb24gRWUodCl7cmV0dXJuIF9lKHQpJiYoIltvYmplY3QgRXJyb3JdIj09PXhlKHQpfHx0IGluc3RhbmNlb2YgRXJyb3IpfWZ1bmN0aW9uIGtlKHQpe3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiB0fWZ1bmN0aW9uIFJlKHQpe3JldHVybiBudWxsPT09dHx8ImJvb2xlYW4iPT10eXBlb2YgdHx8Im51bWJlciI9PXR5cGVvZiB0fHwic3RyaW5nIj09dHlwZW9mIHR8fCJzeW1ib2wiPT09cih0KXx8dm9pZCAwPT09dH1mdW5jdGlvbiBqZSh0KXtyZXR1cm4gaHQuaXNCdWZmZXIodCl9ZnVuY3Rpb24geGUodCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KX1mdW5jdGlvbiBUZSh0KXtyZXR1cm4gdDwxMD8iMCIrdC50b1N0cmluZygxMCk6dC50b1N0cmluZygxMCl9YWUuY29sb3JzPXtib2xkOlsxLDIyXSxpdGFsaWM6WzMsMjNdLHVuZGVybGluZTpbNCwyNF0saW52ZXJzZTpbNywyN10sd2hpdGU6WzM3LDM5XSxncmV5Ols5MCwzOV0sYmxhY2s6WzMwLDM5XSxibHVlOlszNCwzOV0sY3lhbjpbMzYsMzldLGdyZWVuOlszMiwzOV0sbWFnZW50YTpbMzUsMzldLHJlZDpbMzEsMzldLHllbGxvdzpbMzMsMzldfSxhZS5zdHlsZXM9e3NwZWNpYWw6ImN5YW4iLG51bWJlcjoieWVsbG93Iixib29sZWFuOiJ5ZWxsb3ciLHVuZGVmaW5lZDoiZ3JleSIsbnVsbDoiYm9sZCIsc3RyaW5nOiJncmVlbiIsZGF0ZToibWFnZW50YSIscmVnZXhwOiJyZWQifTt2YXIgT2U9WyJKYW4iLCJGZWIiLCJNYXIiLCJBcHIiLCJNYXkiLCJKdW4iLCJKdWwiLCJBdWciLCJTZXAiLCJPY3QiLCJOb3YiLCJEZWMiXTtmdW5jdGlvbiBBZSgpe3ZhciB0PW5ldyBEYXRlLGU9W1RlKHQuZ2V0SG91cnMoKSksVGUodC5nZXRNaW51dGVzKCkpLFRlKHQuZ2V0U2Vjb25kcygpKV0uam9pbigiOiIpO3JldHVyblt0LmdldERhdGUoKSxPZVt0LmdldE1vbnRoKCldLGVdLmpvaW4oIiAiKX1mdW5jdGlvbiBMZSgpe2NvbnNvbGUubG9nKCIlcyAtICVzIixBZSgpLGVlLmFwcGx5KG51bGwsYXJndW1lbnRzKSl9ZnVuY3Rpb24gQ2UodCxlKXtpZighZXx8IV9lKGUpKXJldHVybiB0O2Zvcih2YXIgcj1PYmplY3Qua2V5cyhlKSxuPXIubGVuZ3RoO24tLTspdFtyW25dXT1lW3Jbbl1dO3JldHVybiB0fWZ1bmN0aW9uIE1lKHQsZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpfXZhciBQZT17aW5oZXJpdHM6UXQsX2V4dGVuZDpDZSxsb2c6TGUsaXNCdWZmZXI6amUsaXNQcmltaXRpdmU6UmUsaXNGdW5jdGlvbjprZSxpc0Vycm9yOkVlLGlzRGF0ZTpTZSxpc09iamVjdDpfZSxpc1JlZ0V4cDptZSxpc1VuZGVmaW5lZDp3ZSxpc1N5bWJvbDpiZSxpc1N0cmluZzp2ZSxpc051bWJlcjp5ZSxpc051bGxPclVuZGVmaW5lZDpnZSxpc051bGw6cGUsaXNCb29sZWFuOmRlLGlzQXJyYXk6bGUsaW5zcGVjdDphZSxkZXByZWNhdGU6cmUsZm9ybWF0OmVlLGRlYnVnbG9nOm9lfSxCZT1pKE9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGZvcm1hdDplZSxkZXByZWNhdGU6cmUsZGVidWdsb2c6b2UsaW5zcGVjdDphZSxpc0FycmF5OmxlLGlzQm9vbGVhbjpkZSxpc051bGw6cGUsaXNOdWxsT3JVbmRlZmluZWQ6Z2UsaXNOdW1iZXI6eWUsaXNTdHJpbmc6dmUsaXNTeW1ib2w6YmUsaXNVbmRlZmluZWQ6d2UsaXNSZWdFeHA6bWUsaXNPYmplY3Q6X2UsaXNEYXRlOlNlLGlzRXJyb3I6RWUsaXNGdW5jdGlvbjprZSxpc1ByaW1pdGl2ZTpSZSxpc0J1ZmZlcjpqZSxsb2c6TGUsaW5oZXJpdHM6UXQsX2V4dGVuZDpDZSxkZWZhdWx0OlBlfSkpLE5lPW8oKGZ1bmN0aW9uKHQpe3ZhciBlPVZ0LkJ1ZmZlcjt0LmV4cG9ydHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7IWZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9KHRoaXMsdCksdGhpcy5oZWFkPW51bGwsdGhpcy50YWlsPW51bGwsdGhpcy5sZW5ndGg9MH1yZXR1cm4gdC5wcm90b3R5cGUucHVzaD1mdW5jdGlvbih0KXt2YXIgZT17ZGF0YTp0LG5leHQ6bnVsbH07dGhpcy5sZW5ndGg+MD90aGlzLnRhaWwubmV4dD1lOnRoaXMuaGVhZD1lLHRoaXMudGFpbD1lLCsrdGhpcy5sZW5ndGh9LHQucHJvdG90eXBlLnVuc2hpZnQ9ZnVuY3Rpb24odCl7dmFyIGU9e2RhdGE6dCxuZXh0OnRoaXMuaGVhZH07MD09PXRoaXMubGVuZ3RoJiYodGhpcy50YWlsPWUpLHRoaXMuaGVhZD1lLCsrdGhpcy5sZW5ndGh9LHQucHJvdG90eXBlLnNoaWZ0PWZ1bmN0aW9uKCl7aWYoMCE9PXRoaXMubGVuZ3RoKXt2YXIgdD10aGlzLmhlYWQuZGF0YTtyZXR1cm4gMT09PXRoaXMubGVuZ3RoP3RoaXMuaGVhZD10aGlzLnRhaWw9bnVsbDp0aGlzLmhlYWQ9dGhpcy5oZWFkLm5leHQsLS10aGlzLmxlbmd0aCx0fX0sdC5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLmhlYWQ9dGhpcy50YWlsPW51bGwsdGhpcy5sZW5ndGg9MH0sdC5wcm90b3R5cGUuam9pbj1mdW5jdGlvbih0KXtpZigwPT09dGhpcy5sZW5ndGgpcmV0dXJuIiI7Zm9yKHZhciBlPXRoaXMuaGVhZCxyPSIiK2UuZGF0YTtlPWUubmV4dDspcis9dCtlLmRhdGE7cmV0dXJuIHJ9LHQucHJvdG90eXBlLmNvbmNhdD1mdW5jdGlvbih0KXtpZigwPT09dGhpcy5sZW5ndGgpcmV0dXJuIGUuYWxsb2MoMCk7aWYoMT09PXRoaXMubGVuZ3RoKXJldHVybiB0aGlzLmhlYWQuZGF0YTtmb3IodmFyIHIsbixpLG89ZS5hbGxvY1Vuc2FmZSh0Pj4+MCksYT10aGlzLmhlYWQscz0wO2E7KXI9YS5kYXRhLG49byxpPXMsci5jb3B5KG4saSkscys9YS5kYXRhLmxlbmd0aCxhPWEubmV4dDtyZXR1cm4gb30sdH0oKSxCZSYmQmUuaW5zcGVjdCYmQmUuaW5zcGVjdC5jdXN0b20mJih0LmV4cG9ydHMucHJvdG90eXBlW0JlLmluc3BlY3QuY3VzdG9tXT1mdW5jdGlvbigpe3ZhciB0PUJlLmluc3BlY3Qoe2xlbmd0aDp0aGlzLmxlbmd0aH0pO3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWUrIiAiK3R9KX0pKTtmdW5jdGlvbiBVZSh0LGUpe3QuZW1pdCgiZXJyb3IiLGUpfXZhciBEZT1mdW5jdGlvbih0LGUpe3ZhciByPXRoaXMsbj10aGlzLl9yZWFkYWJsZVN0YXRlJiZ0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCxpPXRoaXMuX3dyaXRhYmxlU3RhdGUmJnRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO3JldHVybiBufHxpPyhlP2UodCk6IXR8fHRoaXMuX3dyaXRhYmxlU3RhdGUmJnRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkfHxNLm5leHRUaWNrKFVlLHRoaXMsdCksdGhpcyk6KHRoaXMuX3JlYWRhYmxlU3RhdGUmJih0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZD0hMCksdGhpcy5fd3JpdGFibGVTdGF0ZSYmKHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkPSEwKSx0aGlzLl9kZXN0cm95KHR8fG51bGwsKGZ1bmN0aW9uKHQpeyFlJiZ0PyhNLm5leHRUaWNrKFVlLHIsdCksci5fd3JpdGFibGVTdGF0ZSYmKHIuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkPSEwKSk6ZSYmZSh0KX0pKSx0aGlzKX0sSWU9ZnVuY3Rpb24oKXt0aGlzLl9yZWFkYWJsZVN0YXRlJiYodGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ9ITEsdGhpcy5fcmVhZGFibGVTdGF0ZS5yZWFkaW5nPSExLHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQ9ITEsdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkPSExKSx0aGlzLl93cml0YWJsZVN0YXRlJiYodGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ9ITEsdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZD0hMSx0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZz0hMSx0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkPSExLHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkPSExKX0sRmU9ZnVuY3Rpb24odCxlKXtpZihxZSgibm9EZXByZWNhdGlvbiIpKXJldHVybiB0O3ZhciByPSExO3JldHVybiBmdW5jdGlvbigpe2lmKCFyKXtpZihxZSgidGhyb3dEZXByZWNhdGlvbiIpKXRocm93IG5ldyBFcnJvcihlKTtxZSgidHJhY2VEZXByZWNhdGlvbiIpP2NvbnNvbGUudHJhY2UoZSk6Y29uc29sZS53YXJuKGUpLHI9ITB9cmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX07ZnVuY3Rpb24gcWUodCl7dHJ5e2lmKCFuLmxvY2FsU3RvcmFnZSlyZXR1cm4hMX1jYXRjaCh0KXtyZXR1cm4hMX12YXIgZT1uLmxvY2FsU3RvcmFnZVt0XTtyZXR1cm4gbnVsbCE9ZSYmInRydWUiPT09U3RyaW5nKGUpLnRvTG93ZXJDYXNlKCl9dmFyIFdlPVFlO2Z1bmN0aW9uIHplKHQpe3ZhciBlPXRoaXM7dGhpcy5uZXh0PW51bGwsdGhpcy5lbnRyeT1udWxsLHRoaXMuZmluaXNoPWZ1bmN0aW9uKCl7IWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj10LmVudHJ5O3QuZW50cnk9bnVsbDtmb3IoO247KXt2YXIgaT1uLmNhbGxiYWNrO2UucGVuZGluZ2NiLS0saShyKSxuPW4ubmV4dH1lLmNvcmtlZFJlcXVlc3RzRnJlZT9lLmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0PXQ6ZS5jb3JrZWRSZXF1ZXN0c0ZyZWU9dH0oZSx0KX19dmFyIFllLCRlPSFDLmJyb3dzZXImJlsidjAuMTAiLCJ2MC45LiJdLmluZGV4T2YoQy52ZXJzaW9uLnNsaWNlKDAsNSkpPi0xP3NldEltbWVkaWF0ZTpNLm5leHRUaWNrO1FlLldyaXRhYmxlU3RhdGU9WGU7dmFyIEdlPU9iamVjdC5jcmVhdGUoWnQpO0dlLmluaGVyaXRzPVh0O3ZhciBIZSxKZT17ZGVwcmVjYXRlOkZlfSxWZT1WdC5CdWZmZXIsS2U9bi5VaW50OEFycmF5fHxmdW5jdGlvbigpe307ZnVuY3Rpb24gWmUoKXt9ZnVuY3Rpb24gWGUodCxlKXt0PXR8fHt9O3ZhciByPWUgaW5zdGFuY2VvZihZZT1ZZXx8c3IpO3RoaXMub2JqZWN0TW9kZT0hIXQub2JqZWN0TW9kZSxyJiYodGhpcy5vYmplY3RNb2RlPXRoaXMub2JqZWN0TW9kZXx8ISF0LndyaXRhYmxlT2JqZWN0TW9kZSk7dmFyIG49dC5oaWdoV2F0ZXJNYXJrLGk9dC53cml0YWJsZUhpZ2hXYXRlck1hcmssbz10aGlzLm9iamVjdE1vZGU/MTY6MTYzODQ7dGhpcy5oaWdoV2F0ZXJNYXJrPW58fDA9PT1uP246ciYmKGl8fDA9PT1pKT9pOm8sdGhpcy5oaWdoV2F0ZXJNYXJrPU1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKSx0aGlzLmZpbmFsQ2FsbGVkPSExLHRoaXMubmVlZERyYWluPSExLHRoaXMuZW5kaW5nPSExLHRoaXMuZW5kZWQ9ITEsdGhpcy5maW5pc2hlZD0hMSx0aGlzLmRlc3Ryb3llZD0hMTt2YXIgYT0hMT09PXQuZGVjb2RlU3RyaW5nczt0aGlzLmRlY29kZVN0cmluZ3M9IWEsdGhpcy5kZWZhdWx0RW5jb2Rpbmc9dC5kZWZhdWx0RW5jb2Rpbmd8fCJ1dGY4Iix0aGlzLmxlbmd0aD0wLHRoaXMud3JpdGluZz0hMSx0aGlzLmNvcmtlZD0wLHRoaXMuc3luYz0hMCx0aGlzLmJ1ZmZlclByb2Nlc3Npbmc9ITEsdGhpcy5vbndyaXRlPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe3ZhciByPXQuX3dyaXRhYmxlU3RhdGUsbj1yLnN5bmMsaT1yLndyaXRlY2I7aWYoZnVuY3Rpb24odCl7dC53cml0aW5nPSExLHQud3JpdGVjYj1udWxsLHQubGVuZ3RoLT10LndyaXRlbGVuLHQud3JpdGVsZW49MH0ociksZSkhZnVuY3Rpb24odCxlLHIsbixpKXstLWUucGVuZGluZ2NiLHI/KE0ubmV4dFRpY2soaSxuKSxNLm5leHRUaWNrKG9yLHQsZSksdC5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQ9ITAsdC5lbWl0KCJlcnJvciIsbikpOihpKG4pLHQuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkPSEwLHQuZW1pdCgiZXJyb3IiLG4pLG9yKHQsZSkpfSh0LHIsbixlLGkpO2Vsc2V7dmFyIG89bnIocik7b3x8ci5jb3JrZWR8fHIuYnVmZmVyUHJvY2Vzc2luZ3x8IXIuYnVmZmVyZWRSZXF1ZXN0fHxycih0LHIpLG4/JGUoZXIsdCxyLG8saSk6ZXIodCxyLG8saSl9fShlLHQpfSx0aGlzLndyaXRlY2I9bnVsbCx0aGlzLndyaXRlbGVuPTAsdGhpcy5idWZmZXJlZFJlcXVlc3Q9bnVsbCx0aGlzLmxhc3RCdWZmZXJlZFJlcXVlc3Q9bnVsbCx0aGlzLnBlbmRpbmdjYj0wLHRoaXMucHJlZmluaXNoZWQ9ITEsdGhpcy5lcnJvckVtaXR0ZWQ9ITEsdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudD0wLHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlPW5ldyB6ZSh0aGlzKX1mdW5jdGlvbiBRZSh0KXtpZihZZT1ZZXx8c3IsIShIZS5jYWxsKFFlLHRoaXMpfHx0aGlzIGluc3RhbmNlb2YgWWUpKXJldHVybiBuZXcgUWUodCk7dGhpcy5fd3JpdGFibGVTdGF0ZT1uZXcgWGUodCx0aGlzKSx0aGlzLndyaXRhYmxlPSEwLHQmJigiZnVuY3Rpb24iPT10eXBlb2YgdC53cml0ZSYmKHRoaXMuX3dyaXRlPXQud3JpdGUpLCJmdW5jdGlvbiI9PXR5cGVvZiB0LndyaXRldiYmKHRoaXMuX3dyaXRldj10LndyaXRldiksImZ1bmN0aW9uIj09dHlwZW9mIHQuZGVzdHJveSYmKHRoaXMuX2Rlc3Ryb3k9dC5kZXN0cm95KSwiZnVuY3Rpb24iPT10eXBlb2YgdC5maW5hbCYmKHRoaXMuX2ZpbmFsPXQuZmluYWwpKSxWLmNhbGwodGhpcyl9ZnVuY3Rpb24gdHIodCxlLHIsbixpLG8sYSl7ZS53cml0ZWxlbj1uLGUud3JpdGVjYj1hLGUud3JpdGluZz0hMCxlLnN5bmM9ITAscj90Ll93cml0ZXYoaSxlLm9ud3JpdGUpOnQuX3dyaXRlKGksbyxlLm9ud3JpdGUpLGUuc3luYz0hMX1mdW5jdGlvbiBlcih0LGUscixuKXtyfHxmdW5jdGlvbih0LGUpezA9PT1lLmxlbmd0aCYmZS5uZWVkRHJhaW4mJihlLm5lZWREcmFpbj0hMSx0LmVtaXQoImRyYWluIikpfSh0LGUpLGUucGVuZGluZ2NiLS0sbigpLG9yKHQsZSl9ZnVuY3Rpb24gcnIodCxlKXtlLmJ1ZmZlclByb2Nlc3Npbmc9ITA7dmFyIHI9ZS5idWZmZXJlZFJlcXVlc3Q7aWYodC5fd3JpdGV2JiZyJiZyLm5leHQpe3ZhciBuPWUuYnVmZmVyZWRSZXF1ZXN0Q291bnQsaT1uZXcgQXJyYXkobiksbz1lLmNvcmtlZFJlcXVlc3RzRnJlZTtvLmVudHJ5PXI7Zm9yKHZhciBhPTAscz0hMDtyOylpW2FdPXIsci5pc0J1Znx8KHM9ITEpLHI9ci5uZXh0LGErPTE7aS5hbGxCdWZmZXJzPXMsdHIodCxlLCEwLGUubGVuZ3RoLGksIiIsby5maW5pc2gpLGUucGVuZGluZ2NiKyssZS5sYXN0QnVmZmVyZWRSZXF1ZXN0PW51bGwsby5uZXh0PyhlLmNvcmtlZFJlcXVlc3RzRnJlZT1vLm5leHQsby5uZXh0PW51bGwpOmUuY29ya2VkUmVxdWVzdHNGcmVlPW5ldyB6ZShlKSxlLmJ1ZmZlcmVkUmVxdWVzdENvdW50PTB9ZWxzZXtmb3IoO3I7KXt2YXIgdT1yLmNodW5rLGY9ci5lbmNvZGluZyxoPXIuY2FsbGJhY2s7aWYodHIodCxlLCExLGUub2JqZWN0TW9kZT8xOnUubGVuZ3RoLHUsZixoKSxyPXIubmV4dCxlLmJ1ZmZlcmVkUmVxdWVzdENvdW50LS0sZS53cml0aW5nKWJyZWFrfW51bGw9PT1yJiYoZS5sYXN0QnVmZmVyZWRSZXF1ZXN0PW51bGwpfWUuYnVmZmVyZWRSZXF1ZXN0PXIsZS5idWZmZXJQcm9jZXNzaW5nPSExfWZ1bmN0aW9uIG5yKHQpe3JldHVybiB0LmVuZGluZyYmMD09PXQubGVuZ3RoJiZudWxsPT09dC5idWZmZXJlZFJlcXVlc3QmJiF0LmZpbmlzaGVkJiYhdC53cml0aW5nfWZ1bmN0aW9uIGlyKHQsZSl7dC5fZmluYWwoKGZ1bmN0aW9uKHIpe2UucGVuZGluZ2NiLS0sciYmdC5lbWl0KCJlcnJvciIsciksZS5wcmVmaW5pc2hlZD0hMCx0LmVtaXQoInByZWZpbmlzaCIpLG9yKHQsZSl9KSl9ZnVuY3Rpb24gb3IodCxlKXt2YXIgcj1ucihlKTtyZXR1cm4gciYmKCFmdW5jdGlvbih0LGUpe2UucHJlZmluaXNoZWR8fGUuZmluYWxDYWxsZWR8fCgiZnVuY3Rpb24iPT10eXBlb2YgdC5fZmluYWw/KGUucGVuZGluZ2NiKyssZS5maW5hbENhbGxlZD0hMCxNLm5leHRUaWNrKGlyLHQsZSkpOihlLnByZWZpbmlzaGVkPSEwLHQuZW1pdCgicHJlZmluaXNoIikpKX0odCxlKSwwPT09ZS5wZW5kaW5nY2ImJihlLmZpbmlzaGVkPSEwLHQuZW1pdCgiZmluaXNoIikpKSxyfUdlLmluaGVyaXRzKFFlLFYpLFhlLnByb3RvdHlwZS5nZXRCdWZmZXI9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5idWZmZXJlZFJlcXVlc3QsZT1bXTt0OyllLnB1c2godCksdD10Lm5leHQ7cmV0dXJuIGV9LGZ1bmN0aW9uKCl7dHJ5e09iamVjdC5kZWZpbmVQcm9wZXJ0eShYZS5wcm90b3R5cGUsImJ1ZmZlciIse2dldDpKZS5kZXByZWNhdGUoKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCl9KSwiX3dyaXRhYmxlU3RhdGUuYnVmZmVyIGlzIGRlcHJlY2F0ZWQuIFVzZSBfd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIgaW5zdGVhZC4iLCJERVAwMDAzIil9KX1jYXRjaCh0KXt9fSgpLCJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5oYXNJbnN0YW5jZSYmImZ1bmN0aW9uIj09dHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdPyhIZT1GdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXSxPYmplY3QuZGVmaW5lUHJvcGVydHkoUWUsU3ltYm9sLmhhc0luc3RhbmNlLHt2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4hIUhlLmNhbGwodGhpcyx0KXx8dGhpcz09PVFlJiYodCYmdC5fd3JpdGFibGVTdGF0ZSBpbnN0YW5jZW9mIFhlKX19KSk6SGU9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiB0aGlzfSxRZS5wcm90b3R5cGUucGlwZT1mdW5jdGlvbigpe3RoaXMuZW1pdCgiZXJyb3IiLG5ldyBFcnJvcigiQ2Fubm90IHBpcGUsIG5vdCByZWFkYWJsZSIpKX0sUWUucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj10aGlzLl93cml0YWJsZVN0YXRlLGk9ITEsbz0hbi5vYmplY3RNb2RlJiZmdW5jdGlvbih0KXtyZXR1cm4gVmUuaXNCdWZmZXIodCl8fHQgaW5zdGFuY2VvZiBLZX0odCk7cmV0dXJuIG8mJiFWZS5pc0J1ZmZlcih0KSYmKHQ9ZnVuY3Rpb24odCl7cmV0dXJuIFZlLmZyb20odCl9KHQpKSwiZnVuY3Rpb24iPT10eXBlb2YgZSYmKHI9ZSxlPW51bGwpLG8/ZT0iYnVmZmVyIjplfHwoZT1uLmRlZmF1bHRFbmNvZGluZyksImZ1bmN0aW9uIiE9dHlwZW9mIHImJihyPVplKSxuLmVuZGVkP2Z1bmN0aW9uKHQsZSl7dmFyIHI9bmV3IEVycm9yKCJ3cml0ZSBhZnRlciBlbmQiKTt0LmVtaXQoImVycm9yIixyKSxNLm5leHRUaWNrKGUscil9KHRoaXMscik6KG98fGZ1bmN0aW9uKHQsZSxyLG4pe3ZhciBpPSEwLG89ITE7cmV0dXJuIG51bGw9PT1yP289bmV3IFR5cGVFcnJvcigiTWF5IG5vdCB3cml0ZSBudWxsIHZhbHVlcyB0byBzdHJlYW0iKToic3RyaW5nIj09dHlwZW9mIHJ8fHZvaWQgMD09PXJ8fGUub2JqZWN0TW9kZXx8KG89bmV3IFR5cGVFcnJvcigiSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuayIpKSxvJiYodC5lbWl0KCJlcnJvciIsbyksTS5uZXh0VGljayhuLG8pLGk9ITEpLGl9KHRoaXMsbix0LHIpKSYmKG4ucGVuZGluZ2NiKyssaT1mdW5jdGlvbih0LGUscixuLGksbyl7aWYoIXIpe3ZhciBhPWZ1bmN0aW9uKHQsZSxyKXt0Lm9iamVjdE1vZGV8fCExPT09dC5kZWNvZGVTdHJpbmdzfHwic3RyaW5nIiE9dHlwZW9mIGV8fChlPVZlLmZyb20oZSxyKSk7cmV0dXJuIGV9KGUsbixpKTtuIT09YSYmKHI9ITAsaT0iYnVmZmVyIixuPWEpfXZhciBzPWUub2JqZWN0TW9kZT8xOm4ubGVuZ3RoO2UubGVuZ3RoKz1zO3ZhciB1PWUubGVuZ3RoPGUuaGlnaFdhdGVyTWFyazt1fHwoZS5uZWVkRHJhaW49ITApO2lmKGUud3JpdGluZ3x8ZS5jb3JrZWQpe3ZhciBmPWUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtlLmxhc3RCdWZmZXJlZFJlcXVlc3Q9e2NodW5rOm4sZW5jb2Rpbmc6aSxpc0J1ZjpyLGNhbGxiYWNrOm8sbmV4dDpudWxsfSxmP2YubmV4dD1lLmxhc3RCdWZmZXJlZFJlcXVlc3Q6ZS5idWZmZXJlZFJlcXVlc3Q9ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0LGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQrPTF9ZWxzZSB0cih0LGUsITEscyxuLGksbyk7cmV0dXJuIHV9KHRoaXMsbixvLHQsZSxyKSksaX0sUWUucHJvdG90eXBlLmNvcms9ZnVuY3Rpb24oKXt0aGlzLl93cml0YWJsZVN0YXRlLmNvcmtlZCsrfSxRZS5wcm90b3R5cGUudW5jb3JrPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fd3JpdGFibGVTdGF0ZTt0LmNvcmtlZCYmKHQuY29ya2VkLS0sdC53cml0aW5nfHx0LmNvcmtlZHx8dC5maW5pc2hlZHx8dC5idWZmZXJQcm9jZXNzaW5nfHwhdC5idWZmZXJlZFJlcXVlc3R8fHJyKHRoaXMsdCkpfSxRZS5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nPWZ1bmN0aW9uKHQpe2lmKCJzdHJpbmciPT10eXBlb2YgdCYmKHQ9dC50b0xvd2VyQ2FzZSgpKSwhKFsiaGV4IiwidXRmOCIsInV0Zi04IiwiYXNjaWkiLCJiaW5hcnkiLCJiYXNlNjQiLCJ1Y3MyIiwidWNzLTIiLCJ1dGYxNmxlIiwidXRmLTE2bGUiLCJyYXciXS5pbmRleE9mKCh0KyIiKS50b0xvd2VyQ2FzZSgpKT4tMSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiVW5rbm93biBlbmNvZGluZzogIit0KTtyZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2Rpbmc9dCx0aGlzfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoUWUucHJvdG90eXBlLCJ3cml0YWJsZUhpZ2hXYXRlck1hcmsiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcmt9fSksUWUucHJvdG90eXBlLl93cml0ZT1mdW5jdGlvbih0LGUscil7cihuZXcgRXJyb3IoIl93cml0ZSgpIGlzIG5vdCBpbXBsZW1lbnRlZCIpKX0sUWUucHJvdG90eXBlLl93cml0ZXY9bnVsbCxRZS5wcm90b3R5cGUuZW5kPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj10aGlzLl93cml0YWJsZVN0YXRlOyJmdW5jdGlvbiI9PXR5cGVvZiB0PyhyPXQsdD1udWxsLGU9bnVsbCk6ImZ1bmN0aW9uIj09dHlwZW9mIGUmJihyPWUsZT1udWxsKSxudWxsIT10JiZ0aGlzLndyaXRlKHQsZSksbi5jb3JrZWQmJihuLmNvcmtlZD0xLHRoaXMudW5jb3JrKCkpLG4uZW5kaW5nfHxuLmZpbmlzaGVkfHxmdW5jdGlvbih0LGUscil7ZS5lbmRpbmc9ITAsb3IodCxlKSxyJiYoZS5maW5pc2hlZD9NLm5leHRUaWNrKHIpOnQub25jZSgiZmluaXNoIixyKSk7ZS5lbmRlZD0hMCx0LndyaXRhYmxlPSExfSh0aGlzLG4scil9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShRZS5wcm90b3R5cGUsImRlc3Ryb3llZCIse2dldDpmdW5jdGlvbigpe3JldHVybiB2b2lkIDAhPT10aGlzLl93cml0YWJsZVN0YXRlJiZ0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZH0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuX3dyaXRhYmxlU3RhdGUmJih0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZD10KX19KSxRZS5wcm90b3R5cGUuZGVzdHJveT1EZSxRZS5wcm90b3R5cGUuX3VuZGVzdHJveT1JZSxRZS5wcm90b3R5cGUuX2Rlc3Ryb3k9ZnVuY3Rpb24odCxlKXt0aGlzLmVuZCgpLGUodCl9O3ZhciBhcj1PYmplY3Qua2V5c3x8ZnVuY3Rpb24odCl7dmFyIGU9W107Zm9yKHZhciByIGluIHQpZS5wdXNoKHIpO3JldHVybiBlfSxzcj1scix1cj1PYmplY3QuY3JlYXRlKFp0KTt1ci5pbmhlcml0cz1YdCx1ci5pbmhlcml0cyhscixPcik7Zm9yKHZhciBmcj1hcihXZS5wcm90b3R5cGUpLGhyPTA7aHI8ZnIubGVuZ3RoO2hyKyspe3ZhciBjcj1mcltocl07bHIucHJvdG90eXBlW2NyXXx8KGxyLnByb3RvdHlwZVtjcl09V2UucHJvdG90eXBlW2NyXSl9ZnVuY3Rpb24gbHIodCl7aWYoISh0aGlzIGluc3RhbmNlb2YgbHIpKXJldHVybiBuZXcgbHIodCk7T3IuY2FsbCh0aGlzLHQpLFdlLmNhbGwodGhpcyx0KSx0JiYhMT09PXQucmVhZGFibGUmJih0aGlzLnJlYWRhYmxlPSExKSx0JiYhMT09PXQud3JpdGFibGUmJih0aGlzLndyaXRhYmxlPSExKSx0aGlzLmFsbG93SGFsZk9wZW49ITAsdCYmITE9PT10LmFsbG93SGFsZk9wZW4mJih0aGlzLmFsbG93SGFsZk9wZW49ITEpLHRoaXMub25jZSgiZW5kIixkcil9ZnVuY3Rpb24gZHIoKXt0aGlzLmFsbG93SGFsZk9wZW58fHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWR8fE0ubmV4dFRpY2socHIsdGhpcyl9ZnVuY3Rpb24gcHIodCl7dC5lbmQoKX1PYmplY3QuZGVmaW5lUHJvcGVydHkobHIucHJvdG90eXBlLCJ3cml0YWJsZUhpZ2hXYXRlck1hcmsiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcmt9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGxyLnByb3RvdHlwZSwiZGVzdHJveWVkIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMCE9PXRoaXMuX3JlYWRhYmxlU3RhdGUmJnZvaWQgMCE9PXRoaXMuX3dyaXRhYmxlU3RhdGUmJih0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCYmdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQpfSxzZXQ6ZnVuY3Rpb24odCl7dm9pZCAwIT09dGhpcy5fcmVhZGFibGVTdGF0ZSYmdm9pZCAwIT09dGhpcy5fd3JpdGFibGVTdGF0ZSYmKHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkPXQsdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ9dCl9fSksbHIucHJvdG90eXBlLl9kZXN0cm95PWZ1bmN0aW9uKHQsZSl7dGhpcy5wdXNoKG51bGwpLHRoaXMuZW5kKCksTS5uZXh0VGljayhlLHQpfTt2YXIgZ3I9VnQuQnVmZmVyLHlyPWdyLmlzRW5jb2Rpbmd8fGZ1bmN0aW9uKHQpe3N3aXRjaCgodD0iIit0KSYmdC50b0xvd2VyQ2FzZSgpKXtjYXNlImhleCI6Y2FzZSJ1dGY4IjpjYXNlInV0Zi04IjpjYXNlImFzY2lpIjpjYXNlImJpbmFyeSI6Y2FzZSJiYXNlNjQiOmNhc2UidWNzMiI6Y2FzZSJ1Y3MtMiI6Y2FzZSJ1dGYxNmxlIjpjYXNlInV0Zi0xNmxlIjpjYXNlInJhdyI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19O3ZhciB2cj1icjtmdW5jdGlvbiBicih0KXt2YXIgZTtzd2l0Y2godGhpcy5lbmNvZGluZz1mdW5jdGlvbih0KXt2YXIgZT1mdW5jdGlvbih0KXtpZighdClyZXR1cm4idXRmOCI7Zm9yKHZhciBlOzspc3dpdGNoKHQpe2Nhc2UidXRmOCI6Y2FzZSJ1dGYtOCI6cmV0dXJuInV0ZjgiO2Nhc2UidWNzMiI6Y2FzZSJ1Y3MtMiI6Y2FzZSJ1dGYxNmxlIjpjYXNlInV0Zi0xNmxlIjpyZXR1cm4idXRmMTZsZSI7Y2FzZSJsYXRpbjEiOmNhc2UiYmluYXJ5IjpyZXR1cm4ibGF0aW4xIjtjYXNlImJhc2U2NCI6Y2FzZSJhc2NpaSI6Y2FzZSJoZXgiOnJldHVybiB0O2RlZmF1bHQ6aWYoZSlyZXR1cm47dD0oIiIrdCkudG9Mb3dlckNhc2UoKSxlPSEwfX0odCk7aWYoInN0cmluZyIhPXR5cGVvZiBlJiYoZ3IuaXNFbmNvZGluZz09PXlyfHwheXIodCkpKXRocm93IG5ldyBFcnJvcigiVW5rbm93biBlbmNvZGluZzogIit0KTtyZXR1cm4gZXx8dH0odCksdGhpcy5lbmNvZGluZyl7Y2FzZSJ1dGYxNmxlIjp0aGlzLnRleHQ9X3IsdGhpcy5lbmQ9U3IsZT00O2JyZWFrO2Nhc2UidXRmOCI6dGhpcy5maWxsTGFzdD1tcixlPTQ7YnJlYWs7Y2FzZSJiYXNlNjQiOnRoaXMudGV4dD1Fcix0aGlzLmVuZD1rcixlPTM7YnJlYWs7ZGVmYXVsdDpyZXR1cm4gdGhpcy53cml0ZT1Scix2b2lkKHRoaXMuZW5kPWpyKX10aGlzLmxhc3ROZWVkPTAsdGhpcy5sYXN0VG90YWw9MCx0aGlzLmxhc3RDaGFyPWdyLmFsbG9jVW5zYWZlKGUpfWZ1bmN0aW9uIHdyKHQpe3JldHVybiB0PD0xMjc/MDp0Pj41PT02PzI6dD4+ND09MTQ/Mzp0Pj4zPT0zMD80OnQ+PjY9PTI/LTE6LTJ9ZnVuY3Rpb24gbXIodCl7dmFyIGU9dGhpcy5sYXN0VG90YWwtdGhpcy5sYXN0TmVlZCxyPWZ1bmN0aW9uKHQsZSxyKXtpZigxMjghPSgxOTImZVswXSkpcmV0dXJuIHQubGFzdE5lZWQ9MCwi77+9IjtpZih0Lmxhc3ROZWVkPjEmJmUubGVuZ3RoPjEpe2lmKDEyOCE9KDE5MiZlWzFdKSlyZXR1cm4gdC5sYXN0TmVlZD0xLCLvv70iO2lmKHQubGFzdE5lZWQ+MiYmZS5sZW5ndGg+MiYmMTI4IT0oMTkyJmVbMl0pKXJldHVybiB0Lmxhc3ROZWVkPTIsIu+/vSJ9fSh0aGlzLHQpO3JldHVybiB2b2lkIDAhPT1yP3I6dGhpcy5sYXN0TmVlZDw9dC5sZW5ndGg/KHQuY29weSh0aGlzLmxhc3RDaGFyLGUsMCx0aGlzLmxhc3ROZWVkKSx0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsMCx0aGlzLmxhc3RUb3RhbCkpOih0LmNvcHkodGhpcy5sYXN0Q2hhcixlLDAsdC5sZW5ndGgpLHZvaWQodGhpcy5sYXN0TmVlZC09dC5sZW5ndGgpKX1mdW5jdGlvbiBfcih0LGUpe2lmKCh0Lmxlbmd0aC1lKSUyPT0wKXt2YXIgcj10LnRvU3RyaW5nKCJ1dGYxNmxlIixlKTtpZihyKXt2YXIgbj1yLmNoYXJDb2RlQXQoci5sZW5ndGgtMSk7aWYobj49NTUyOTYmJm48PTU2MzE5KXJldHVybiB0aGlzLmxhc3ROZWVkPTIsdGhpcy5sYXN0VG90YWw9NCx0aGlzLmxhc3RDaGFyWzBdPXRbdC5sZW5ndGgtMl0sdGhpcy5sYXN0Q2hhclsxXT10W3QubGVuZ3RoLTFdLHIuc2xpY2UoMCwtMSl9cmV0dXJuIHJ9cmV0dXJuIHRoaXMubGFzdE5lZWQ9MSx0aGlzLmxhc3RUb3RhbD0yLHRoaXMubGFzdENoYXJbMF09dFt0Lmxlbmd0aC0xXSx0LnRvU3RyaW5nKCJ1dGYxNmxlIixlLHQubGVuZ3RoLTEpfWZ1bmN0aW9uIFNyKHQpe3ZhciBlPXQmJnQubGVuZ3RoP3RoaXMud3JpdGUodCk6IiI7aWYodGhpcy5sYXN0TmVlZCl7dmFyIHI9dGhpcy5sYXN0VG90YWwtdGhpcy5sYXN0TmVlZDtyZXR1cm4gZSt0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCJ1dGYxNmxlIiwwLHIpfXJldHVybiBlfWZ1bmN0aW9uIEVyKHQsZSl7dmFyIHI9KHQubGVuZ3RoLWUpJTM7cmV0dXJuIDA9PT1yP3QudG9TdHJpbmcoImJhc2U2NCIsZSk6KHRoaXMubGFzdE5lZWQ9My1yLHRoaXMubGFzdFRvdGFsPTMsMT09PXI/dGhpcy5sYXN0Q2hhclswXT10W3QubGVuZ3RoLTFdOih0aGlzLmxhc3RDaGFyWzBdPXRbdC5sZW5ndGgtMl0sdGhpcy5sYXN0Q2hhclsxXT10W3QubGVuZ3RoLTFdKSx0LnRvU3RyaW5nKCJiYXNlNjQiLGUsdC5sZW5ndGgtcikpfWZ1bmN0aW9uIGtyKHQpe3ZhciBlPXQmJnQubGVuZ3RoP3RoaXMud3JpdGUodCk6IiI7cmV0dXJuIHRoaXMubGFzdE5lZWQ/ZSt0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCJiYXNlNjQiLDAsMy10aGlzLmxhc3ROZWVkKTplfWZ1bmN0aW9uIFJyKHQpe3JldHVybiB0LnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpfWZ1bmN0aW9uIGpyKHQpe3JldHVybiB0JiZ0Lmxlbmd0aD90aGlzLndyaXRlKHQpOiIifWJyLnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbih0KXtpZigwPT09dC5sZW5ndGgpcmV0dXJuIiI7dmFyIGUscjtpZih0aGlzLmxhc3ROZWVkKXtpZih2b2lkIDA9PT0oZT10aGlzLmZpbGxMYXN0KHQpKSlyZXR1cm4iIjtyPXRoaXMubGFzdE5lZWQsdGhpcy5sYXN0TmVlZD0wfWVsc2Ugcj0wO3JldHVybiByPHQubGVuZ3RoP2U/ZSt0aGlzLnRleHQodCxyKTp0aGlzLnRleHQodCxyKTplfHwiIn0sYnIucHJvdG90eXBlLmVuZD1mdW5jdGlvbih0KXt2YXIgZT10JiZ0Lmxlbmd0aD90aGlzLndyaXRlKHQpOiIiO3JldHVybiB0aGlzLmxhc3ROZWVkP2UrIu+/vSI6ZX0sYnIucHJvdG90eXBlLnRleHQ9ZnVuY3Rpb24odCxlKXt2YXIgcj1mdW5jdGlvbih0LGUscil7dmFyIG49ZS5sZW5ndGgtMTtpZihuPHIpcmV0dXJuIDA7dmFyIGk9d3IoZVtuXSk7aWYoaT49MClyZXR1cm4gaT4wJiYodC5sYXN0TmVlZD1pLTEpLGk7aWYoLS1uPHJ8fC0yPT09aSlyZXR1cm4gMDtpZigoaT13cihlW25dKSk+PTApcmV0dXJuIGk+MCYmKHQubGFzdE5lZWQ9aS0yKSxpO2lmKC0tbjxyfHwtMj09PWkpcmV0dXJuIDA7aWYoKGk9d3IoZVtuXSkpPj0wKXJldHVybiBpPjAmJigyPT09aT9pPTA6dC5sYXN0TmVlZD1pLTMpLGk7cmV0dXJuIDB9KHRoaXMsdCxlKTtpZighdGhpcy5sYXN0TmVlZClyZXR1cm4gdC50b1N0cmluZygidXRmOCIsZSk7dGhpcy5sYXN0VG90YWw9cjt2YXIgbj10Lmxlbmd0aC0oci10aGlzLmxhc3ROZWVkKTtyZXR1cm4gdC5jb3B5KHRoaXMubGFzdENoYXIsMCxuKSx0LnRvU3RyaW5nKCJ1dGY4IixlLG4pfSxici5wcm90b3R5cGUuZmlsbExhc3Q9ZnVuY3Rpb24odCl7aWYodGhpcy5sYXN0TmVlZDw9dC5sZW5ndGgpcmV0dXJuIHQuY29weSh0aGlzLmxhc3RDaGFyLHRoaXMubGFzdFRvdGFsLXRoaXMubGFzdE5lZWQsMCx0aGlzLmxhc3ROZWVkKSx0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsMCx0aGlzLmxhc3RUb3RhbCk7dC5jb3B5KHRoaXMubGFzdENoYXIsdGhpcy5sYXN0VG90YWwtdGhpcy5sYXN0TmVlZCwwLHQubGVuZ3RoKSx0aGlzLmxhc3ROZWVkLT10Lmxlbmd0aH07dmFyIHhyLFRyPXtTdHJpbmdEZWNvZGVyOnZyfSxPcj1EcjtEci5SZWFkYWJsZVN0YXRlPVVyLEouRXZlbnRFbWl0dGVyO3ZhciBBcj1mdW5jdGlvbih0LGUpe3JldHVybiB0Lmxpc3RlbmVycyhlKS5sZW5ndGh9LExyPVZ0LkJ1ZmZlcixDcj1uLlVpbnQ4QXJyYXl8fGZ1bmN0aW9uKCl7fTt2YXIgTXI9T2JqZWN0LmNyZWF0ZShadCk7TXIuaW5oZXJpdHM9WHQ7dmFyIFByLEJyPXZvaWQgMDtCcj1CZSYmQmUuZGVidWdsb2c/QmUuZGVidWdsb2coInN0cmVhbSIpOmZ1bmN0aW9uKCl7fSxNci5pbmhlcml0cyhEcixWKTt2YXIgTnI9WyJlcnJvciIsImNsb3NlIiwiZGVzdHJveSIsInBhdXNlIiwicmVzdW1lIl07ZnVuY3Rpb24gVXIodCxlKXt0PXR8fHt9O3ZhciByPWUgaW5zdGFuY2VvZih4cj14cnx8c3IpO3RoaXMub2JqZWN0TW9kZT0hIXQub2JqZWN0TW9kZSxyJiYodGhpcy5vYmplY3RNb2RlPXRoaXMub2JqZWN0TW9kZXx8ISF0LnJlYWRhYmxlT2JqZWN0TW9kZSk7dmFyIG49dC5oaWdoV2F0ZXJNYXJrLGk9dC5yZWFkYWJsZUhpZ2hXYXRlck1hcmssbz10aGlzLm9iamVjdE1vZGU/MTY6MTYzODQ7dGhpcy5oaWdoV2F0ZXJNYXJrPW58fDA9PT1uP246ciYmKGl8fDA9PT1pKT9pOm8sdGhpcy5oaWdoV2F0ZXJNYXJrPU1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKSx0aGlzLmJ1ZmZlcj1uZXcgTmUsdGhpcy5sZW5ndGg9MCx0aGlzLnBpcGVzPW51bGwsdGhpcy5waXBlc0NvdW50PTAsdGhpcy5mbG93aW5nPW51bGwsdGhpcy5lbmRlZD0hMSx0aGlzLmVuZEVtaXR0ZWQ9ITEsdGhpcy5yZWFkaW5nPSExLHRoaXMuc3luYz0hMCx0aGlzLm5lZWRSZWFkYWJsZT0hMSx0aGlzLmVtaXR0ZWRSZWFkYWJsZT0hMSx0aGlzLnJlYWRhYmxlTGlzdGVuaW5nPSExLHRoaXMucmVzdW1lU2NoZWR1bGVkPSExLHRoaXMuZGVzdHJveWVkPSExLHRoaXMuZGVmYXVsdEVuY29kaW5nPXQuZGVmYXVsdEVuY29kaW5nfHwidXRmOCIsdGhpcy5hd2FpdERyYWluPTAsdGhpcy5yZWFkaW5nTW9yZT0hMSx0aGlzLmRlY29kZXI9bnVsbCx0aGlzLmVuY29kaW5nPW51bGwsdC5lbmNvZGluZyYmKFByfHwoUHI9VHIuU3RyaW5nRGVjb2RlciksdGhpcy5kZWNvZGVyPW5ldyBQcih0LmVuY29kaW5nKSx0aGlzLmVuY29kaW5nPXQuZW5jb2RpbmcpfWZ1bmN0aW9uIERyKHQpe2lmKHhyPXhyfHxzciwhKHRoaXMgaW5zdGFuY2VvZiBEcikpcmV0dXJuIG5ldyBEcih0KTt0aGlzLl9yZWFkYWJsZVN0YXRlPW5ldyBVcih0LHRoaXMpLHRoaXMucmVhZGFibGU9ITAsdCYmKCJmdW5jdGlvbiI9PXR5cGVvZiB0LnJlYWQmJih0aGlzLl9yZWFkPXQucmVhZCksImZ1bmN0aW9uIj09dHlwZW9mIHQuZGVzdHJveSYmKHRoaXMuX2Rlc3Ryb3k9dC5kZXN0cm95KSksVi5jYWxsKHRoaXMpfWZ1bmN0aW9uIElyKHQsZSxyLG4saSl7dmFyIG8sYT10Ll9yZWFkYWJsZVN0YXRlO251bGw9PT1lPyhhLnJlYWRpbmc9ITEsZnVuY3Rpb24odCxlKXtpZihlLmVuZGVkKXJldHVybjtpZihlLmRlY29kZXIpe3ZhciByPWUuZGVjb2Rlci5lbmQoKTtyJiZyLmxlbmd0aCYmKGUuYnVmZmVyLnB1c2gociksZS5sZW5ndGgrPWUub2JqZWN0TW9kZT8xOnIubGVuZ3RoKX1lLmVuZGVkPSEwLFdyKHQpfSh0LGEpKTooaXx8KG89ZnVuY3Rpb24odCxlKXt2YXIgcjsoZnVuY3Rpb24odCl7cmV0dXJuIExyLmlzQnVmZmVyKHQpfHx0IGluc3RhbmNlb2YgQ3J9KShlKXx8InN0cmluZyI9PXR5cGVvZiBlfHx2b2lkIDA9PT1lfHx0Lm9iamVjdE1vZGV8fChyPW5ldyBUeXBlRXJyb3IoIkludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsiKSk7cmV0dXJuIHJ9KGEsZSkpLG8/dC5lbWl0KCJlcnJvciIsbyk6YS5vYmplY3RNb2RlfHxlJiZlLmxlbmd0aD4wPygic3RyaW5nIj09dHlwZW9mIGV8fGEub2JqZWN0TW9kZXx8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpPT09THIucHJvdG90eXBlfHwoZT1mdW5jdGlvbih0KXtyZXR1cm4gTHIuZnJvbSh0KX0oZSkpLG4/YS5lbmRFbWl0dGVkP3QuZW1pdCgiZXJyb3IiLG5ldyBFcnJvcigic3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQiKSk6RnIodCxhLGUsITApOmEuZW5kZWQ/dC5lbWl0KCJlcnJvciIsbmV3IEVycm9yKCJzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRiIpKTooYS5yZWFkaW5nPSExLGEuZGVjb2RlciYmIXI/KGU9YS5kZWNvZGVyLndyaXRlKGUpLGEub2JqZWN0TW9kZXx8MCE9PWUubGVuZ3RoP0ZyKHQsYSxlLCExKTpZcih0LGEpKTpGcih0LGEsZSwhMSkpKTpufHwoYS5yZWFkaW5nPSExKSk7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiF0LmVuZGVkJiYodC5uZWVkUmVhZGFibGV8fHQubGVuZ3RoPHQuaGlnaFdhdGVyTWFya3x8MD09PXQubGVuZ3RoKX0oYSl9ZnVuY3Rpb24gRnIodCxlLHIsbil7ZS5mbG93aW5nJiYwPT09ZS5sZW5ndGgmJiFlLnN5bmM/KHQuZW1pdCgiZGF0YSIsciksdC5yZWFkKDApKTooZS5sZW5ndGgrPWUub2JqZWN0TW9kZT8xOnIubGVuZ3RoLG4/ZS5idWZmZXIudW5zaGlmdChyKTplLmJ1ZmZlci5wdXNoKHIpLGUubmVlZFJlYWRhYmxlJiZXcih0KSksWXIodCxlKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoRHIucHJvdG90eXBlLCJkZXN0cm95ZWQiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwIT09dGhpcy5fcmVhZGFibGVTdGF0ZSYmdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWR9LHNldDpmdW5jdGlvbih0KXt0aGlzLl9yZWFkYWJsZVN0YXRlJiYodGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ9dCl9fSksRHIucHJvdG90eXBlLmRlc3Ryb3k9RGUsRHIucHJvdG90eXBlLl91bmRlc3Ryb3k9SWUsRHIucHJvdG90eXBlLl9kZXN0cm95PWZ1bmN0aW9uKHQsZSl7dGhpcy5wdXNoKG51bGwpLGUodCl9LERyLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKHQsZSl7dmFyIHIsbj10aGlzLl9yZWFkYWJsZVN0YXRlO3JldHVybiBuLm9iamVjdE1vZGU/cj0hMDoic3RyaW5nIj09dHlwZW9mIHQmJigoZT1lfHxuLmRlZmF1bHRFbmNvZGluZykhPT1uLmVuY29kaW5nJiYodD1Mci5mcm9tKHQsZSksZT0iIikscj0hMCksSXIodGhpcyx0LGUsITEscil9LERyLnByb3RvdHlwZS51bnNoaWZ0PWZ1bmN0aW9uKHQpe3JldHVybiBJcih0aGlzLHQsbnVsbCwhMCwhMSl9LERyLnByb3RvdHlwZS5pc1BhdXNlZD1mdW5jdGlvbigpe3JldHVybiExPT09dGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nfSxEci5wcm90b3R5cGUuc2V0RW5jb2Rpbmc9ZnVuY3Rpb24odCl7cmV0dXJuIFByfHwoUHI9VHIuU3RyaW5nRGVjb2RlciksdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyPW5ldyBQcih0KSx0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nPXQsdGhpc307ZnVuY3Rpb24gcXIodCxlKXtyZXR1cm4gdDw9MHx8MD09PWUubGVuZ3RoJiZlLmVuZGVkPzA6ZS5vYmplY3RNb2RlPzE6dCE9dD9lLmZsb3dpbmcmJmUubGVuZ3RoP2UuYnVmZmVyLmhlYWQuZGF0YS5sZW5ndGg6ZS5sZW5ndGg6KHQ+ZS5oaWdoV2F0ZXJNYXJrJiYoZS5oaWdoV2F0ZXJNYXJrPWZ1bmN0aW9uKHQpe3JldHVybiB0Pj04Mzg4NjA4P3Q9ODM4ODYwODoodC0tLHR8PXQ+Pj4xLHR8PXQ+Pj4yLHR8PXQ+Pj40LHR8PXQ+Pj44LHR8PXQ+Pj4xNix0KyspLHR9KHQpKSx0PD1lLmxlbmd0aD90OmUuZW5kZWQ/ZS5sZW5ndGg6KGUubmVlZFJlYWRhYmxlPSEwLDApKX1mdW5jdGlvbiBXcih0KXt2YXIgZT10Ll9yZWFkYWJsZVN0YXRlO2UubmVlZFJlYWRhYmxlPSExLGUuZW1pdHRlZFJlYWRhYmxlfHwoQnIoImVtaXRSZWFkYWJsZSIsZS5mbG93aW5nKSxlLmVtaXR0ZWRSZWFkYWJsZT0hMCxlLnN5bmM/TS5uZXh0VGljayh6cix0KTp6cih0KSl9ZnVuY3Rpb24genIodCl7QnIoImVtaXQgcmVhZGFibGUiKSx0LmVtaXQoInJlYWRhYmxlIiksSnIodCl9ZnVuY3Rpb24gWXIodCxlKXtlLnJlYWRpbmdNb3JlfHwoZS5yZWFkaW5nTW9yZT0hMCxNLm5leHRUaWNrKCRyLHQsZSkpfWZ1bmN0aW9uICRyKHQsZSl7Zm9yKHZhciByPWUubGVuZ3RoOyFlLnJlYWRpbmcmJiFlLmZsb3dpbmcmJiFlLmVuZGVkJiZlLmxlbmd0aDxlLmhpZ2hXYXRlck1hcmsmJihCcigibWF5YmVSZWFkTW9yZSByZWFkIDAiKSx0LnJlYWQoMCksciE9PWUubGVuZ3RoKTspcj1lLmxlbmd0aDtlLnJlYWRpbmdNb3JlPSExfWZ1bmN0aW9uIEdyKHQpe0JyKCJyZWFkYWJsZSBuZXh0dGljayByZWFkIDAiKSx0LnJlYWQoMCl9ZnVuY3Rpb24gSHIodCxlKXtlLnJlYWRpbmd8fChCcigicmVzdW1lIHJlYWQgMCIpLHQucmVhZCgwKSksZS5yZXN1bWVTY2hlZHVsZWQ9ITEsZS5hd2FpdERyYWluPTAsdC5lbWl0KCJyZXN1bWUiKSxKcih0KSxlLmZsb3dpbmcmJiFlLnJlYWRpbmcmJnQucmVhZCgwKX1mdW5jdGlvbiBKcih0KXt2YXIgZT10Ll9yZWFkYWJsZVN0YXRlO2ZvcihCcigiZmxvdyIsZS5mbG93aW5nKTtlLmZsb3dpbmcmJm51bGwhPT10LnJlYWQoKTspO31mdW5jdGlvbiBWcih0LGUpe3JldHVybiAwPT09ZS5sZW5ndGg/bnVsbDooZS5vYmplY3RNb2RlP3I9ZS5idWZmZXIuc2hpZnQoKTohdHx8dD49ZS5sZW5ndGg/KHI9ZS5kZWNvZGVyP2UuYnVmZmVyLmpvaW4oIiIpOjE9PT1lLmJ1ZmZlci5sZW5ndGg/ZS5idWZmZXIuaGVhZC5kYXRhOmUuYnVmZmVyLmNvbmNhdChlLmxlbmd0aCksZS5idWZmZXIuY2xlYXIoKSk6cj1mdW5jdGlvbih0LGUscil7dmFyIG47dDxlLmhlYWQuZGF0YS5sZW5ndGg/KG49ZS5oZWFkLmRhdGEuc2xpY2UoMCx0KSxlLmhlYWQuZGF0YT1lLmhlYWQuZGF0YS5zbGljZSh0KSk6bj10PT09ZS5oZWFkLmRhdGEubGVuZ3RoP2Uuc2hpZnQoKTpyP2Z1bmN0aW9uKHQsZSl7dmFyIHI9ZS5oZWFkLG49MSxpPXIuZGF0YTt0LT1pLmxlbmd0aDtmb3IoO3I9ci5uZXh0Oyl7dmFyIG89ci5kYXRhLGE9dD5vLmxlbmd0aD9vLmxlbmd0aDp0O2lmKGE9PT1vLmxlbmd0aD9pKz1vOmkrPW8uc2xpY2UoMCx0KSwwPT09KHQtPWEpKXthPT09by5sZW5ndGg/KCsrbixyLm5leHQ/ZS5oZWFkPXIubmV4dDplLmhlYWQ9ZS50YWlsPW51bGwpOihlLmhlYWQ9cixyLmRhdGE9by5zbGljZShhKSk7YnJlYWt9KytufXJldHVybiBlLmxlbmd0aC09bixpfSh0LGUpOmZ1bmN0aW9uKHQsZSl7dmFyIHI9THIuYWxsb2NVbnNhZmUodCksbj1lLmhlYWQsaT0xO24uZGF0YS5jb3B5KHIpLHQtPW4uZGF0YS5sZW5ndGg7Zm9yKDtuPW4ubmV4dDspe3ZhciBvPW4uZGF0YSxhPXQ+by5sZW5ndGg/by5sZW5ndGg6dDtpZihvLmNvcHkocixyLmxlbmd0aC10LDAsYSksMD09PSh0LT1hKSl7YT09PW8ubGVuZ3RoPygrK2ksbi5uZXh0P2UuaGVhZD1uLm5leHQ6ZS5oZWFkPWUudGFpbD1udWxsKTooZS5oZWFkPW4sbi5kYXRhPW8uc2xpY2UoYSkpO2JyZWFrfSsraX1yZXR1cm4gZS5sZW5ndGgtPWkscn0odCxlKTtyZXR1cm4gbn0odCxlLmJ1ZmZlcixlLmRlY29kZXIpLHIpO3ZhciByfWZ1bmN0aW9uIEtyKHQpe3ZhciBlPXQuX3JlYWRhYmxlU3RhdGU7aWYoZS5sZW5ndGg+MCl0aHJvdyBuZXcgRXJyb3IoJyJlbmRSZWFkYWJsZSgpIiBjYWxsZWQgb24gbm9uLWVtcHR5IHN0cmVhbScpO2UuZW5kRW1pdHRlZHx8KGUuZW5kZWQ9ITAsTS5uZXh0VGljayhacixlLHQpKX1mdW5jdGlvbiBacih0LGUpe3QuZW5kRW1pdHRlZHx8MCE9PXQubGVuZ3RofHwodC5lbmRFbWl0dGVkPSEwLGUucmVhZGFibGU9ITEsZS5lbWl0KCJlbmQiKSl9ZnVuY3Rpb24gWHIodCxlKXtmb3IodmFyIHI9MCxuPXQubGVuZ3RoO3I8bjtyKyspaWYodFtyXT09PWUpcmV0dXJuIHI7cmV0dXJuLTF9RHIucHJvdG90eXBlLnJlYWQ9ZnVuY3Rpb24odCl7QnIoInJlYWQiLHQpLHQ9cGFyc2VJbnQodCwxMCk7dmFyIGU9dGhpcy5fcmVhZGFibGVTdGF0ZSxyPXQ7aWYoMCE9PXQmJihlLmVtaXR0ZWRSZWFkYWJsZT0hMSksMD09PXQmJmUubmVlZFJlYWRhYmxlJiYoZS5sZW5ndGg+PWUuaGlnaFdhdGVyTWFya3x8ZS5lbmRlZCkpcmV0dXJuIEJyKCJyZWFkOiBlbWl0UmVhZGFibGUiLGUubGVuZ3RoLGUuZW5kZWQpLDA9PT1lLmxlbmd0aCYmZS5lbmRlZD9Lcih0aGlzKTpXcih0aGlzKSxudWxsO2lmKDA9PT0odD1xcih0LGUpKSYmZS5lbmRlZClyZXR1cm4gMD09PWUubGVuZ3RoJiZLcih0aGlzKSxudWxsO3ZhciBuLGk9ZS5uZWVkUmVhZGFibGU7cmV0dXJuIEJyKCJuZWVkIHJlYWRhYmxlIixpKSwoMD09PWUubGVuZ3RofHxlLmxlbmd0aC10PGUuaGlnaFdhdGVyTWFyaykmJkJyKCJsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFyayIsaT0hMCksZS5lbmRlZHx8ZS5yZWFkaW5nP0JyKCJyZWFkaW5nIG9yIGVuZGVkIixpPSExKTppJiYoQnIoImRvIHJlYWQiKSxlLnJlYWRpbmc9ITAsZS5zeW5jPSEwLDA9PT1lLmxlbmd0aCYmKGUubmVlZFJlYWRhYmxlPSEwKSx0aGlzLl9yZWFkKGUuaGlnaFdhdGVyTWFyayksZS5zeW5jPSExLGUucmVhZGluZ3x8KHQ9cXIocixlKSkpLG51bGw9PT0obj10PjA/VnIodCxlKTpudWxsKT8oZS5uZWVkUmVhZGFibGU9ITAsdD0wKTplLmxlbmd0aC09dCwwPT09ZS5sZW5ndGgmJihlLmVuZGVkfHwoZS5uZWVkUmVhZGFibGU9ITApLHIhPT10JiZlLmVuZGVkJiZLcih0aGlzKSksbnVsbCE9PW4mJnRoaXMuZW1pdCgiZGF0YSIsbiksbn0sRHIucHJvdG90eXBlLl9yZWFkPWZ1bmN0aW9uKHQpe3RoaXMuZW1pdCgiZXJyb3IiLG5ldyBFcnJvcigiX3JlYWQoKSBpcyBub3QgaW1wbGVtZW50ZWQiKSl9LERyLnByb3RvdHlwZS5waXBlPWZ1bmN0aW9uKHQsZSl7dmFyIHI9dGhpcyxuPXRoaXMuX3JlYWRhYmxlU3RhdGU7c3dpdGNoKG4ucGlwZXNDb3VudCl7Y2FzZSAwOm4ucGlwZXM9dDticmVhaztjYXNlIDE6bi5waXBlcz1bbi5waXBlcyx0XTticmVhaztkZWZhdWx0Om4ucGlwZXMucHVzaCh0KX1uLnBpcGVzQ291bnQrPTEsQnIoInBpcGUgY291bnQ9JWQgb3B0cz0laiIsbi5waXBlc0NvdW50LGUpO3ZhciBpPSghZXx8ITEhPT1lLmVuZCkmJnQhPT1DLnN0ZG91dCYmdCE9PUMuc3RkZXJyP2E6cDtmdW5jdGlvbiBvKGUsaSl7QnIoIm9udW5waXBlIiksZT09PXImJmkmJiExPT09aS5oYXNVbnBpcGVkJiYoaS5oYXNVbnBpcGVkPSEwLEJyKCJjbGVhbnVwIiksdC5yZW1vdmVMaXN0ZW5lcigiY2xvc2UiLGwpLHQucmVtb3ZlTGlzdGVuZXIoImZpbmlzaCIsZCksdC5yZW1vdmVMaXN0ZW5lcigiZHJhaW4iLHMpLHQucmVtb3ZlTGlzdGVuZXIoImVycm9yIixjKSx0LnJlbW92ZUxpc3RlbmVyKCJ1bnBpcGUiLG8pLHIucmVtb3ZlTGlzdGVuZXIoImVuZCIsYSksci5yZW1vdmVMaXN0ZW5lcigiZW5kIixwKSxyLnJlbW92ZUxpc3RlbmVyKCJkYXRhIixoKSx1PSEwLCFuLmF3YWl0RHJhaW58fHQuX3dyaXRhYmxlU3RhdGUmJiF0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbnx8cygpKX1mdW5jdGlvbiBhKCl7QnIoIm9uZW5kIiksdC5lbmQoKX1uLmVuZEVtaXR0ZWQ/TS5uZXh0VGljayhpKTpyLm9uY2UoImVuZCIsaSksdC5vbigidW5waXBlIixvKTt2YXIgcz1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZT10Ll9yZWFkYWJsZVN0YXRlO0JyKCJwaXBlT25EcmFpbiIsZS5hd2FpdERyYWluKSxlLmF3YWl0RHJhaW4mJmUuYXdhaXREcmFpbi0tLDA9PT1lLmF3YWl0RHJhaW4mJkFyKHQsImRhdGEiKSYmKGUuZmxvd2luZz0hMCxKcih0KSl9fShyKTt0Lm9uKCJkcmFpbiIscyk7dmFyIHU9ITE7dmFyIGY9ITE7ZnVuY3Rpb24gaChlKXtCcigib25kYXRhIiksZj0hMSwhMSE9PXQud3JpdGUoZSl8fGZ8fCgoMT09PW4ucGlwZXNDb3VudCYmbi5waXBlcz09PXR8fG4ucGlwZXNDb3VudD4xJiYtMSE9PVhyKG4ucGlwZXMsdCkpJiYhdSYmKEJyKCJmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UiLHIuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbiksci5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKyssZj0hMCksci5wYXVzZSgpKX1mdW5jdGlvbiBjKGUpe0JyKCJvbmVycm9yIixlKSxwKCksdC5yZW1vdmVMaXN0ZW5lcigiZXJyb3IiLGMpLDA9PT1Bcih0LCJlcnJvciIpJiZ0LmVtaXQoImVycm9yIixlKX1mdW5jdGlvbiBsKCl7dC5yZW1vdmVMaXN0ZW5lcigiZmluaXNoIixkKSxwKCl9ZnVuY3Rpb24gZCgpe0JyKCJvbmZpbmlzaCIpLHQucmVtb3ZlTGlzdGVuZXIoImNsb3NlIixsKSxwKCl9ZnVuY3Rpb24gcCgpe0JyKCJ1bnBpcGUiKSxyLnVucGlwZSh0KX1yZXR1cm4gci5vbigiZGF0YSIsaCksZnVuY3Rpb24odCxlLHIpe2lmKCJmdW5jdGlvbiI9PXR5cGVvZiB0LnByZXBlbmRMaXN0ZW5lcilyZXR1cm4gdC5wcmVwZW5kTGlzdGVuZXIoZSxyKTt0Ll9ldmVudHMmJnQuX2V2ZW50c1tlXT9CKHQuX2V2ZW50c1tlXSk/dC5fZXZlbnRzW2VdLnVuc2hpZnQocik6dC5fZXZlbnRzW2VdPVtyLHQuX2V2ZW50c1tlXV06dC5vbihlLHIpfSh0LCJlcnJvciIsYyksdC5vbmNlKCJjbG9zZSIsbCksdC5vbmNlKCJmaW5pc2giLGQpLHQuZW1pdCgicGlwZSIsciksbi5mbG93aW5nfHwoQnIoInBpcGUgcmVzdW1lIiksci5yZXN1bWUoKSksdH0sRHIucHJvdG90eXBlLnVucGlwZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl9yZWFkYWJsZVN0YXRlLHI9e2hhc1VucGlwZWQ6ITF9O2lmKDA9PT1lLnBpcGVzQ291bnQpcmV0dXJuIHRoaXM7aWYoMT09PWUucGlwZXNDb3VudClyZXR1cm4gdCYmdCE9PWUucGlwZXN8fCh0fHwodD1lLnBpcGVzKSxlLnBpcGVzPW51bGwsZS5waXBlc0NvdW50PTAsZS5mbG93aW5nPSExLHQmJnQuZW1pdCgidW5waXBlIix0aGlzLHIpKSx0aGlzO2lmKCF0KXt2YXIgbj1lLnBpcGVzLGk9ZS5waXBlc0NvdW50O2UucGlwZXM9bnVsbCxlLnBpcGVzQ291bnQ9MCxlLmZsb3dpbmc9ITE7Zm9yKHZhciBvPTA7bzxpO28rKyluW29dLmVtaXQoInVucGlwZSIsdGhpcyxyKTtyZXR1cm4gdGhpc312YXIgYT1YcihlLnBpcGVzLHQpO3JldHVybi0xPT09YXx8KGUucGlwZXMuc3BsaWNlKGEsMSksZS5waXBlc0NvdW50LT0xLDE9PT1lLnBpcGVzQ291bnQmJihlLnBpcGVzPWUucGlwZXNbMF0pLHQuZW1pdCgidW5waXBlIix0aGlzLHIpKSx0aGlzfSxEci5wcm90b3R5cGUub249ZnVuY3Rpb24odCxlKXt2YXIgcj1WLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsdCxlKTtpZigiZGF0YSI9PT10KSExIT09dGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nJiZ0aGlzLnJlc3VtZSgpO2Vsc2UgaWYoInJlYWRhYmxlIj09PXQpe3ZhciBuPXRoaXMuX3JlYWRhYmxlU3RhdGU7bi5lbmRFbWl0dGVkfHxuLnJlYWRhYmxlTGlzdGVuaW5nfHwobi5yZWFkYWJsZUxpc3RlbmluZz1uLm5lZWRSZWFkYWJsZT0hMCxuLmVtaXR0ZWRSZWFkYWJsZT0hMSxuLnJlYWRpbmc/bi5sZW5ndGgmJldyKHRoaXMpOk0ubmV4dFRpY2soR3IsdGhpcykpfXJldHVybiByfSxEci5wcm90b3R5cGUuYWRkTGlzdGVuZXI9RHIucHJvdG90eXBlLm9uLERyLnByb3RvdHlwZS5yZXN1bWU9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9yZWFkYWJsZVN0YXRlO3JldHVybiB0LmZsb3dpbmd8fChCcigicmVzdW1lIiksdC5mbG93aW5nPSEwLGZ1bmN0aW9uKHQsZSl7ZS5yZXN1bWVTY2hlZHVsZWR8fChlLnJlc3VtZVNjaGVkdWxlZD0hMCxNLm5leHRUaWNrKEhyLHQsZSkpfSh0aGlzLHQpKSx0aGlzfSxEci5wcm90b3R5cGUucGF1c2U9ZnVuY3Rpb24oKXtyZXR1cm4gQnIoImNhbGwgcGF1c2UgZmxvd2luZz0laiIsdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSwhMSE9PXRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyYmKEJyKCJwYXVzZSIpLHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZz0hMSx0aGlzLmVtaXQoInBhdXNlIikpLHRoaXN9LERyLnByb3RvdHlwZS53cmFwPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMscj10aGlzLl9yZWFkYWJsZVN0YXRlLG49ITE7Zm9yKHZhciBpIGluIHQub24oImVuZCIsKGZ1bmN0aW9uKCl7aWYoQnIoIndyYXBwZWQgZW5kIiksci5kZWNvZGVyJiYhci5lbmRlZCl7dmFyIHQ9ci5kZWNvZGVyLmVuZCgpO3QmJnQubGVuZ3RoJiZlLnB1c2godCl9ZS5wdXNoKG51bGwpfSkpLHQub24oImRhdGEiLChmdW5jdGlvbihpKXsoQnIoIndyYXBwZWQgZGF0YSIpLHIuZGVjb2RlciYmKGk9ci5kZWNvZGVyLndyaXRlKGkpKSxyLm9iamVjdE1vZGUmJm51bGw9PWkpfHwoci5vYmplY3RNb2RlfHxpJiZpLmxlbmd0aCkmJihlLnB1c2goaSl8fChuPSEwLHQucGF1c2UoKSkpfSkpLHQpdm9pZCAwPT09dGhpc1tpXSYmImZ1bmN0aW9uIj09dHlwZW9mIHRbaV0mJih0aGlzW2ldPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0W2VdLmFwcGx5KHQsYXJndW1lbnRzKX19KGkpKTtmb3IodmFyIG89MDtvPE5yLmxlbmd0aDtvKyspdC5vbihOcltvXSx0aGlzLmVtaXQuYmluZCh0aGlzLE5yW29dKSk7cmV0dXJuIHRoaXMuX3JlYWQ9ZnVuY3Rpb24oZSl7QnIoIndyYXBwZWQgX3JlYWQiLGUpLG4mJihuPSExLHQucmVzdW1lKCkpfSx0aGlzfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoRHIucHJvdG90eXBlLCJyZWFkYWJsZUhpZ2hXYXRlck1hcmsiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmhpZ2hXYXRlck1hcmt9fSksRHIuX2Zyb21MaXN0PVZyO3ZhciBRcj1ybix0bj1PYmplY3QuY3JlYXRlKFp0KTtmdW5jdGlvbiBlbih0LGUpe3ZhciByPXRoaXMuX3RyYW5zZm9ybVN0YXRlO3IudHJhbnNmb3JtaW5nPSExO3ZhciBuPXIud3JpdGVjYjtpZighbilyZXR1cm4gdGhpcy5lbWl0KCJlcnJvciIsbmV3IEVycm9yKCJ3cml0ZSBjYWxsYmFjayBjYWxsZWQgbXVsdGlwbGUgdGltZXMiKSk7ci53cml0ZWNodW5rPW51bGwsci53cml0ZWNiPW51bGwsbnVsbCE9ZSYmdGhpcy5wdXNoKGUpLG4odCk7dmFyIGk9dGhpcy5fcmVhZGFibGVTdGF0ZTtpLnJlYWRpbmc9ITEsKGkubmVlZFJlYWRhYmxlfHxpLmxlbmd0aDxpLmhpZ2hXYXRlck1hcmspJiZ0aGlzLl9yZWFkKGkuaGlnaFdhdGVyTWFyayl9ZnVuY3Rpb24gcm4odCl7aWYoISh0aGlzIGluc3RhbmNlb2Ygcm4pKXJldHVybiBuZXcgcm4odCk7c3IuY2FsbCh0aGlzLHQpLHRoaXMuX3RyYW5zZm9ybVN0YXRlPXthZnRlclRyYW5zZm9ybTplbi5iaW5kKHRoaXMpLG5lZWRUcmFuc2Zvcm06ITEsdHJhbnNmb3JtaW5nOiExLHdyaXRlY2I6bnVsbCx3cml0ZWNodW5rOm51bGwsd3JpdGVlbmNvZGluZzpudWxsfSx0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZT0hMCx0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmM9ITEsdCYmKCJmdW5jdGlvbiI9PXR5cGVvZiB0LnRyYW5zZm9ybSYmKHRoaXMuX3RyYW5zZm9ybT10LnRyYW5zZm9ybSksImZ1bmN0aW9uIj09dHlwZW9mIHQuZmx1c2gmJih0aGlzLl9mbHVzaD10LmZsdXNoKSksdGhpcy5vbigicHJlZmluaXNoIixubil9ZnVuY3Rpb24gbm4oKXt2YXIgdD10aGlzOyJmdW5jdGlvbiI9PXR5cGVvZiB0aGlzLl9mbHVzaD90aGlzLl9mbHVzaCgoZnVuY3Rpb24oZSxyKXtvbih0LGUscil9KSk6b24odGhpcyxudWxsLG51bGwpfWZ1bmN0aW9uIG9uKHQsZSxyKXtpZihlKXJldHVybiB0LmVtaXQoImVycm9yIixlKTtpZihudWxsIT1yJiZ0LnB1c2gociksdC5fd3JpdGFibGVTdGF0ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKCJDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gd3MubGVuZ3RoICE9IDAiKTtpZih0Ll90cmFuc2Zvcm1TdGF0ZS50cmFuc2Zvcm1pbmcpdGhyb3cgbmV3IEVycm9yKCJDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nIik7cmV0dXJuIHQucHVzaChudWxsKX10bi5pbmhlcml0cz1YdCx0bi5pbmhlcml0cyhybixzcikscm4ucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybT0hMSxzci5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsdCxlKX0scm4ucHJvdG90eXBlLl90cmFuc2Zvcm09ZnVuY3Rpb24odCxlLHIpe3Rocm93IG5ldyBFcnJvcigiX3RyYW5zZm9ybSgpIGlzIG5vdCBpbXBsZW1lbnRlZCIpfSxybi5wcm90b3R5cGUuX3dyaXRlPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj10aGlzLl90cmFuc2Zvcm1TdGF0ZTtpZihuLndyaXRlY2I9cixuLndyaXRlY2h1bms9dCxuLndyaXRlZW5jb2Rpbmc9ZSwhbi50cmFuc2Zvcm1pbmcpe3ZhciBpPXRoaXMuX3JlYWRhYmxlU3RhdGU7KG4ubmVlZFRyYW5zZm9ybXx8aS5uZWVkUmVhZGFibGV8fGkubGVuZ3RoPGkuaGlnaFdhdGVyTWFyaykmJnRoaXMuX3JlYWQoaS5oaWdoV2F0ZXJNYXJrKX19LHJuLnByb3RvdHlwZS5fcmVhZD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl90cmFuc2Zvcm1TdGF0ZTtudWxsIT09ZS53cml0ZWNodW5rJiZlLndyaXRlY2ImJiFlLnRyYW5zZm9ybWluZz8oZS50cmFuc2Zvcm1pbmc9ITAsdGhpcy5fdHJhbnNmb3JtKGUud3JpdGVjaHVuayxlLndyaXRlZW5jb2RpbmcsZS5hZnRlclRyYW5zZm9ybSkpOmUubmVlZFRyYW5zZm9ybT0hMH0scm4ucHJvdG90eXBlLl9kZXN0cm95PWZ1bmN0aW9uKHQsZSl7dmFyIHI9dGhpcztzci5wcm90b3R5cGUuX2Rlc3Ryb3kuY2FsbCh0aGlzLHQsKGZ1bmN0aW9uKHQpe2UodCksci5lbWl0KCJjbG9zZSIpfSkpfTt2YXIgYW49dW4sc249T2JqZWN0LmNyZWF0ZShadCk7ZnVuY3Rpb24gdW4odCl7aWYoISh0aGlzIGluc3RhbmNlb2YgdW4pKXJldHVybiBuZXcgdW4odCk7UXIuY2FsbCh0aGlzLHQpfXNuLmluaGVyaXRzPVh0LHNuLmluaGVyaXRzKHVuLFFyKSx1bi5wcm90b3R5cGUuX3RyYW5zZm9ybT1mdW5jdGlvbih0LGUscil7cihudWxsLHQpfTt2YXIgZm49bygoZnVuY3Rpb24odCxlKXsoZT10LmV4cG9ydHM9T3IpLlN0cmVhbT1lLGUuUmVhZGFibGU9ZSxlLldyaXRhYmxlPVdlLGUuRHVwbGV4PXNyLGUuVHJhbnNmb3JtPVFyLGUuUGFzc1Rocm91Z2g9YW59KSkuUmVhZGFibGUsaG49bG47bG4uY3Rvcj1kbixsbi5vYmo9ZnVuY3Rpb24odCxlKXsoImZ1bmN0aW9uIj09dHlwZW9mIHR8fEFycmF5LmlzQXJyYXkodCkpJiYoZT10LHQ9e30pO3JldHVybih0PWduKHQpKS5vYmplY3RNb2RlPSEwLHQuaGlnaFdhdGVyTWFyaz0xNixsbih0LGUpfTt2YXIgY249ZG4oKTtmdW5jdGlvbiBsbih0LGUpeygib2JqZWN0IiE9PXIodCl8fEFycmF5LmlzQXJyYXkodCkpJiYoZT10LHQ9e30pO3ZhciBuLGk9bmV3IGNuKHQpO3JldHVybiBpLl9mcm9tPUFycmF5LmlzQXJyYXkoZSk/KG49KG49ZSkuc2xpY2UoKSxmdW5jdGlvbih0LGUpe3ZhciByPW51bGwsaT1uLmxlbmd0aD9uLnNoaWZ0KCk6bnVsbDtpIGluc3RhbmNlb2YgRXJyb3ImJihyPWksaT1udWxsKSxlKHIsaSl9KTplfHxwbixpfWZ1bmN0aW9uIGRuKHQsZSl7ZnVuY3Rpb24gcihlKXtpZighKHRoaXMgaW5zdGFuY2VvZiByKSlyZXR1cm4gbmV3IHIoZSk7dGhpcy5fcmVhZGluZz0hMSx0aGlzLl9jYWxsYmFjaz1mdW5jdGlvbih0LGUpe2lmKG4uZGVzdHJveWVkKXJldHVybjtpZih0KXJldHVybiBuLmRlc3Ryb3kodCk7aWYobnVsbD09PWUpcmV0dXJuIG4ucHVzaChudWxsKTtuLl9yZWFkaW5nPSExLG4ucHVzaChlKSYmbi5fcmVhZChpKX0sdGhpcy5kZXN0cm95ZWQ9ITEsZm4uY2FsbCh0aGlzLGV8fHQpO3ZhciBuPXRoaXMsaT10aGlzLl9yZWFkYWJsZVN0YXRlLmhpZ2hXYXRlck1hcmt9cmV0dXJuImZ1bmN0aW9uIj09dHlwZW9mIHQmJihlPXQsdD17fSksdD1nbih0KSxYdChyLGZuKSxyLnByb3RvdHlwZS5fZnJvbT1lfHxwbixyLnByb3RvdHlwZS5fcmVhZD1mdW5jdGlvbih0KXt0aGlzLl9yZWFkaW5nfHx0aGlzLmRlc3Ryb3llZHx8KHRoaXMuX3JlYWRpbmc9ITAsdGhpcy5fZnJvbSh0LHRoaXMuX2NhbGxiYWNrKSl9LHIucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24odCl7aWYoIXRoaXMuZGVzdHJveWVkKXt0aGlzLmRlc3Ryb3llZD0hMDt2YXIgZT10aGlzO0MubmV4dFRpY2soKGZ1bmN0aW9uKCl7dCYmZS5lbWl0KCJlcnJvciIsdCksZS5lbWl0KCJjbG9zZSIpfSkpfX0scn1mdW5jdGlvbiBwbigpe31mdW5jdGlvbiBnbih0KXtyZXR1cm4gdD10fHx7fX12YXIgeW4sdm49MSxibj17fSx3bj0hMSxtbj1zLmRvY3VtZW50O2Z1bmN0aW9uIF9uKHQpeyJmdW5jdGlvbiIhPXR5cGVvZiB0JiYodD1uZXcgRnVuY3Rpb24oIiIrdCkpO2Zvcih2YXIgZT1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKSxyPTA7cjxlLmxlbmd0aDtyKyspZVtyXT1hcmd1bWVudHNbcisxXTt2YXIgbj17Y2FsbGJhY2s6dCxhcmdzOmV9O3JldHVybiBiblt2bl09bix5bih2biksdm4rK31mdW5jdGlvbiBTbih0KXtpZih3bilzZXRUaW1lb3V0KFNuLDAsdCk7ZWxzZXt2YXIgZT1iblt0XTtpZihlKXt3bj0hMDt0cnl7IWZ1bmN0aW9uKHQpe3ZhciBlPXQuY2FsbGJhY2sscj10LmFyZ3M7c3dpdGNoKHIubGVuZ3RoKXtjYXNlIDA6ZSgpO2JyZWFrO2Nhc2UgMTplKHJbMF0pO2JyZWFrO2Nhc2UgMjplKHJbMF0sclsxXSk7YnJlYWs7Y2FzZSAzOmUoclswXSxyWzFdLHJbMl0pO2JyZWFrO2RlZmF1bHQ6ZS5hcHBseSh2b2lkIDAscil9fShlKX1maW5hbGx5eyFmdW5jdGlvbih0KXtkZWxldGUgYm5bdF19KHQpLHduPSExfX19fXZhciBFbixrbixSbixqbix4bj1PYmplY3QuZ2V0UHJvdG90eXBlT2YmJk9iamVjdC5nZXRQcm90b3R5cGVPZihzKTtmdW5jdGlvbiBUbih0KXt2YXIgZSxyPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KTtpZihlPSJbb2JqZWN0IFByb21pc2VdIj09PXIpcmV0dXJuITA7aWYoIltvYmplY3QgRnVuY3Rpb25dIiE9PXIpcmV0dXJuITE7dHJ5e2U9ImZ1bmN0aW9uIiE9dHlwZW9mIHQuc3Vic2NyaWJlJiYiZnVuY3Rpb24iPT10eXBlb2YgdC50aGVufWNhdGNoKHQpe31yZXR1cm4gZX1mdW5jdGlvbiBPbih0KXt2YXIgcixuLGk7ZnVuY3Rpb24gbyhlKXsoKHQ9ZSlpbnN0YW5jZW9mIEFycmF5QnVmZmVyfHxBcnJheUJ1ZmZlci5pc1ZpZXcodCkmJiFodC5pc0J1ZmZlcih0KSkmJih0PWh0LmZyb20odCkpO3ZhciBvPSEocj1Ubih0KT90Om51bGwpJiZ0W1N5bWJvbC5pdGVyYXRvcl0mJiJzdHJpbmciIT10eXBlb2YgdCYmIWh0LmlzQnVmZmVyKHQpO249bz90W1N5bWJvbC5pdGVyYXRvcl0oKTpudWxsO3ZhciBhPSFyJiZ0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXTtpPWE/dFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTpudWxsfXJldHVybiBBcnJheS5pc0FycmF5KHQpJiYodD10LnNsaWNlKCkpLG8odCksaG4oKGZ1bmN0aW9uIHModSxmKXt2YXIgaD10aGlzO2lmKHIpZShhLm1hcmsoKGZ1bmN0aW9uIHQoKXtyZXR1cm4gYS53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDpyZXR1cm4gdC5wcmV2PTAsdC50MD1vLHQubmV4dD00LHI7Y2FzZSA0OnJldHVybiB0LnQxPXQuc2VudCx0Lm5leHQ9NywoMCx0LnQwKSh0LnQxKTtjYXNlIDc6cy5jYWxsKGgsdSxmKSx0Lm5leHQ9MTM7YnJlYWs7Y2FzZSAxMDp0LnByZXY9MTAsdC50Mj10LmNhdGNoKDApLGYodC50Mik7Y2FzZSAxMzpjYXNlImVuZCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQsbnVsbCxbWzAsMTBdXSl9KSkpKCk7ZWxzZSBpZihuKXt2YXIgYz1uLm5leHQoKTtfbihmLG51bGwsYy5kb25lP251bGw6Yy52YWx1ZSl9ZWxzZSBpZihpKWUoYS5tYXJrKChmdW5jdGlvbiB0KCl7dmFyIGU7cmV0dXJuIGEud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6cmV0dXJuIHQucHJldj0wLHQubmV4dD0zLGkubmV4dCgpO2Nhc2UgMzplPXQuc2VudCxfbihmLG51bGwsZS5kb25lP251bGw6ZS52YWx1ZSksdC5uZXh0PTEwO2JyZWFrO2Nhc2UgNzp0LnByZXY9Nyx0LnQwPXQuY2F0Y2goMCksX24oZix0LnQwKTtjYXNlIDEwOmNhc2UiZW5kIjpyZXR1cm4gdC5zdG9wKCl9fSksdCxudWxsLFtbMCw3XV0pfSkpKSgpO2Vsc2UgaWYoMCE9PXQubGVuZ3RoKXt2YXIgbD10LnNsaWNlKDAsdSk7dD10LnNsaWNlKHUpLF9uKGYsbnVsbCxsKX1lbHNlIF9uKGYsbnVsbCxudWxsKX0pKX14bj14biYmeG4uc2V0VGltZW91dD94bjpzLCJbb2JqZWN0IHByb2Nlc3NdIj09PXt9LnRvU3RyaW5nLmNhbGwocy5wcm9jZXNzKT95bj1mdW5jdGlvbih0KXtDLm5leHRUaWNrKChmdW5jdGlvbigpe1NuKHQpfSkpfTohZnVuY3Rpb24oKXtpZihzLnBvc3RNZXNzYWdlJiYhcy5pbXBvcnRTY3JpcHRzKXt2YXIgdD0hMCxlPXMub25tZXNzYWdlO3JldHVybiBzLm9ubWVzc2FnZT1mdW5jdGlvbigpe3Q9ITF9LHMucG9zdE1lc3NhZ2UoIiIsIioiKSxzLm9ubWVzc2FnZT1lLHR9fSgpP3MuTWVzc2FnZUNoYW5uZWw/KChrbj1uZXcgTWVzc2FnZUNoYW5uZWwpLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbih0KXtTbih0LmRhdGEpfSx5bj1mdW5jdGlvbih0KXtrbi5wb3J0Mi5wb3N0TWVzc2FnZSh0KX0pOm1uJiYib25yZWFkeXN0YXRlY2hhbmdlImluIG1uLmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpPyhFbj1tbi5kb2N1bWVudEVsZW1lbnQseW49ZnVuY3Rpb24odCl7dmFyIGU9bW4uY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7ZS5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtTbih0KSxlLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLEVuLnJlbW92ZUNoaWxkKGUpLGU9bnVsbH0sRW4uYXBwZW5kQ2hpbGQoZSl9KTp5bj1mdW5jdGlvbih0KXtzZXRUaW1lb3V0KFNuLDAsdCl9OihSbj0ic2V0SW1tZWRpYXRlJCIrTWF0aC5yYW5kb20oKSsiJCIsam49ZnVuY3Rpb24odCl7dC5zb3VyY2U9PT1zJiYic3RyaW5nIj09dHlwZW9mIHQuZGF0YSYmMD09PXQuZGF0YS5pbmRleE9mKFJuKSYmU24oK3QuZGF0YS5zbGljZShSbi5sZW5ndGgpKX0scy5hZGRFdmVudExpc3RlbmVyP3MuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsam4sITEpOnMuYXR0YWNoRXZlbnQoIm9ubWVzc2FnZSIsam4pLHluPWZ1bmN0aW9uKHQpe3MucG9zdE1lc3NhZ2UoUm4rdCwiKiIpfSksT24ub2JqZWN0PWZ1bmN0aW9uKHQpe3ZhciByLG4saTtmdW5jdGlvbiBvKGUpe3I9VG4odD1lKT90Om51bGwsbj0hciYmdFtTeW1ib2wuaXRlcmF0b3JdP3RbU3ltYm9sLml0ZXJhdG9yXSgpOm51bGwsaT0hciYmdFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0/dFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTpudWxsfXJldHVybiBBcnJheS5pc0FycmF5KHQpJiYodD10LnNsaWNlKCkpLG8odCksaG4ub2JqKChmdW5jdGlvbiBzKHUsZil7dmFyIGg9dGhpcztpZihyKWUoYS5tYXJrKChmdW5jdGlvbiB0KCl7cmV0dXJuIGEud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6cmV0dXJuIHQucHJldj0wLHQudDA9byx0Lm5leHQ9NCxyO2Nhc2UgNDpyZXR1cm4gdC50MT10LnNlbnQsdC5uZXh0PTcsKDAsdC50MCkodC50MSk7Y2FzZSA3OnMuY2FsbChoLHUsZiksdC5uZXh0PTEzO2JyZWFrO2Nhc2UgMTA6dC5wcmV2PTEwLHQudDI9dC5jYXRjaCgwKSxmKHQudDIpO2Nhc2UgMTM6Y2FzZSJlbmQiOnJldHVybiB0LnN0b3AoKX19KSx0LG51bGwsW1swLDEwXV0pfSkpKSgpO2Vsc2UgaWYobil7dmFyIGM9bi5uZXh0KCk7X24oZixudWxsLGMuZG9uZT9udWxsOmMudmFsdWUpfWVsc2UgaT9lKGEubWFyaygoZnVuY3Rpb24gdCgpe3ZhciBlO3JldHVybiBhLndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnJldHVybiB0LnByZXY9MCx0Lm5leHQ9MyxpLm5leHQoKTtjYXNlIDM6ZT10LnNlbnQsX24oZixudWxsLGUuZG9uZT9udWxsOmUudmFsdWUpLHQubmV4dD0xMDticmVhaztjYXNlIDc6dC5wcmV2PTcsdC50MD10LmNhdGNoKDApLF9uKGYsdC50MCk7Y2FzZSAxMDpjYXNlImVuZCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQsbnVsbCxbWzAsN11dKX0pKSkoKToodGhpcy5wdXNoKHQpLF9uKGYsbnVsbCxudWxsKSl9KSl9O3ZhciBBbj17fSxMbj1Bbi5MRUZUX0JSQUNFPTEsQ249QW4uUklHSFRfQlJBQ0U9MixNbj1Bbi5MRUZUX0JSQUNLRVQ9MyxQbj1Bbi5SSUdIVF9CUkFDS0VUPTQsQm49QW4uQ09MT049NSxObj1Bbi5DT01NQT02LFVuPUFuLlRSVUU9NyxEbj1Bbi5GQUxTRT04LEluPUFuLk5VTEw9OSxGbj1Bbi5TVFJJTkc9MTAscW49QW4uTlVNQkVSPTExLFduPUFuLlNUQVJUPTE3LHpuPUFuLlNUT1A9MTgsWW49QW4uVFJVRTE9MzMsJG49QW4uVFJVRTI9MzQsR249QW4uVFJVRTM9MzUsSG49QW4uRkFMU0UxPTQ5LEpuPUFuLkZBTFNFMj01MCxWbj1Bbi5GQUxTRTM9NTEsS249QW4uRkFMU0U0PTUyLFpuPUFuLk5VTEwxPTY1LFhuPUFuLk5VTEwyPTY2LFFuPUFuLk5VTEwzPTY3LHRpPUFuLk5VTUJFUjE9ODEsZWk9QW4uTlVNQkVSMz04MyxyaT1Bbi5TVFJJTkcxPTk3LG5pPUFuLlNUUklORzI9OTgsaWk9QW4uU1RSSU5HMz05OSxvaT1Bbi5TVFJJTkc0PTEwMCxhaT1Bbi5TVFJJTkc1PTEwMSxzaT1Bbi5TVFJJTkc2PTEwMix1aT1Bbi5WQUxVRT0xMTMsZmk9QW4uS0VZPTExNCxoaT1Bbi5PQkpFQ1Q9MTI5LGNpPUFuLkFSUkFZPTEzMCxsaT0iXFwiLmNoYXJDb2RlQXQoMCksZGk9Ii8iLmNoYXJDb2RlQXQoMCkscGk9IlxiIi5jaGFyQ29kZUF0KDApLGdpPSJcZiIuY2hhckNvZGVBdCgwKSx5aT0iXG4iLmNoYXJDb2RlQXQoMCksdmk9IlxyIi5jaGFyQ29kZUF0KDApLGJpPSJcdCIuY2hhckNvZGVBdCgwKTtmdW5jdGlvbiB3aSgpe3RoaXMudFN0YXRlPVduLHRoaXMudmFsdWU9dm9pZCAwLHRoaXMuc3RyaW5nPXZvaWQgMCx0aGlzLnN0cmluZ0J1ZmZlcj1odC5hbGxvYz9odC5hbGxvYyg2NTUzNik6bmV3IGh0KDY1NTM2KSx0aGlzLnN0cmluZ0J1ZmZlck9mZnNldD0wLHRoaXMudW5pY29kZT12b2lkIDAsdGhpcy5oaWdoU3Vycm9nYXRlPXZvaWQgMCx0aGlzLmtleT12b2lkIDAsdGhpcy5tb2RlPXZvaWQgMCx0aGlzLnN0YWNrPVtdLHRoaXMuc3RhdGU9dWksdGhpcy5ieXRlc19yZW1haW5pbmc9MCx0aGlzLmJ5dGVzX2luX3NlcXVlbmNlPTAsdGhpcy50ZW1wX2J1ZmZzPXsyOm5ldyBodCgyKSwzOm5ldyBodCgzKSw0Om5ldyBodCg0KX0sdGhpcy5vZmZzZXQ9LTF9d2kudG9rbmFtPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1PYmplY3Qua2V5cyhBbikscj0wLG49ZS5sZW5ndGg7cjxuO3IrKyl7dmFyIGk9ZVtyXTtpZihBbltpXT09PXQpcmV0dXJuIGl9cmV0dXJuIHQmJiIweCIrdC50b1N0cmluZygxNil9O3ZhciBtaT13aS5wcm90b3R5cGU7bWkub25FcnJvcj1mdW5jdGlvbih0KXt0aHJvdyB0fSxtaS5jaGFyRXJyb3I9ZnVuY3Rpb24odCxlKXt0aGlzLnRTdGF0ZT16bix0aGlzLm9uRXJyb3IobmV3IEVycm9yKCJVbmV4cGVjdGVkICIrSlNPTi5zdHJpbmdpZnkoU3RyaW5nLmZyb21DaGFyQ29kZSh0W2VdKSkrIiBhdCBwb3NpdGlvbiAiK2UrIiBpbiBzdGF0ZSAiK3dpLnRva25hbSh0aGlzLnRTdGF0ZSkpKX0sbWkuYXBwZW5kU3RyaW5nQ2hhcj1mdW5jdGlvbih0KXt0aGlzLnN0cmluZ0J1ZmZlck9mZnNldD49NjU1MzYmJih0aGlzLnN0cmluZys9dGhpcy5zdHJpbmdCdWZmZXIudG9TdHJpbmcoInV0ZjgiKSx0aGlzLnN0cmluZ0J1ZmZlck9mZnNldD0wKSx0aGlzLnN0cmluZ0J1ZmZlclt0aGlzLnN0cmluZ0J1ZmZlck9mZnNldCsrXT10fSxtaS5hcHBlbmRTdHJpbmdCdWY9ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXQubGVuZ3RoOyJudW1iZXIiPT10eXBlb2YgZSYmKG49Im51bWJlciI9PXR5cGVvZiByP3I8MD90Lmxlbmd0aC1lK3I6ci1lOnQubGVuZ3RoLWUpLG48MCYmKG49MCksdGhpcy5zdHJpbmdCdWZmZXJPZmZzZXQrbj42NTUzNiYmKHRoaXMuc3RyaW5nKz10aGlzLnN0cmluZ0J1ZmZlci50b1N0cmluZygidXRmOCIsMCx0aGlzLnN0cmluZ0J1ZmZlck9mZnNldCksdGhpcy5zdHJpbmdCdWZmZXJPZmZzZXQ9MCksdC5jb3B5KHRoaXMuc3RyaW5nQnVmZmVyLHRoaXMuc3RyaW5nQnVmZmVyT2Zmc2V0LGUsciksdGhpcy5zdHJpbmdCdWZmZXJPZmZzZXQrPW59LG1pLndyaXRlPWZ1bmN0aW9uKHQpe3ZhciBlOyJzdHJpbmciPT10eXBlb2YgdCYmKHQ9bmV3IGh0KHQpKTtmb3IodmFyIHI9MCxuPXQubGVuZ3RoO3I8bjtyKyspaWYodGhpcy50U3RhdGU9PT1Xbil7aWYoZT10W3JdLHRoaXMub2Zmc2V0KyssMTIzPT09ZSl0aGlzLm9uVG9rZW4oTG4sInsiKTtlbHNlIGlmKDEyNT09PWUpdGhpcy5vblRva2VuKENuLCJ9Iik7ZWxzZSBpZig5MT09PWUpdGhpcy5vblRva2VuKE1uLCJbIik7ZWxzZSBpZig5Mz09PWUpdGhpcy5vblRva2VuKFBuLCJdIik7ZWxzZSBpZig1OD09PWUpdGhpcy5vblRva2VuKEJuLCI6Iik7ZWxzZSBpZig0ND09PWUpdGhpcy5vblRva2VuKE5uLCIsIik7ZWxzZSBpZigxMTY9PT1lKXRoaXMudFN0YXRlPVluO2Vsc2UgaWYoMTAyPT09ZSl0aGlzLnRTdGF0ZT1IbjtlbHNlIGlmKDExMD09PWUpdGhpcy50U3RhdGU9Wm47ZWxzZSBpZigzND09PWUpdGhpcy5zdHJpbmc9IiIsdGhpcy5zdHJpbmdCdWZmZXJPZmZzZXQ9MCx0aGlzLnRTdGF0ZT1yaTtlbHNlIGlmKDQ1PT09ZSl0aGlzLnN0cmluZz0iLSIsdGhpcy50U3RhdGU9dGk7ZWxzZSBpZihlPj00OCYmZTw2NCl0aGlzLnN0cmluZz1TdHJpbmcuZnJvbUNoYXJDb2RlKGUpLHRoaXMudFN0YXRlPWVpO2Vsc2UgaWYoMzIhPT1lJiY5IT09ZSYmMTAhPT1lJiYxMyE9PWUpcmV0dXJuIHRoaXMuY2hhckVycm9yKHQscil9ZWxzZSBpZih0aGlzLnRTdGF0ZT09PXJpKWlmKGU9dFtyXSx0aGlzLmJ5dGVzX3JlbWFpbmluZz4wKXtmb3IodmFyIGk9MDtpPHRoaXMuYnl0ZXNfcmVtYWluaW5nO2krKyl0aGlzLnRlbXBfYnVmZnNbdGhpcy5ieXRlc19pbl9zZXF1ZW5jZV1bdGhpcy5ieXRlc19pbl9zZXF1ZW5jZS10aGlzLmJ5dGVzX3JlbWFpbmluZytpXT10W2ldO3RoaXMuYXBwZW5kU3RyaW5nQnVmKHRoaXMudGVtcF9idWZmc1t0aGlzLmJ5dGVzX2luX3NlcXVlbmNlXSksdGhpcy5ieXRlc19pbl9zZXF1ZW5jZT10aGlzLmJ5dGVzX3JlbWFpbmluZz0wLHI9citpLTF9ZWxzZSBpZigwPT09dGhpcy5ieXRlc19yZW1haW5pbmcmJmU+PTEyOCl7aWYoZTw9MTkzfHxlPjI0NClyZXR1cm4gdGhpcy5vbkVycm9yKG5ldyBFcnJvcigiSW52YWxpZCBVVEYtOCBjaGFyYWN0ZXIgYXQgcG9zaXRpb24gIityKyIgaW4gc3RhdGUgIit3aS50b2tuYW0odGhpcy50U3RhdGUpKSk7aWYoZT49MTk0JiZlPD0yMjMmJih0aGlzLmJ5dGVzX2luX3NlcXVlbmNlPTIpLGU+PTIyNCYmZTw9MjM5JiYodGhpcy5ieXRlc19pbl9zZXF1ZW5jZT0zKSxlPj0yNDAmJmU8PTI0NCYmKHRoaXMuYnl0ZXNfaW5fc2VxdWVuY2U9NCksdGhpcy5ieXRlc19pbl9zZXF1ZW5jZStyPnQubGVuZ3RoKXtmb3IodmFyIG89MDtvPD10Lmxlbmd0aC0xLXI7bysrKXRoaXMudGVtcF9idWZmc1t0aGlzLmJ5dGVzX2luX3NlcXVlbmNlXVtvXT10W3Irb107dGhpcy5ieXRlc19yZW1haW5pbmc9cit0aGlzLmJ5dGVzX2luX3NlcXVlbmNlLXQubGVuZ3RoLHI9dC5sZW5ndGgtMX1lbHNlIHRoaXMuYXBwZW5kU3RyaW5nQnVmKHQscixyK3RoaXMuYnl0ZXNfaW5fc2VxdWVuY2UpLHI9cit0aGlzLmJ5dGVzX2luX3NlcXVlbmNlLTF9ZWxzZSBpZigzND09PWUpdGhpcy50U3RhdGU9V24sdGhpcy5zdHJpbmcrPXRoaXMuc3RyaW5nQnVmZmVyLnRvU3RyaW5nKCJ1dGY4IiwwLHRoaXMuc3RyaW5nQnVmZmVyT2Zmc2V0KSx0aGlzLnN0cmluZ0J1ZmZlck9mZnNldD0wLHRoaXMub25Ub2tlbihGbix0aGlzLnN0cmluZyksdGhpcy5vZmZzZXQrPWh0LmJ5dGVMZW5ndGgodGhpcy5zdHJpbmcsInV0ZjgiKSsxLHRoaXMuc3RyaW5nPXZvaWQgMDtlbHNlIGlmKDkyPT09ZSl0aGlzLnRTdGF0ZT1uaTtlbHNle2lmKCEoZT49MzIpKXJldHVybiB0aGlzLmNoYXJFcnJvcih0LHIpO3RoaXMuYXBwZW5kU3RyaW5nQ2hhcihlKX1lbHNlIGlmKHRoaXMudFN0YXRlPT09bmkpaWYoMzQ9PT0oZT10W3JdKSl0aGlzLmFwcGVuZFN0cmluZ0NoYXIoZSksdGhpcy50U3RhdGU9cmk7ZWxzZSBpZig5Mj09PWUpdGhpcy5hcHBlbmRTdHJpbmdDaGFyKGxpKSx0aGlzLnRTdGF0ZT1yaTtlbHNlIGlmKDQ3PT09ZSl0aGlzLmFwcGVuZFN0cmluZ0NoYXIoZGkpLHRoaXMudFN0YXRlPXJpO2Vsc2UgaWYoOTg9PT1lKXRoaXMuYXBwZW5kU3RyaW5nQ2hhcihwaSksdGhpcy50U3RhdGU9cmk7ZWxzZSBpZigxMDI9PT1lKXRoaXMuYXBwZW5kU3RyaW5nQ2hhcihnaSksdGhpcy50U3RhdGU9cmk7ZWxzZSBpZigxMTA9PT1lKXRoaXMuYXBwZW5kU3RyaW5nQ2hhcih5aSksdGhpcy50U3RhdGU9cmk7ZWxzZSBpZigxMTQ9PT1lKXRoaXMuYXBwZW5kU3RyaW5nQ2hhcih2aSksdGhpcy50U3RhdGU9cmk7ZWxzZSBpZigxMTY9PT1lKXRoaXMuYXBwZW5kU3RyaW5nQ2hhcihiaSksdGhpcy50U3RhdGU9cmk7ZWxzZXtpZigxMTchPT1lKXJldHVybiB0aGlzLmNoYXJFcnJvcih0LHIpO3RoaXMudW5pY29kZT0iIix0aGlzLnRTdGF0ZT1paX1lbHNlIGlmKHRoaXMudFN0YXRlPT09aWl8fHRoaXMudFN0YXRlPT09b2l8fHRoaXMudFN0YXRlPT09YWl8fHRoaXMudFN0YXRlPT09c2kpe2lmKCEoKGU9dFtyXSk+PTQ4JiZlPDY0fHxlPjY0JiZlPD03MHx8ZT45NiYmZTw9MTAyKSlyZXR1cm4gdGhpcy5jaGFyRXJyb3IodCxyKTtpZih0aGlzLnVuaWNvZGUrPVN0cmluZy5mcm9tQ2hhckNvZGUoZSksdGhpcy50U3RhdGUrKz09PXNpKXt2YXIgYT1wYXJzZUludCh0aGlzLnVuaWNvZGUsMTYpO3RoaXMudW5pY29kZT12b2lkIDAsdm9pZCAwIT09dGhpcy5oaWdoU3Vycm9nYXRlJiZhPj01NjMyMCYmYTw1NzM0ND8odGhpcy5hcHBlbmRTdHJpbmdCdWYobmV3IGh0KFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5oaWdoU3Vycm9nYXRlLGEpKSksdGhpcy5oaWdoU3Vycm9nYXRlPXZvaWQgMCk6dm9pZCAwPT09dGhpcy5oaWdoU3Vycm9nYXRlJiZhPj01NTI5NiYmYTw1NjMyMD90aGlzLmhpZ2hTdXJyb2dhdGU9YToodm9pZCAwIT09dGhpcy5oaWdoU3Vycm9nYXRlJiYodGhpcy5hcHBlbmRTdHJpbmdCdWYobmV3IGh0KFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5oaWdoU3Vycm9nYXRlKSkpLHRoaXMuaGlnaFN1cnJvZ2F0ZT12b2lkIDApLHRoaXMuYXBwZW5kU3RyaW5nQnVmKG5ldyBodChTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKSkpLHRoaXMudFN0YXRlPXJpfX1lbHNlIGlmKHRoaXMudFN0YXRlPT09dGl8fHRoaXMudFN0YXRlPT09ZWkpc3dpdGNoKGU9dFtyXSl7Y2FzZSA0ODpjYXNlIDQ5OmNhc2UgNTA6Y2FzZSA1MTpjYXNlIDUyOmNhc2UgNTM6Y2FzZSA1NDpjYXNlIDU1OmNhc2UgNTY6Y2FzZSA1NzpjYXNlIDQ2OmNhc2UgMTAxOmNhc2UgNjk6Y2FzZSA0MzpjYXNlIDQ1OnRoaXMuc3RyaW5nKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGUpLHRoaXMudFN0YXRlPWVpO2JyZWFrO2RlZmF1bHQ6dGhpcy50U3RhdGU9V247dmFyIHM9TnVtYmVyKHRoaXMuc3RyaW5nKTtpZihpc05hTihzKSlyZXR1cm4gdGhpcy5jaGFyRXJyb3IodCxyKTt0aGlzLnN0cmluZy5tYXRjaCgvWzAtOV0rLyk9PXRoaXMuc3RyaW5nJiZzLnRvU3RyaW5nKCkhPXRoaXMuc3RyaW5nP3RoaXMub25Ub2tlbihGbix0aGlzLnN0cmluZyk6dGhpcy5vblRva2VuKHFuLHMpLHRoaXMub2Zmc2V0Kz10aGlzLnN0cmluZy5sZW5ndGgtMSx0aGlzLnN0cmluZz12b2lkIDAsci0tfWVsc2UgaWYodGhpcy50U3RhdGU9PT1Zbil7aWYoMTE0IT09dFtyXSlyZXR1cm4gdGhpcy5jaGFyRXJyb3IodCxyKTt0aGlzLnRTdGF0ZT0kbn1lbHNlIGlmKHRoaXMudFN0YXRlPT09JG4pe2lmKDExNyE9PXRbcl0pcmV0dXJuIHRoaXMuY2hhckVycm9yKHQscik7dGhpcy50U3RhdGU9R259ZWxzZSBpZih0aGlzLnRTdGF0ZT09PUduKXtpZigxMDEhPT10W3JdKXJldHVybiB0aGlzLmNoYXJFcnJvcih0LHIpO3RoaXMudFN0YXRlPVduLHRoaXMub25Ub2tlbihVbiwhMCksdGhpcy5vZmZzZXQrPTN9ZWxzZSBpZih0aGlzLnRTdGF0ZT09PUhuKXtpZig5NyE9PXRbcl0pcmV0dXJuIHRoaXMuY2hhckVycm9yKHQscik7dGhpcy50U3RhdGU9Sm59ZWxzZSBpZih0aGlzLnRTdGF0ZT09PUpuKXtpZigxMDghPT10W3JdKXJldHVybiB0aGlzLmNoYXJFcnJvcih0LHIpO3RoaXMudFN0YXRlPVZufWVsc2UgaWYodGhpcy50U3RhdGU9PT1Wbil7aWYoMTE1IT09dFtyXSlyZXR1cm4gdGhpcy5jaGFyRXJyb3IodCxyKTt0aGlzLnRTdGF0ZT1Lbn1lbHNlIGlmKHRoaXMudFN0YXRlPT09S24pe2lmKDEwMSE9PXRbcl0pcmV0dXJuIHRoaXMuY2hhckVycm9yKHQscik7dGhpcy50U3RhdGU9V24sdGhpcy5vblRva2VuKERuLCExKSx0aGlzLm9mZnNldCs9NH1lbHNlIGlmKHRoaXMudFN0YXRlPT09Wm4pe2lmKDExNyE9PXRbcl0pcmV0dXJuIHRoaXMuY2hhckVycm9yKHQscik7dGhpcy50U3RhdGU9WG59ZWxzZSBpZih0aGlzLnRTdGF0ZT09PVhuKXtpZigxMDghPT10W3JdKXJldHVybiB0aGlzLmNoYXJFcnJvcih0LHIpO3RoaXMudFN0YXRlPVFufWVsc2UgaWYodGhpcy50U3RhdGU9PT1Rbil7aWYoMTA4IT09dFtyXSlyZXR1cm4gdGhpcy5jaGFyRXJyb3IodCxyKTt0aGlzLnRTdGF0ZT1Xbix0aGlzLm9uVG9rZW4oSW4sbnVsbCksdGhpcy5vZmZzZXQrPTN9fSxtaS5vblRva2VuPWZ1bmN0aW9uKHQsZSl7fSxtaS5wYXJzZUVycm9yPWZ1bmN0aW9uKHQsZSl7dGhpcy50U3RhdGU9em4sdGhpcy5vbkVycm9yKG5ldyBFcnJvcigiVW5leHBlY3RlZCAiK3dpLnRva25hbSh0KSsoZT8iKCIrSlNPTi5zdHJpbmdpZnkoZSkrIikiOiIiKSsiIGluIHN0YXRlICIrd2kudG9rbmFtKHRoaXMuc3RhdGUpKSl9LG1pLnB1c2g9ZnVuY3Rpb24oKXt0aGlzLnN0YWNrLnB1c2goe3ZhbHVlOnRoaXMudmFsdWUsa2V5OnRoaXMua2V5LG1vZGU6dGhpcy5tb2RlfSl9LG1pLnBvcD1mdW5jdGlvbigpe3ZhciB0PXRoaXMudmFsdWUsZT10aGlzLnN0YWNrLnBvcCgpO3RoaXMudmFsdWU9ZS52YWx1ZSx0aGlzLmtleT1lLmtleSx0aGlzLm1vZGU9ZS5tb2RlLHRoaXMuZW1pdCh0KSx0aGlzLm1vZGV8fCh0aGlzLnN0YXRlPXVpKX0sbWkuZW1pdD1mdW5jdGlvbih0KXt0aGlzLm1vZGUmJih0aGlzLnN0YXRlPU5uKSx0aGlzLm9uVmFsdWUodCl9LG1pLm9uVmFsdWU9ZnVuY3Rpb24odCl7fSxtaS5vblRva2VuPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5zdGF0ZT09PXVpKWlmKHQ9PT1Gbnx8dD09PXFufHx0PT09VW58fHQ9PT1Ebnx8dD09PUluKXRoaXMudmFsdWUmJih0aGlzLnZhbHVlW3RoaXMua2V5XT1lKSx0aGlzLmVtaXQoZSk7ZWxzZSBpZih0PT09TG4pdGhpcy5wdXNoKCksdGhpcy52YWx1ZT90aGlzLnZhbHVlPXRoaXMudmFsdWVbdGhpcy5rZXldPXt9OnRoaXMudmFsdWU9e30sdGhpcy5rZXk9dm9pZCAwLHRoaXMuc3RhdGU9ZmksdGhpcy5tb2RlPWhpO2Vsc2UgaWYodD09PU1uKXRoaXMucHVzaCgpLHRoaXMudmFsdWU/dGhpcy52YWx1ZT10aGlzLnZhbHVlW3RoaXMua2V5XT1bXTp0aGlzLnZhbHVlPVtdLHRoaXMua2V5PTAsdGhpcy5tb2RlPWNpLHRoaXMuc3RhdGU9dWk7ZWxzZSBpZih0PT09Q24pe2lmKHRoaXMubW9kZSE9PWhpKXJldHVybiB0aGlzLnBhcnNlRXJyb3IodCxlKTt0aGlzLnBvcCgpfWVsc2V7aWYodCE9PVBuKXJldHVybiB0aGlzLnBhcnNlRXJyb3IodCxlKTtpZih0aGlzLm1vZGUhPT1jaSlyZXR1cm4gdGhpcy5wYXJzZUVycm9yKHQsZSk7dGhpcy5wb3AoKX1lbHNlIGlmKHRoaXMuc3RhdGU9PT1maSlpZih0PT09Rm4pdGhpcy5rZXk9ZSx0aGlzLnN0YXRlPUJuO2Vsc2V7aWYodCE9PUNuKXJldHVybiB0aGlzLnBhcnNlRXJyb3IodCxlKTt0aGlzLnBvcCgpfWVsc2UgaWYodGhpcy5zdGF0ZT09PUJuKXtpZih0IT09Qm4pcmV0dXJuIHRoaXMucGFyc2VFcnJvcih0LGUpO3RoaXMuc3RhdGU9dWl9ZWxzZXtpZih0aGlzLnN0YXRlIT09Tm4pcmV0dXJuIHRoaXMucGFyc2VFcnJvcih0LGUpO2lmKHQ9PT1Obil0aGlzLm1vZGU9PT1jaT8odGhpcy5rZXkrKyx0aGlzLnN0YXRlPXVpKTp0aGlzLm1vZGU9PT1oaSYmKHRoaXMuc3RhdGU9ZmkpO2Vsc2V7aWYoISh0PT09UG4mJnRoaXMubW9kZT09PWNpfHx0PT09Q24mJnRoaXMubW9kZT09PWhpKSlyZXR1cm4gdGhpcy5wYXJzZUVycm9yKHQsZSk7dGhpcy5wb3AoKX19fSx3aS5DPUFuO3ZhciBfaT13aTtmdW5jdGlvbiBTaSgpe3RoaXMuaGVhZD1udWxsLHRoaXMudGFpbD1udWxsLHRoaXMubGVuZ3RoPTB9U2kucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24odCl7dmFyIGU9e2RhdGE6dCxuZXh0Om51bGx9O3RoaXMubGVuZ3RoPjA/dGhpcy50YWlsLm5leHQ9ZTp0aGlzLmhlYWQ9ZSx0aGlzLnRhaWw9ZSwrK3RoaXMubGVuZ3RofSxTaS5wcm90b3R5cGUudW5zaGlmdD1mdW5jdGlvbih0KXt2YXIgZT17ZGF0YTp0LG5leHQ6dGhpcy5oZWFkfTswPT09dGhpcy5sZW5ndGgmJih0aGlzLnRhaWw9ZSksdGhpcy5oZWFkPWUsKyt0aGlzLmxlbmd0aH0sU2kucHJvdG90eXBlLnNoaWZ0PWZ1bmN0aW9uKCl7aWYoMCE9PXRoaXMubGVuZ3RoKXt2YXIgdD10aGlzLmhlYWQuZGF0YTtyZXR1cm4gMT09PXRoaXMubGVuZ3RoP3RoaXMuaGVhZD10aGlzLnRhaWw9bnVsbDp0aGlzLmhlYWQ9dGhpcy5oZWFkLm5leHQsLS10aGlzLmxlbmd0aCx0fX0sU2kucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5oZWFkPXRoaXMudGFpbD1udWxsLHRoaXMubGVuZ3RoPTB9LFNpLnByb3RvdHlwZS5qb2luPWZ1bmN0aW9uKHQpe2lmKDA9PT10aGlzLmxlbmd0aClyZXR1cm4iIjtmb3IodmFyIGU9dGhpcy5oZWFkLHI9IiIrZS5kYXRhO2U9ZS5uZXh0OylyKz10K2UuZGF0YTtyZXR1cm4gcn0sU2kucHJvdG90eXBlLmNvbmNhdD1mdW5jdGlvbih0KXtpZigwPT09dGhpcy5sZW5ndGgpcmV0dXJuIGh0LmFsbG9jKDApO2lmKDE9PT10aGlzLmxlbmd0aClyZXR1cm4gdGhpcy5oZWFkLmRhdGE7Zm9yKHZhciBlPWh0LmFsbG9jVW5zYWZlKHQ+Pj4wKSxyPXRoaXMuaGVhZCxuPTA7cjspci5kYXRhLmNvcHkoZSxuKSxuKz1yLmRhdGEubGVuZ3RoLHI9ci5uZXh0O3JldHVybiBlfTt2YXIgRWk9aHQuaXNFbmNvZGluZ3x8ZnVuY3Rpb24odCl7c3dpdGNoKHQmJnQudG9Mb3dlckNhc2UoKSl7Y2FzZSJoZXgiOmNhc2UidXRmOCI6Y2FzZSJ1dGYtOCI6Y2FzZSJhc2NpaSI6Y2FzZSJiaW5hcnkiOmNhc2UiYmFzZTY0IjpjYXNlInVjczIiOmNhc2UidWNzLTIiOmNhc2UidXRmMTZsZSI6Y2FzZSJ1dGYtMTZsZSI6Y2FzZSJyYXciOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fTtmdW5jdGlvbiBraSh0KXtzd2l0Y2godGhpcy5lbmNvZGluZz0odHx8InV0ZjgiKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX10vLCIiKSxmdW5jdGlvbih0KXtpZih0JiYhRWkodCkpdGhyb3cgbmV3IEVycm9yKCJVbmtub3duIGVuY29kaW5nOiAiK3QpfSh0KSx0aGlzLmVuY29kaW5nKXtjYXNlInV0ZjgiOnRoaXMuc3Vycm9nYXRlU2l6ZT0zO2JyZWFrO2Nhc2UidWNzMiI6Y2FzZSJ1dGYxNmxlIjp0aGlzLnN1cnJvZ2F0ZVNpemU9Mix0aGlzLmRldGVjdEluY29tcGxldGVDaGFyPWppO2JyZWFrO2Nhc2UiYmFzZTY0Ijp0aGlzLnN1cnJvZ2F0ZVNpemU9Myx0aGlzLmRldGVjdEluY29tcGxldGVDaGFyPXhpO2JyZWFrO2RlZmF1bHQ6cmV0dXJuIHZvaWQodGhpcy53cml0ZT1SaSl9dGhpcy5jaGFyQnVmZmVyPW5ldyBodCg2KSx0aGlzLmNoYXJSZWNlaXZlZD0wLHRoaXMuY2hhckxlbmd0aD0wfWZ1bmN0aW9uIFJpKHQpe3JldHVybiB0LnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpfWZ1bmN0aW9uIGppKHQpe3RoaXMuY2hhclJlY2VpdmVkPXQubGVuZ3RoJTIsdGhpcy5jaGFyTGVuZ3RoPXRoaXMuY2hhclJlY2VpdmVkPzI6MH1mdW5jdGlvbiB4aSh0KXt0aGlzLmNoYXJSZWNlaXZlZD10Lmxlbmd0aCUzLHRoaXMuY2hhckxlbmd0aD10aGlzLmNoYXJSZWNlaXZlZD8zOjB9a2kucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0iIjt0aGlzLmNoYXJMZW5ndGg7KXt2YXIgcj10Lmxlbmd0aD49dGhpcy5jaGFyTGVuZ3RoLXRoaXMuY2hhclJlY2VpdmVkP3RoaXMuY2hhckxlbmd0aC10aGlzLmNoYXJSZWNlaXZlZDp0Lmxlbmd0aDtpZih0LmNvcHkodGhpcy5jaGFyQnVmZmVyLHRoaXMuY2hhclJlY2VpdmVkLDAsciksdGhpcy5jaGFyUmVjZWl2ZWQrPXIsdGhpcy5jaGFyUmVjZWl2ZWQ8dGhpcy5jaGFyTGVuZ3RoKXJldHVybiIiO2lmKHQ9dC5zbGljZShyLHQubGVuZ3RoKSwhKChpPShlPXRoaXMuY2hhckJ1ZmZlci5zbGljZSgwLHRoaXMuY2hhckxlbmd0aCkudG9TdHJpbmcodGhpcy5lbmNvZGluZykpLmNoYXJDb2RlQXQoZS5sZW5ndGgtMSkpPj01NTI5NiYmaTw9NTYzMTkpKXtpZih0aGlzLmNoYXJSZWNlaXZlZD10aGlzLmNoYXJMZW5ndGg9MCwwPT09dC5sZW5ndGgpcmV0dXJuIGU7YnJlYWt9dGhpcy5jaGFyTGVuZ3RoKz10aGlzLnN1cnJvZ2F0ZVNpemUsZT0iIn10aGlzLmRldGVjdEluY29tcGxldGVDaGFyKHQpO3ZhciBuPXQubGVuZ3RoO3RoaXMuY2hhckxlbmd0aCYmKHQuY29weSh0aGlzLmNoYXJCdWZmZXIsMCx0Lmxlbmd0aC10aGlzLmNoYXJSZWNlaXZlZCxuKSxuLT10aGlzLmNoYXJSZWNlaXZlZCk7dmFyIGk7bj0oZSs9dC50b1N0cmluZyh0aGlzLmVuY29kaW5nLDAsbikpLmxlbmd0aC0xO2lmKChpPWUuY2hhckNvZGVBdChuKSk+PTU1Mjk2JiZpPD01NjMxOSl7dmFyIG89dGhpcy5zdXJyb2dhdGVTaXplO3JldHVybiB0aGlzLmNoYXJMZW5ndGgrPW8sdGhpcy5jaGFyUmVjZWl2ZWQrPW8sdGhpcy5jaGFyQnVmZmVyLmNvcHkodGhpcy5jaGFyQnVmZmVyLG8sMCxvKSx0LmNvcHkodGhpcy5jaGFyQnVmZmVyLDAsMCxvKSxlLnN1YnN0cmluZygwLG4pfXJldHVybiBlfSxraS5wcm90b3R5cGUuZGV0ZWN0SW5jb21wbGV0ZUNoYXI9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQubGVuZ3RoPj0zPzM6dC5sZW5ndGg7ZT4wO2UtLSl7dmFyIHI9dFt0Lmxlbmd0aC1lXTtpZigxPT1lJiZyPj41PT02KXt0aGlzLmNoYXJMZW5ndGg9MjticmVha31pZihlPD0yJiZyPj40PT0xNCl7dGhpcy5jaGFyTGVuZ3RoPTM7YnJlYWt9aWYoZTw9MyYmcj4+Mz09MzApe3RoaXMuY2hhckxlbmd0aD00O2JyZWFrfX10aGlzLmNoYXJSZWNlaXZlZD1lfSxraS5wcm90b3R5cGUuZW5kPWZ1bmN0aW9uKHQpe3ZhciBlPSIiO2lmKHQmJnQubGVuZ3RoJiYoZT10aGlzLndyaXRlKHQpKSx0aGlzLmNoYXJSZWNlaXZlZCl7dmFyIHI9dGhpcy5jaGFyUmVjZWl2ZWQsbj10aGlzLmNoYXJCdWZmZXIsaT10aGlzLmVuY29kaW5nO2UrPW4uc2xpY2UoMCxyKS50b1N0cmluZyhpKX1yZXR1cm4gZX0sQWkuUmVhZGFibGVTdGF0ZT1PaTt2YXIgVGk9b2UoInN0cmVhbSIpO2Z1bmN0aW9uIE9pKHQsZSl7dD10fHx7fSx0aGlzLm9iamVjdE1vZGU9ISF0Lm9iamVjdE1vZGUsZSBpbnN0YW5jZW9mIG5vJiYodGhpcy5vYmplY3RNb2RlPXRoaXMub2JqZWN0TW9kZXx8ISF0LnJlYWRhYmxlT2JqZWN0TW9kZSk7dmFyIHI9dC5oaWdoV2F0ZXJNYXJrLG49dGhpcy5vYmplY3RNb2RlPzE2OjE2Mzg0O3RoaXMuaGlnaFdhdGVyTWFyaz1yfHwwPT09cj9yOm4sdGhpcy5oaWdoV2F0ZXJNYXJrPX5+dGhpcy5oaWdoV2F0ZXJNYXJrLHRoaXMuYnVmZmVyPW5ldyBTaSx0aGlzLmxlbmd0aD0wLHRoaXMucGlwZXM9bnVsbCx0aGlzLnBpcGVzQ291bnQ9MCx0aGlzLmZsb3dpbmc9bnVsbCx0aGlzLmVuZGVkPSExLHRoaXMuZW5kRW1pdHRlZD0hMSx0aGlzLnJlYWRpbmc9ITEsdGhpcy5zeW5jPSEwLHRoaXMubmVlZFJlYWRhYmxlPSExLHRoaXMuZW1pdHRlZFJlYWRhYmxlPSExLHRoaXMucmVhZGFibGVMaXN0ZW5pbmc9ITEsdGhpcy5yZXN1bWVTY2hlZHVsZWQ9ITEsdGhpcy5kZWZhdWx0RW5jb2Rpbmc9dC5kZWZhdWx0RW5jb2Rpbmd8fCJ1dGY4Iix0aGlzLnJhbk91dD0hMSx0aGlzLmF3YWl0RHJhaW49MCx0aGlzLnJlYWRpbmdNb3JlPSExLHRoaXMuZGVjb2Rlcj1udWxsLHRoaXMuZW5jb2Rpbmc9bnVsbCx0LmVuY29kaW5nJiYodGhpcy5kZWNvZGVyPW5ldyBraSh0LmVuY29kaW5nKSx0aGlzLmVuY29kaW5nPXQuZW5jb2RpbmcpfWZ1bmN0aW9uIEFpKHQpe2lmKCEodGhpcyBpbnN0YW5jZW9mIEFpKSlyZXR1cm4gbmV3IEFpKHQpO3RoaXMuX3JlYWRhYmxlU3RhdGU9bmV3IE9pKHQsdGhpcyksdGhpcy5yZWFkYWJsZT0hMCx0JiYiZnVuY3Rpb24iPT10eXBlb2YgdC5yZWFkJiYodGhpcy5fcmVhZD10LnJlYWQpLFUuY2FsbCh0aGlzKX1mdW5jdGlvbiBMaSh0LGUscixuLGkpe3ZhciBvPWZ1bmN0aW9uKHQsZSl7dmFyIHI9bnVsbDtodC5pc0J1ZmZlcihlKXx8InN0cmluZyI9PXR5cGVvZiBlfHxudWxsPT1lfHx0Lm9iamVjdE1vZGV8fChyPW5ldyBUeXBlRXJyb3IoIkludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsiKSk7cmV0dXJuIHJ9KGUscik7aWYobyl0LmVtaXQoImVycm9yIixvKTtlbHNlIGlmKG51bGw9PT1yKWUucmVhZGluZz0hMSxmdW5jdGlvbih0LGUpe2lmKGUuZW5kZWQpcmV0dXJuO2lmKGUuZGVjb2Rlcil7dmFyIHI9ZS5kZWNvZGVyLmVuZCgpO3ImJnIubGVuZ3RoJiYoZS5idWZmZXIucHVzaChyKSxlLmxlbmd0aCs9ZS5vYmplY3RNb2RlPzE6ci5sZW5ndGgpfWUuZW5kZWQ9ITAsTWkodCl9KHQsZSk7ZWxzZSBpZihlLm9iamVjdE1vZGV8fHImJnIubGVuZ3RoPjApaWYoZS5lbmRlZCYmIWkpe3ZhciBhPW5ldyBFcnJvcigic3RyZWFtLnB1c2goKSBhZnRlciBFT0YiKTt0LmVtaXQoImVycm9yIixhKX1lbHNlIGlmKGUuZW5kRW1pdHRlZCYmaSl7dmFyIHM9bmV3IEVycm9yKCJzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudCIpO3QuZW1pdCgiZXJyb3IiLHMpfWVsc2V7dmFyIHU7IWUuZGVjb2Rlcnx8aXx8bnx8KHI9ZS5kZWNvZGVyLndyaXRlKHIpLHU9IWUub2JqZWN0TW9kZSYmMD09PXIubGVuZ3RoKSxpfHwoZS5yZWFkaW5nPSExKSx1fHwoZS5mbG93aW5nJiYwPT09ZS5sZW5ndGgmJiFlLnN5bmM/KHQuZW1pdCgiZGF0YSIsciksdC5yZWFkKDApKTooZS5sZW5ndGgrPWUub2JqZWN0TW9kZT8xOnIubGVuZ3RoLGk/ZS5idWZmZXIudW5zaGlmdChyKTplLmJ1ZmZlci5wdXNoKHIpLGUubmVlZFJlYWRhYmxlJiZNaSh0KSkpLGZ1bmN0aW9uKHQsZSl7ZS5yZWFkaW5nTW9yZXx8KGUucmVhZGluZ01vcmU9ITAsdyhCaSx0LGUpKX0odCxlKX1lbHNlIGl8fChlLnJlYWRpbmc9ITEpO3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4hdC5lbmRlZCYmKHQubmVlZFJlYWRhYmxlfHx0Lmxlbmd0aDx0LmhpZ2hXYXRlck1hcmt8fDA9PT10Lmxlbmd0aCl9KGUpfVF0KEFpLFUpLEFpLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKHQsZSl7dmFyIHI9dGhpcy5fcmVhZGFibGVTdGF0ZTtyZXR1cm4gci5vYmplY3RNb2RlfHwic3RyaW5nIiE9dHlwZW9mIHR8fChlPWV8fHIuZGVmYXVsdEVuY29kaW5nKSE9PXIuZW5jb2RpbmcmJih0PWh0LmZyb20odCxlKSxlPSIiKSxMaSh0aGlzLHIsdCxlLCExKX0sQWkucHJvdG90eXBlLnVuc2hpZnQ9ZnVuY3Rpb24odCl7cmV0dXJuIExpKHRoaXMsdGhpcy5fcmVhZGFibGVTdGF0ZSx0LCIiLCEwKX0sQWkucHJvdG90eXBlLmlzUGF1c2VkPWZ1bmN0aW9uKCl7cmV0dXJuITE9PT10aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmd9LEFpLnByb3RvdHlwZS5zZXRFbmNvZGluZz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyPW5ldyBraSh0KSx0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nPXQsdGhpc307ZnVuY3Rpb24gQ2kodCxlKXtyZXR1cm4gdDw9MHx8MD09PWUubGVuZ3RoJiZlLmVuZGVkPzA6ZS5vYmplY3RNb2RlPzE6dCE9dD9lLmZsb3dpbmcmJmUubGVuZ3RoP2UuYnVmZmVyLmhlYWQuZGF0YS5sZW5ndGg6ZS5sZW5ndGg6KHQ+ZS5oaWdoV2F0ZXJNYXJrJiYoZS5oaWdoV2F0ZXJNYXJrPWZ1bmN0aW9uKHQpe3JldHVybiB0Pj04Mzg4NjA4P3Q9ODM4ODYwODoodC0tLHR8PXQ+Pj4xLHR8PXQ+Pj4yLHR8PXQ+Pj40LHR8PXQ+Pj44LHR8PXQ+Pj4xNix0KyspLHR9KHQpKSx0PD1lLmxlbmd0aD90OmUuZW5kZWQ/ZS5sZW5ndGg6KGUubmVlZFJlYWRhYmxlPSEwLDApKX1mdW5jdGlvbiBNaSh0KXt2YXIgZT10Ll9yZWFkYWJsZVN0YXRlO2UubmVlZFJlYWRhYmxlPSExLGUuZW1pdHRlZFJlYWRhYmxlfHwoVGkoImVtaXRSZWFkYWJsZSIsZS5mbG93aW5nKSxlLmVtaXR0ZWRSZWFkYWJsZT0hMCxlLnN5bmM/dyhQaSx0KTpQaSh0KSl9ZnVuY3Rpb24gUGkodCl7VGkoImVtaXQgcmVhZGFibGUiKSx0LmVtaXQoInJlYWRhYmxlIiksRGkodCl9ZnVuY3Rpb24gQmkodCxlKXtmb3IodmFyIHI9ZS5sZW5ndGg7IWUucmVhZGluZyYmIWUuZmxvd2luZyYmIWUuZW5kZWQmJmUubGVuZ3RoPGUuaGlnaFdhdGVyTWFyayYmKFRpKCJtYXliZVJlYWRNb3JlIHJlYWQgMCIpLHQucmVhZCgwKSxyIT09ZS5sZW5ndGgpOylyPWUubGVuZ3RoO2UucmVhZGluZ01vcmU9ITF9ZnVuY3Rpb24gTmkodCl7VGkoInJlYWRhYmxlIG5leHR0aWNrIHJlYWQgMCIpLHQucmVhZCgwKX1mdW5jdGlvbiBVaSh0LGUpe2UucmVhZGluZ3x8KFRpKCJyZXN1bWUgcmVhZCAwIiksdC5yZWFkKDApKSxlLnJlc3VtZVNjaGVkdWxlZD0hMSxlLmF3YWl0RHJhaW49MCx0LmVtaXQoInJlc3VtZSIpLERpKHQpLGUuZmxvd2luZyYmIWUucmVhZGluZyYmdC5yZWFkKDApfWZ1bmN0aW9uIERpKHQpe3ZhciBlPXQuX3JlYWRhYmxlU3RhdGU7Zm9yKFRpKCJmbG93IixlLmZsb3dpbmcpO2UuZmxvd2luZyYmbnVsbCE9PXQucmVhZCgpOyk7fWZ1bmN0aW9uIElpKHQsZSl7cmV0dXJuIDA9PT1lLmxlbmd0aD9udWxsOihlLm9iamVjdE1vZGU/cj1lLmJ1ZmZlci5zaGlmdCgpOiF0fHx0Pj1lLmxlbmd0aD8ocj1lLmRlY29kZXI/ZS5idWZmZXIuam9pbigiIik6MT09PWUuYnVmZmVyLmxlbmd0aD9lLmJ1ZmZlci5oZWFkLmRhdGE6ZS5idWZmZXIuY29uY2F0KGUubGVuZ3RoKSxlLmJ1ZmZlci5jbGVhcigpKTpyPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbjt0PGUuaGVhZC5kYXRhLmxlbmd0aD8obj1lLmhlYWQuZGF0YS5zbGljZSgwLHQpLGUuaGVhZC5kYXRhPWUuaGVhZC5kYXRhLnNsaWNlKHQpKTpuPXQ9PT1lLmhlYWQuZGF0YS5sZW5ndGg/ZS5zaGlmdCgpOnI/ZnVuY3Rpb24odCxlKXt2YXIgcj1lLmhlYWQsbj0xLGk9ci5kYXRhO3QtPWkubGVuZ3RoO2Zvcig7cj1yLm5leHQ7KXt2YXIgbz1yLmRhdGEsYT10Pm8ubGVuZ3RoP28ubGVuZ3RoOnQ7aWYoYT09PW8ubGVuZ3RoP2krPW86aSs9by5zbGljZSgwLHQpLDA9PT0odC09YSkpe2E9PT1vLmxlbmd0aD8oKytuLHIubmV4dD9lLmhlYWQ9ci5uZXh0OmUuaGVhZD1lLnRhaWw9bnVsbCk6KGUuaGVhZD1yLHIuZGF0YT1vLnNsaWNlKGEpKTticmVha30rK259cmV0dXJuIGUubGVuZ3RoLT1uLGl9KHQsZSk6ZnVuY3Rpb24odCxlKXt2YXIgcj1odC5hbGxvY1Vuc2FmZSh0KSxuPWUuaGVhZCxpPTE7bi5kYXRhLmNvcHkociksdC09bi5kYXRhLmxlbmd0aDtmb3IoO249bi5uZXh0Oyl7dmFyIG89bi5kYXRhLGE9dD5vLmxlbmd0aD9vLmxlbmd0aDp0O2lmKG8uY29weShyLHIubGVuZ3RoLXQsMCxhKSwwPT09KHQtPWEpKXthPT09by5sZW5ndGg/KCsraSxuLm5leHQ/ZS5oZWFkPW4ubmV4dDplLmhlYWQ9ZS50YWlsPW51bGwpOihlLmhlYWQ9bixuLmRhdGE9by5zbGljZShhKSk7YnJlYWt9KytpfXJldHVybiBlLmxlbmd0aC09aSxyfSh0LGUpO3JldHVybiBufSh0LGUuYnVmZmVyLGUuZGVjb2Rlcikscik7dmFyIHJ9ZnVuY3Rpb24gRmkodCl7dmFyIGU9dC5fcmVhZGFibGVTdGF0ZTtpZihlLmxlbmd0aD4wKXRocm93IG5ldyBFcnJvcignImVuZFJlYWRhYmxlKCkiIGNhbGxlZCBvbiBub24tZW1wdHkgc3RyZWFtJyk7ZS5lbmRFbWl0dGVkfHwoZS5lbmRlZD0hMCx3KHFpLGUsdCkpfWZ1bmN0aW9uIHFpKHQsZSl7dC5lbmRFbWl0dGVkfHwwIT09dC5sZW5ndGh8fCh0LmVuZEVtaXR0ZWQ9ITAsZS5yZWFkYWJsZT0hMSxlLmVtaXQoImVuZCIpKX1mdW5jdGlvbiBXaSh0LGUpe2Zvcih2YXIgcj0wLG49dC5sZW5ndGg7cjxuO3IrKylpZih0W3JdPT09ZSlyZXR1cm4gcjtyZXR1cm4tMX1mdW5jdGlvbiB6aSgpe31mdW5jdGlvbiBZaSh0LGUscil7dGhpcy5jaHVuaz10LHRoaXMuZW5jb2Rpbmc9ZSx0aGlzLmNhbGxiYWNrPXIsdGhpcy5uZXh0PW51bGx9ZnVuY3Rpb24gJGkodCxlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywiYnVmZmVyIix7Z2V0OnJlKChmdW5jdGlvbigpe3JldHVybiB0aGlzLmdldEJ1ZmZlcigpfSksIl93cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyIGluc3RlYWQuIil9KSx0PXR8fHt9LHRoaXMub2JqZWN0TW9kZT0hIXQub2JqZWN0TW9kZSxlIGluc3RhbmNlb2Ygbm8mJih0aGlzLm9iamVjdE1vZGU9dGhpcy5vYmplY3RNb2RlfHwhIXQud3JpdGFibGVPYmplY3RNb2RlKTt2YXIgcj10LmhpZ2hXYXRlck1hcmssbj10aGlzLm9iamVjdE1vZGU/MTY6MTYzODQ7dGhpcy5oaWdoV2F0ZXJNYXJrPXJ8fDA9PT1yP3I6bix0aGlzLmhpZ2hXYXRlck1hcms9fn50aGlzLmhpZ2hXYXRlck1hcmssdGhpcy5uZWVkRHJhaW49ITEsdGhpcy5lbmRpbmc9ITEsdGhpcy5lbmRlZD0hMSx0aGlzLmZpbmlzaGVkPSExO3ZhciBpPSExPT09dC5kZWNvZGVTdHJpbmdzO3RoaXMuZGVjb2RlU3RyaW5ncz0haSx0aGlzLmRlZmF1bHRFbmNvZGluZz10LmRlZmF1bHRFbmNvZGluZ3x8InV0ZjgiLHRoaXMubGVuZ3RoPTAsdGhpcy53cml0aW5nPSExLHRoaXMuY29ya2VkPTAsdGhpcy5zeW5jPSEwLHRoaXMuYnVmZmVyUHJvY2Vzc2luZz0hMSx0aGlzLm9ud3JpdGU9ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7dmFyIHI9dC5fd3JpdGFibGVTdGF0ZSxuPXIuc3luYyxpPXIud3JpdGVjYjtpZihmdW5jdGlvbih0KXt0LndyaXRpbmc9ITEsdC53cml0ZWNiPW51bGwsdC5sZW5ndGgtPXQud3JpdGVsZW4sdC53cml0ZWxlbj0wfShyKSxlKSFmdW5jdGlvbih0LGUscixuLGkpey0tZS5wZW5kaW5nY2Iscj93KGksbik6aShuKTt0Ll93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZD0hMCx0LmVtaXQoImVycm9yIixuKX0odCxyLG4sZSxpKTtlbHNle3ZhciBvPUtpKHIpO298fHIuY29ya2VkfHxyLmJ1ZmZlclByb2Nlc3Npbmd8fCFyLmJ1ZmZlcmVkUmVxdWVzdHx8VmkodCxyKSxuP3coSmksdCxyLG8saSk6SmkodCxyLG8saSl9fShlLHQpfSx0aGlzLndyaXRlY2I9bnVsbCx0aGlzLndyaXRlbGVuPTAsdGhpcy5idWZmZXJlZFJlcXVlc3Q9bnVsbCx0aGlzLmxhc3RCdWZmZXJlZFJlcXVlc3Q9bnVsbCx0aGlzLnBlbmRpbmdjYj0wLHRoaXMucHJlZmluaXNoZWQ9ITEsdGhpcy5lcnJvckVtaXR0ZWQ9ITEsdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudD0wLHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlPW5ldyBRaSh0aGlzKX1mdW5jdGlvbiBHaSh0KXtpZighKHRoaXMgaW5zdGFuY2VvZiBHaXx8dGhpcyBpbnN0YW5jZW9mIG5vKSlyZXR1cm4gbmV3IEdpKHQpO3RoaXMuX3dyaXRhYmxlU3RhdGU9bmV3ICRpKHQsdGhpcyksdGhpcy53cml0YWJsZT0hMCx0JiYoImZ1bmN0aW9uIj09dHlwZW9mIHQud3JpdGUmJih0aGlzLl93cml0ZT10LndyaXRlKSwiZnVuY3Rpb24iPT10eXBlb2YgdC53cml0ZXYmJih0aGlzLl93cml0ZXY9dC53cml0ZXYpKSxVLmNhbGwodGhpcyl9ZnVuY3Rpb24gSGkodCxlLHIsbixpLG8sYSl7ZS53cml0ZWxlbj1uLGUud3JpdGVjYj1hLGUud3JpdGluZz0hMCxlLnN5bmM9ITAscj90Ll93cml0ZXYoaSxlLm9ud3JpdGUpOnQuX3dyaXRlKGksbyxlLm9ud3JpdGUpLGUuc3luYz0hMX1mdW5jdGlvbiBKaSh0LGUscixuKXtyfHxmdW5jdGlvbih0LGUpezA9PT1lLmxlbmd0aCYmZS5uZWVkRHJhaW4mJihlLm5lZWREcmFpbj0hMSx0LmVtaXQoImRyYWluIikpfSh0LGUpLGUucGVuZGluZ2NiLS0sbigpLFhpKHQsZSl9ZnVuY3Rpb24gVmkodCxlKXtlLmJ1ZmZlclByb2Nlc3Npbmc9ITA7dmFyIHI9ZS5idWZmZXJlZFJlcXVlc3Q7aWYodC5fd3JpdGV2JiZyJiZyLm5leHQpe3ZhciBuPWUuYnVmZmVyZWRSZXF1ZXN0Q291bnQsaT1uZXcgQXJyYXkobiksbz1lLmNvcmtlZFJlcXVlc3RzRnJlZTtvLmVudHJ5PXI7Zm9yKHZhciBhPTA7cjspaVthXT1yLHI9ci5uZXh0LGErPTE7SGkodCxlLCEwLGUubGVuZ3RoLGksIiIsby5maW5pc2gpLGUucGVuZGluZ2NiKyssZS5sYXN0QnVmZmVyZWRSZXF1ZXN0PW51bGwsby5uZXh0PyhlLmNvcmtlZFJlcXVlc3RzRnJlZT1vLm5leHQsby5uZXh0PW51bGwpOmUuY29ya2VkUmVxdWVzdHNGcmVlPW5ldyBRaShlKX1lbHNle2Zvcig7cjspe3ZhciBzPXIuY2h1bmssdT1yLmVuY29kaW5nLGY9ci5jYWxsYmFjaztpZihIaSh0LGUsITEsZS5vYmplY3RNb2RlPzE6cy5sZW5ndGgscyx1LGYpLHI9ci5uZXh0LGUud3JpdGluZylicmVha31udWxsPT09ciYmKGUubGFzdEJ1ZmZlcmVkUmVxdWVzdD1udWxsKX1lLmJ1ZmZlcmVkUmVxdWVzdENvdW50PTAsZS5idWZmZXJlZFJlcXVlc3Q9cixlLmJ1ZmZlclByb2Nlc3Npbmc9ITF9ZnVuY3Rpb24gS2kodCl7cmV0dXJuIHQuZW5kaW5nJiYwPT09dC5sZW5ndGgmJm51bGw9PT10LmJ1ZmZlcmVkUmVxdWVzdCYmIXQuZmluaXNoZWQmJiF0LndyaXRpbmd9ZnVuY3Rpb24gWmkodCxlKXtlLnByZWZpbmlzaGVkfHwoZS5wcmVmaW5pc2hlZD0hMCx0LmVtaXQoInByZWZpbmlzaCIpKX1mdW5jdGlvbiBYaSh0LGUpe3ZhciByPUtpKGUpO3JldHVybiByJiYoMD09PWUucGVuZGluZ2NiPyhaaSh0LGUpLGUuZmluaXNoZWQ9ITAsdC5lbWl0KCJmaW5pc2giKSk6WmkodCxlKSkscn1mdW5jdGlvbiBRaSh0KXt2YXIgZT10aGlzO3RoaXMubmV4dD1udWxsLHRoaXMuZW50cnk9bnVsbCx0aGlzLmZpbmlzaD1mdW5jdGlvbihyKXt2YXIgbj1lLmVudHJ5O2ZvcihlLmVudHJ5PW51bGw7bjspe3ZhciBpPW4uY2FsbGJhY2s7dC5wZW5kaW5nY2ItLSxpKHIpLG49bi5uZXh0fXQuY29ya2VkUmVxdWVzdHNGcmVlP3QuY29ya2VkUmVxdWVzdHNGcmVlLm5leHQ9ZTp0LmNvcmtlZFJlcXVlc3RzRnJlZT1lfX1BaS5wcm90b3R5cGUucmVhZD1mdW5jdGlvbih0KXtUaSgicmVhZCIsdCksdD1wYXJzZUludCh0LDEwKTt2YXIgZT10aGlzLl9yZWFkYWJsZVN0YXRlLHI9dDtpZigwIT09dCYmKGUuZW1pdHRlZFJlYWRhYmxlPSExKSwwPT09dCYmZS5uZWVkUmVhZGFibGUmJihlLmxlbmd0aD49ZS5oaWdoV2F0ZXJNYXJrfHxlLmVuZGVkKSlyZXR1cm4gVGkoInJlYWQ6IGVtaXRSZWFkYWJsZSIsZS5sZW5ndGgsZS5lbmRlZCksMD09PWUubGVuZ3RoJiZlLmVuZGVkP0ZpKHRoaXMpOk1pKHRoaXMpLG51bGw7aWYoMD09PSh0PUNpKHQsZSkpJiZlLmVuZGVkKXJldHVybiAwPT09ZS5sZW5ndGgmJkZpKHRoaXMpLG51bGw7dmFyIG4saT1lLm5lZWRSZWFkYWJsZTtyZXR1cm4gVGkoIm5lZWQgcmVhZGFibGUiLGkpLCgwPT09ZS5sZW5ndGh8fGUubGVuZ3RoLXQ8ZS5oaWdoV2F0ZXJNYXJrKSYmVGkoImxlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrIixpPSEwKSxlLmVuZGVkfHxlLnJlYWRpbmc/VGkoInJlYWRpbmcgb3IgZW5kZWQiLGk9ITEpOmkmJihUaSgiZG8gcmVhZCIpLGUucmVhZGluZz0hMCxlLnN5bmM9ITAsMD09PWUubGVuZ3RoJiYoZS5uZWVkUmVhZGFibGU9ITApLHRoaXMuX3JlYWQoZS5oaWdoV2F0ZXJNYXJrKSxlLnN5bmM9ITEsZS5yZWFkaW5nfHwodD1DaShyLGUpKSksbnVsbD09PShuPXQ+MD9JaSh0LGUpOm51bGwpPyhlLm5lZWRSZWFkYWJsZT0hMCx0PTApOmUubGVuZ3RoLT10LDA9PT1lLmxlbmd0aCYmKGUuZW5kZWR8fChlLm5lZWRSZWFkYWJsZT0hMCksciE9PXQmJmUuZW5kZWQmJkZpKHRoaXMpKSxudWxsIT09biYmdGhpcy5lbWl0KCJkYXRhIixuKSxufSxBaS5wcm90b3R5cGUuX3JlYWQ9ZnVuY3Rpb24odCl7dGhpcy5lbWl0KCJlcnJvciIsbmV3IEVycm9yKCJub3QgaW1wbGVtZW50ZWQiKSl9LEFpLnByb3RvdHlwZS5waXBlPWZ1bmN0aW9uKHQsZSl7dmFyIHI9dGhpcyxuPXRoaXMuX3JlYWRhYmxlU3RhdGU7c3dpdGNoKG4ucGlwZXNDb3VudCl7Y2FzZSAwOm4ucGlwZXM9dDticmVhaztjYXNlIDE6bi5waXBlcz1bbi5waXBlcyx0XTticmVhaztkZWZhdWx0Om4ucGlwZXMucHVzaCh0KX1uLnBpcGVzQ291bnQrPTEsVGkoInBpcGUgY291bnQ9JWQgb3B0cz0laiIsbi5waXBlc0NvdW50LGUpO3ZhciBpPSFlfHwhMSE9PWUuZW5kP2E6ZjtmdW5jdGlvbiBvKHQpe1RpKCJvbnVucGlwZSIpLHQ9PT1yJiZmKCl9ZnVuY3Rpb24gYSgpe1RpKCJvbmVuZCIpLHQuZW5kKCl9bi5lbmRFbWl0dGVkP3coaSk6ci5vbmNlKCJlbmQiLGkpLHQub24oInVucGlwZSIsbyk7dmFyIHM9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGU9dC5fcmVhZGFibGVTdGF0ZTtUaSgicGlwZU9uRHJhaW4iLGUuYXdhaXREcmFpbiksZS5hd2FpdERyYWluJiZlLmF3YWl0RHJhaW4tLSwwPT09ZS5hd2FpdERyYWluJiZ0Lmxpc3RlbmVycygiZGF0YSIpLmxlbmd0aCYmKGUuZmxvd2luZz0hMCxEaSh0KSl9fShyKTt0Lm9uKCJkcmFpbiIscyk7dmFyIHU9ITE7ZnVuY3Rpb24gZigpe1RpKCJjbGVhbnVwIiksdC5yZW1vdmVMaXN0ZW5lcigiY2xvc2UiLGQpLHQucmVtb3ZlTGlzdGVuZXIoImZpbmlzaCIscCksdC5yZW1vdmVMaXN0ZW5lcigiZHJhaW4iLHMpLHQucmVtb3ZlTGlzdGVuZXIoImVycm9yIixsKSx0LnJlbW92ZUxpc3RlbmVyKCJ1bnBpcGUiLG8pLHIucmVtb3ZlTGlzdGVuZXIoImVuZCIsYSksci5yZW1vdmVMaXN0ZW5lcigiZW5kIixmKSxyLnJlbW92ZUxpc3RlbmVyKCJkYXRhIixjKSx1PSEwLCFuLmF3YWl0RHJhaW58fHQuX3dyaXRhYmxlU3RhdGUmJiF0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbnx8cygpfXZhciBoPSExO2Z1bmN0aW9uIGMoZSl7VGkoIm9uZGF0YSIpLGg9ITEsITEhPT10LndyaXRlKGUpfHxofHwoKDE9PT1uLnBpcGVzQ291bnQmJm4ucGlwZXM9PT10fHxuLnBpcGVzQ291bnQ+MSYmLTEhPT1XaShuLnBpcGVzLHQpKSYmIXUmJihUaSgiZmFsc2Ugd3JpdGUgcmVzcG9uc2UsIHBhdXNlIixyLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4pLHIuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbisrLGg9ITApLHIucGF1c2UoKSl9ZnVuY3Rpb24gbChlKXt2YXIgcjtUaSgib25lcnJvciIsZSksZygpLHQucmVtb3ZlTGlzdGVuZXIoImVycm9yIixsKSwwPT09KHI9ImVycm9yIix0Lmxpc3RlbmVycyhyKS5sZW5ndGgpJiZ0LmVtaXQoImVycm9yIixlKX1mdW5jdGlvbiBkKCl7dC5yZW1vdmVMaXN0ZW5lcigiZmluaXNoIixwKSxnKCl9ZnVuY3Rpb24gcCgpe1RpKCJvbmZpbmlzaCIpLHQucmVtb3ZlTGlzdGVuZXIoImNsb3NlIixkKSxnKCl9ZnVuY3Rpb24gZygpe1RpKCJ1bnBpcGUiKSxyLnVucGlwZSh0KX1yZXR1cm4gci5vbigiZGF0YSIsYyksZnVuY3Rpb24odCxlLHIpe2lmKCJmdW5jdGlvbiI9PXR5cGVvZiB0LnByZXBlbmRMaXN0ZW5lcilyZXR1cm4gdC5wcmVwZW5kTGlzdGVuZXIoZSxyKTt0Ll9ldmVudHMmJnQuX2V2ZW50c1tlXT9BcnJheS5pc0FycmF5KHQuX2V2ZW50c1tlXSk/dC5fZXZlbnRzW2VdLnVuc2hpZnQocik6dC5fZXZlbnRzW2VdPVtyLHQuX2V2ZW50c1tlXV06dC5vbihlLHIpfSh0LCJlcnJvciIsbCksdC5vbmNlKCJjbG9zZSIsZCksdC5vbmNlKCJmaW5pc2giLHApLHQuZW1pdCgicGlwZSIsciksbi5mbG93aW5nfHwoVGkoInBpcGUgcmVzdW1lIiksci5yZXN1bWUoKSksdH0sQWkucHJvdG90eXBlLnVucGlwZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl9yZWFkYWJsZVN0YXRlO2lmKDA9PT1lLnBpcGVzQ291bnQpcmV0dXJuIHRoaXM7aWYoMT09PWUucGlwZXNDb3VudClyZXR1cm4gdCYmdCE9PWUucGlwZXN8fCh0fHwodD1lLnBpcGVzKSxlLnBpcGVzPW51bGwsZS5waXBlc0NvdW50PTAsZS5mbG93aW5nPSExLHQmJnQuZW1pdCgidW5waXBlIix0aGlzKSksdGhpcztpZighdCl7dmFyIHI9ZS5waXBlcyxuPWUucGlwZXNDb3VudDtlLnBpcGVzPW51bGwsZS5waXBlc0NvdW50PTAsZS5mbG93aW5nPSExO2Zvcih2YXIgaT0wO2k8bjtpKyspcltpXS5lbWl0KCJ1bnBpcGUiLHRoaXMpO3JldHVybiB0aGlzfXZhciBvPVdpKGUucGlwZXMsdCk7cmV0dXJuLTE9PT1vfHwoZS5waXBlcy5zcGxpY2UobywxKSxlLnBpcGVzQ291bnQtPTEsMT09PWUucGlwZXNDb3VudCYmKGUucGlwZXM9ZS5waXBlc1swXSksdC5lbWl0KCJ1bnBpcGUiLHRoaXMpKSx0aGlzfSxBaS5wcm90b3R5cGUub249ZnVuY3Rpb24odCxlKXt2YXIgcj1VLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsdCxlKTtpZigiZGF0YSI9PT10KSExIT09dGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nJiZ0aGlzLnJlc3VtZSgpO2Vsc2UgaWYoInJlYWRhYmxlIj09PXQpe3ZhciBuPXRoaXMuX3JlYWRhYmxlU3RhdGU7bi5lbmRFbWl0dGVkfHxuLnJlYWRhYmxlTGlzdGVuaW5nfHwobi5yZWFkYWJsZUxpc3RlbmluZz1uLm5lZWRSZWFkYWJsZT0hMCxuLmVtaXR0ZWRSZWFkYWJsZT0hMSxuLnJlYWRpbmc/bi5sZW5ndGgmJk1pKHRoaXMpOncoTmksdGhpcykpfXJldHVybiByfSxBaS5wcm90b3R5cGUuYWRkTGlzdGVuZXI9QWkucHJvdG90eXBlLm9uLEFpLnByb3RvdHlwZS5yZXN1bWU9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9yZWFkYWJsZVN0YXRlO3JldHVybiB0LmZsb3dpbmd8fChUaSgicmVzdW1lIiksdC5mbG93aW5nPSEwLGZ1bmN0aW9uKHQsZSl7ZS5yZXN1bWVTY2hlZHVsZWR8fChlLnJlc3VtZVNjaGVkdWxlZD0hMCx3KFVpLHQsZSkpfSh0aGlzLHQpKSx0aGlzfSxBaS5wcm90b3R5cGUucGF1c2U9ZnVuY3Rpb24oKXtyZXR1cm4gVGkoImNhbGwgcGF1c2UgZmxvd2luZz0laiIsdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSwhMSE9PXRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyYmKFRpKCJwYXVzZSIpLHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZz0hMSx0aGlzLmVtaXQoInBhdXNlIikpLHRoaXN9LEFpLnByb3RvdHlwZS53cmFwPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX3JlYWRhYmxlU3RhdGUscj0hMSxuPXRoaXM7Zm9yKHZhciBpIGluIHQub24oImVuZCIsKGZ1bmN0aW9uKCl7aWYoVGkoIndyYXBwZWQgZW5kIiksZS5kZWNvZGVyJiYhZS5lbmRlZCl7dmFyIHQ9ZS5kZWNvZGVyLmVuZCgpO3QmJnQubGVuZ3RoJiZuLnB1c2godCl9bi5wdXNoKG51bGwpfSkpLHQub24oImRhdGEiLChmdW5jdGlvbihpKXsoVGkoIndyYXBwZWQgZGF0YSIpLGUuZGVjb2RlciYmKGk9ZS5kZWNvZGVyLndyaXRlKGkpKSxlLm9iamVjdE1vZGUmJm51bGw9PWkpfHwoZS5vYmplY3RNb2RlfHxpJiZpLmxlbmd0aCkmJihuLnB1c2goaSl8fChyPSEwLHQucGF1c2UoKSkpfSkpLHQpdm9pZCAwPT09dGhpc1tpXSYmImZ1bmN0aW9uIj09dHlwZW9mIHRbaV0mJih0aGlzW2ldPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0W2VdLmFwcGx5KHQsYXJndW1lbnRzKX19KGkpKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtmb3IodmFyIHI9MCxuPXQubGVuZ3RoO3I8bjtyKyspZSh0W3JdLHIpfShbImVycm9yIiwiY2xvc2UiLCJkZXN0cm95IiwicGF1c2UiLCJyZXN1bWUiXSwoZnVuY3Rpb24oZSl7dC5vbihlLG4uZW1pdC5iaW5kKG4sZSkpfSkpLG4uX3JlYWQ9ZnVuY3Rpb24oZSl7VGkoIndyYXBwZWQgX3JlYWQiLGUpLHImJihyPSExLHQucmVzdW1lKCkpfSxufSxBaS5fZnJvbUxpc3Q9SWksR2kuV3JpdGFibGVTdGF0ZT0kaSxRdChHaSxVKSwkaS5wcm90b3R5cGUuZ2V0QnVmZmVyPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuYnVmZmVyZWRSZXF1ZXN0LGU9W107dDspZS5wdXNoKHQpLHQ9dC5uZXh0O3JldHVybiBlfSxHaS5wcm90b3R5cGUucGlwZT1mdW5jdGlvbigpe3RoaXMuZW1pdCgiZXJyb3IiLG5ldyBFcnJvcigiQ2Fubm90IHBpcGUsIG5vdCByZWFkYWJsZSIpKX0sR2kucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj10aGlzLl93cml0YWJsZVN0YXRlLGk9ITE7cmV0dXJuImZ1bmN0aW9uIj09dHlwZW9mIGUmJihyPWUsZT1udWxsKSxodC5pc0J1ZmZlcih0KT9lPSJidWZmZXIiOmV8fChlPW4uZGVmYXVsdEVuY29kaW5nKSwiZnVuY3Rpb24iIT10eXBlb2YgciYmKHI9emkpLG4uZW5kZWQ/ZnVuY3Rpb24odCxlKXt2YXIgcj1uZXcgRXJyb3IoIndyaXRlIGFmdGVyIGVuZCIpO3QuZW1pdCgiZXJyb3IiLHIpLHcoZSxyKX0odGhpcyxyKTpmdW5jdGlvbih0LGUscixuKXt2YXIgaT0hMCxvPSExO3JldHVybiBudWxsPT09cj9vPW5ldyBUeXBlRXJyb3IoIk1heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtIik6aHQuaXNCdWZmZXIocil8fCJzdHJpbmciPT10eXBlb2Ygcnx8dm9pZCAwPT09cnx8ZS5vYmplY3RNb2RlfHwobz1uZXcgVHlwZUVycm9yKCJJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rIikpLG8mJih0LmVtaXQoImVycm9yIixvKSx3KG4sbyksaT0hMSksaX0odGhpcyxuLHQscikmJihuLnBlbmRpbmdjYisrLGk9ZnVuY3Rpb24odCxlLHIsbixpKXtyPWZ1bmN0aW9uKHQsZSxyKXt0Lm9iamVjdE1vZGV8fCExPT09dC5kZWNvZGVTdHJpbmdzfHwic3RyaW5nIiE9dHlwZW9mIGV8fChlPWh0LmZyb20oZSxyKSk7cmV0dXJuIGV9KGUscixuKSxodC5pc0J1ZmZlcihyKSYmKG49ImJ1ZmZlciIpO3ZhciBvPWUub2JqZWN0TW9kZT8xOnIubGVuZ3RoO2UubGVuZ3RoKz1vO3ZhciBhPWUubGVuZ3RoPGUuaGlnaFdhdGVyTWFyazthfHwoZS5uZWVkRHJhaW49ITApO2lmKGUud3JpdGluZ3x8ZS5jb3JrZWQpe3ZhciBzPWUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtlLmxhc3RCdWZmZXJlZFJlcXVlc3Q9bmV3IFlpKHIsbixpKSxzP3MubmV4dD1lLmxhc3RCdWZmZXJlZFJlcXVlc3Q6ZS5idWZmZXJlZFJlcXVlc3Q9ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0LGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQrPTF9ZWxzZSBIaSh0LGUsITEsbyxyLG4saSk7cmV0dXJuIGF9KHRoaXMsbix0LGUscikpLGl9LEdpLnByb3RvdHlwZS5jb3JrPWZ1bmN0aW9uKCl7dGhpcy5fd3JpdGFibGVTdGF0ZS5jb3JrZWQrK30sR2kucHJvdG90eXBlLnVuY29yaz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX3dyaXRhYmxlU3RhdGU7dC5jb3JrZWQmJih0LmNvcmtlZC0tLHQud3JpdGluZ3x8dC5jb3JrZWR8fHQuZmluaXNoZWR8fHQuYnVmZmVyUHJvY2Vzc2luZ3x8IXQuYnVmZmVyZWRSZXF1ZXN0fHxWaSh0aGlzLHQpKX0sR2kucHJvdG90eXBlLnNldERlZmF1bHRFbmNvZGluZz1mdW5jdGlvbih0KXtpZigic3RyaW5nIj09dHlwZW9mIHQmJih0PXQudG9Mb3dlckNhc2UoKSksIShbImhleCIsInV0ZjgiLCJ1dGYtOCIsImFzY2lpIiwiYmluYXJ5IiwiYmFzZTY0IiwidWNzMiIsInVjcy0yIiwidXRmMTZsZSIsInV0Zi0xNmxlIiwicmF3Il0uaW5kZXhPZigodCsiIikudG9Mb3dlckNhc2UoKSk+LTEpKXRocm93IG5ldyBUeXBlRXJyb3IoIlVua25vd24gZW5jb2Rpbmc6ICIrdCk7cmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nPXQsdGhpc30sR2kucHJvdG90eXBlLl93cml0ZT1mdW5jdGlvbih0LGUscil7cihuZXcgRXJyb3IoIm5vdCBpbXBsZW1lbnRlZCIpKX0sR2kucHJvdG90eXBlLl93cml0ZXY9bnVsbCxHaS5wcm90b3R5cGUuZW5kPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj10aGlzLl93cml0YWJsZVN0YXRlOyJmdW5jdGlvbiI9PXR5cGVvZiB0PyhyPXQsdD1udWxsLGU9bnVsbCk6ImZ1bmN0aW9uIj09dHlwZW9mIGUmJihyPWUsZT1udWxsKSxudWxsIT10JiZ0aGlzLndyaXRlKHQsZSksbi5jb3JrZWQmJihuLmNvcmtlZD0xLHRoaXMudW5jb3JrKCkpLG4uZW5kaW5nfHxuLmZpbmlzaGVkfHxmdW5jdGlvbih0LGUscil7ZS5lbmRpbmc9ITAsWGkodCxlKSxyJiYoZS5maW5pc2hlZD93KHIpOnQub25jZSgiZmluaXNoIixyKSk7ZS5lbmRlZD0hMCx0LndyaXRhYmxlPSExfSh0aGlzLG4scil9LFF0KG5vLEFpKTtmb3IodmFyIHRvPU9iamVjdC5rZXlzKEdpLnByb3RvdHlwZSksZW89MDtlbzx0by5sZW5ndGg7ZW8rKyl7dmFyIHJvPXRvW2VvXTtuby5wcm90b3R5cGVbcm9dfHwobm8ucHJvdG90eXBlW3JvXT1HaS5wcm90b3R5cGVbcm9dKX1mdW5jdGlvbiBubyh0KXtpZighKHRoaXMgaW5zdGFuY2VvZiBubykpcmV0dXJuIG5ldyBubyh0KTtBaS5jYWxsKHRoaXMsdCksR2kuY2FsbCh0aGlzLHQpLHQmJiExPT09dC5yZWFkYWJsZSYmKHRoaXMucmVhZGFibGU9ITEpLHQmJiExPT09dC53cml0YWJsZSYmKHRoaXMud3JpdGFibGU9ITEpLHRoaXMuYWxsb3dIYWxmT3Blbj0hMCx0JiYhMT09PXQuYWxsb3dIYWxmT3BlbiYmKHRoaXMuYWxsb3dIYWxmT3Blbj0hMSksdGhpcy5vbmNlKCJlbmQiLGlvKX1mdW5jdGlvbiBpbygpe3RoaXMuYWxsb3dIYWxmT3Blbnx8dGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZHx8dyhvbyx0aGlzKX1mdW5jdGlvbiBvbyh0KXt0LmVuZCgpfWZ1bmN0aW9uIGFvKHQpe3RoaXMuYWZ0ZXJUcmFuc2Zvcm09ZnVuY3Rpb24oZSxyKXtyZXR1cm4gZnVuY3Rpb24odCxlLHIpe3ZhciBuPXQuX3RyYW5zZm9ybVN0YXRlO24udHJhbnNmb3JtaW5nPSExO3ZhciBpPW4ud3JpdGVjYjtpZighaSlyZXR1cm4gdC5lbWl0KCJlcnJvciIsbmV3IEVycm9yKCJubyB3cml0ZWNiIGluIFRyYW5zZm9ybSBjbGFzcyIpKTtuLndyaXRlY2h1bms9bnVsbCxuLndyaXRlY2I9bnVsbCxudWxsIT1yJiZ0LnB1c2gocik7aShlKTt2YXIgbz10Ll9yZWFkYWJsZVN0YXRlO28ucmVhZGluZz0hMSwoby5uZWVkUmVhZGFibGV8fG8ubGVuZ3RoPG8uaGlnaFdhdGVyTWFyaykmJnQuX3JlYWQoby5oaWdoV2F0ZXJNYXJrKX0odCxlLHIpfSx0aGlzLm5lZWRUcmFuc2Zvcm09ITEsdGhpcy50cmFuc2Zvcm1pbmc9ITEsdGhpcy53cml0ZWNiPW51bGwsdGhpcy53cml0ZWNodW5rPW51bGwsdGhpcy53cml0ZWVuY29kaW5nPW51bGx9ZnVuY3Rpb24gc28odCl7aWYoISh0aGlzIGluc3RhbmNlb2Ygc28pKXJldHVybiBuZXcgc28odCk7bm8uY2FsbCh0aGlzLHQpLHRoaXMuX3RyYW5zZm9ybVN0YXRlPW5ldyBhbyh0aGlzKTt2YXIgZT10aGlzO3RoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlPSEwLHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYz0hMSx0JiYoImZ1bmN0aW9uIj09dHlwZW9mIHQudHJhbnNmb3JtJiYodGhpcy5fdHJhbnNmb3JtPXQudHJhbnNmb3JtKSwiZnVuY3Rpb24iPT10eXBlb2YgdC5mbHVzaCYmKHRoaXMuX2ZsdXNoPXQuZmx1c2gpKSx0aGlzLm9uY2UoInByZWZpbmlzaCIsKGZ1bmN0aW9uKCl7ImZ1bmN0aW9uIj09dHlwZW9mIHRoaXMuX2ZsdXNoP3RoaXMuX2ZsdXNoKChmdW5jdGlvbih0KXt1byhlLHQpfSkpOnVvKGUpfSkpfWZ1bmN0aW9uIHVvKHQsZSl7aWYoZSlyZXR1cm4gdC5lbWl0KCJlcnJvciIsZSk7dmFyIHI9dC5fd3JpdGFibGVTdGF0ZSxuPXQuX3RyYW5zZm9ybVN0YXRlO2lmKHIubGVuZ3RoKXRocm93IG5ldyBFcnJvcigiQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHdzLmxlbmd0aCAhPSAwIik7aWYobi50cmFuc2Zvcm1pbmcpdGhyb3cgbmV3IEVycm9yKCJDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nIik7cmV0dXJuIHQucHVzaChudWxsKX1mdW5jdGlvbiBmbyh0KXtpZighKHRoaXMgaW5zdGFuY2VvZiBmbykpcmV0dXJuIG5ldyBmbyh0KTtzby5jYWxsKHRoaXMsdCl9ZnVuY3Rpb24gaG8oKXtVLmNhbGwodGhpcyl9ZnVuY3Rpb24gY28odCxlLHIpe3Q9dHx8ZnVuY3Rpb24odCl7dGhpcy5xdWV1ZSh0KX0sZT1lfHxmdW5jdGlvbigpe3RoaXMucXVldWUobnVsbCl9O3ZhciBuPSExLGk9ITEsbz1bXSxhPSExLHM9bmV3IGhvO2Z1bmN0aW9uIHUoKXtmb3IoO28ubGVuZ3RoJiYhcy5wYXVzZWQ7KXt2YXIgdD1vLnNoaWZ0KCk7aWYobnVsbD09PXQpcmV0dXJuIHMuZW1pdCgiZW5kIik7cy5lbWl0KCJkYXRhIix0KX19ZnVuY3Rpb24gZigpe3Mud3JpdGFibGU9ITEsZS5jYWxsKHMpLCFzLnJlYWRhYmxlJiZzLmF1dG9EZXN0cm95JiZzLmRlc3Ryb3koKX1yZXR1cm4gcy5yZWFkYWJsZT1zLndyaXRhYmxlPSEwLHMucGF1c2VkPSExLHMuYXV0b0Rlc3Ryb3k9IShyJiYhMT09PXIuYXV0b0Rlc3Ryb3kpLHMud3JpdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHQuY2FsbCh0aGlzLGUpLCFzLnBhdXNlZH0scy5xdWV1ZT1zLnB1c2g9ZnVuY3Rpb24odCl7cmV0dXJuIGF8fChudWxsPT09dCYmKGE9ITApLG8ucHVzaCh0KSx1KCkpLHN9LHMub24oImVuZCIsKGZ1bmN0aW9uKCl7cy5yZWFkYWJsZT0hMSwhcy53cml0YWJsZSYmcy5hdXRvRGVzdHJveSYmQy5uZXh0VGljaygoZnVuY3Rpb24oKXtzLmRlc3Ryb3koKX0pKX0pKSxzLmVuZD1mdW5jdGlvbih0KXtpZighbilyZXR1cm4gbj0hMCxhcmd1bWVudHMubGVuZ3RoJiZzLndyaXRlKHQpLGYoKSxzfSxzLmRlc3Ryb3k9ZnVuY3Rpb24oKXtpZighaSlyZXR1cm4gaT0hMCxuPSEwLG8ubGVuZ3RoPTAscy53cml0YWJsZT1zLnJlYWRhYmxlPSExLHMuZW1pdCgiY2xvc2UiKSxzfSxzLnBhdXNlPWZ1bmN0aW9uKCl7aWYoIXMucGF1c2VkKXJldHVybiBzLnBhdXNlZD0hMCxzfSxzLnJlc3VtZT1mdW5jdGlvbigpe3JldHVybiBzLnBhdXNlZCYmKHMucGF1c2VkPSExLHMuZW1pdCgicmVzdW1lIikpLHUoKSxzLnBhdXNlZHx8cy5lbWl0KCJkcmFpbiIpLHN9LHN9UXQoc28sbm8pLHNvLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm09ITEsbm8ucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLHQsZSl9LHNvLnByb3RvdHlwZS5fdHJhbnNmb3JtPWZ1bmN0aW9uKHQsZSxyKXt0aHJvdyBuZXcgRXJyb3IoIk5vdCBpbXBsZW1lbnRlZCIpfSxzby5wcm90b3R5cGUuX3dyaXRlPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj10aGlzLl90cmFuc2Zvcm1TdGF0ZTtpZihuLndyaXRlY2I9cixuLndyaXRlY2h1bms9dCxuLndyaXRlZW5jb2Rpbmc9ZSwhbi50cmFuc2Zvcm1pbmcpe3ZhciBpPXRoaXMuX3JlYWRhYmxlU3RhdGU7KG4ubmVlZFRyYW5zZm9ybXx8aS5uZWVkUmVhZGFibGV8fGkubGVuZ3RoPGkuaGlnaFdhdGVyTWFyaykmJnRoaXMuX3JlYWQoaS5oaWdoV2F0ZXJNYXJrKX19LHNvLnByb3RvdHlwZS5fcmVhZD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl90cmFuc2Zvcm1TdGF0ZTtudWxsIT09ZS53cml0ZWNodW5rJiZlLndyaXRlY2ImJiFlLnRyYW5zZm9ybWluZz8oZS50cmFuc2Zvcm1pbmc9ITAsdGhpcy5fdHJhbnNmb3JtKGUud3JpdGVjaHVuayxlLndyaXRlZW5jb2RpbmcsZS5hZnRlclRyYW5zZm9ybSkpOmUubmVlZFRyYW5zZm9ybT0hMH0sUXQoZm8sc28pLGZvLnByb3RvdHlwZS5fdHJhbnNmb3JtPWZ1bmN0aW9uKHQsZSxyKXtyKG51bGwsdCl9LFF0KGhvLFUpLGhvLlJlYWRhYmxlPUFpLGhvLldyaXRhYmxlPUdpLGhvLkR1cGxleD1ubyxoby5UcmFuc2Zvcm09c28saG8uUGFzc1Rocm91Z2g9Zm8saG8uU3RyZWFtPWhvLGhvLnByb3RvdHlwZS5waXBlPWZ1bmN0aW9uKHQsZSl7dmFyIHI9dGhpcztmdW5jdGlvbiBuKGUpe3Qud3JpdGFibGUmJiExPT09dC53cml0ZShlKSYmci5wYXVzZSYmci5wYXVzZSgpfWZ1bmN0aW9uIGkoKXtyLnJlYWRhYmxlJiZyLnJlc3VtZSYmci5yZXN1bWUoKX1yLm9uKCJkYXRhIixuKSx0Lm9uKCJkcmFpbiIsaSksdC5faXNTdGRpb3x8ZSYmITE9PT1lLmVuZHx8KHIub24oImVuZCIsYSksci5vbigiY2xvc2UiLHMpKTt2YXIgbz0hMTtmdW5jdGlvbiBhKCl7b3x8KG89ITAsdC5lbmQoKSl9ZnVuY3Rpb24gcygpe298fChvPSEwLCJmdW5jdGlvbiI9PXR5cGVvZiB0LmRlc3Ryb3kmJnQuZGVzdHJveSgpKX1mdW5jdGlvbiB1KHQpe2lmKGYoKSwwPT09VS5saXN0ZW5lckNvdW50KHRoaXMsImVycm9yIikpdGhyb3cgdH1mdW5jdGlvbiBmKCl7ci5yZW1vdmVMaXN0ZW5lcigiZGF0YSIsbiksdC5yZW1vdmVMaXN0ZW5lcigiZHJhaW4iLGkpLHIucmVtb3ZlTGlzdGVuZXIoImVuZCIsYSksci5yZW1vdmVMaXN0ZW5lcigiY2xvc2UiLHMpLHIucmVtb3ZlTGlzdGVuZXIoImVycm9yIix1KSx0LnJlbW92ZUxpc3RlbmVyKCJlcnJvciIsdSksci5yZW1vdmVMaXN0ZW5lcigiZW5kIixmKSxyLnJlbW92ZUxpc3RlbmVyKCJjbG9zZSIsZiksdC5yZW1vdmVMaXN0ZW5lcigiY2xvc2UiLGYpfXJldHVybiByLm9uKCJlcnJvciIsdSksdC5vbigiZXJyb3IiLHUpLHIub24oImVuZCIsZiksci5vbigiY2xvc2UiLGYpLHQub24oImNsb3NlIixmKSx0LmVtaXQoInBpcGUiLHIpLHR9LGNvLnRocm91Z2g9Y287dmFyIGxvPXtwYXJzZTpmdW5jdGlvbih0LGUpe3ZhciBuLGk7ZnVuY3Rpb24gbyh0LGUpe3JldHVybiJzdHJpbmciPT10eXBlb2YgdD9lPT09dDp0JiYiZnVuY3Rpb24iPT10eXBlb2YgdC5leGVjP3QuZXhlYyhlKToiYm9vbGVhbiI9PXR5cGVvZiB0fHwib2JqZWN0Ij09PXIodCk/dDoiZnVuY3Rpb24iPT10eXBlb2YgdCYmdChlKX12YXIgYT1uZXcgX2kscz1jbygoZnVuY3Rpb24odCl7InN0cmluZyI9PXR5cGVvZiB0JiYodD1odC5mcm9tKHQpKSxhLndyaXRlKHQpfSksKGZ1bmN0aW9uKHQpe3QmJnMud3JpdGUodCksbiYmcy5lbWl0KCJoZWFkZXIiLG4pLGkmJnMuZW1pdCgiZm9vdGVyIixpKSxzLnF1ZXVlKG51bGwpfSkpO2Z1bmN0aW9uIHUodCxlKXshMSE9PW4mJigobj1ufHx7fSlbdF09ZSksITEhPT1pJiYhMT09PW4mJigoaT1pfHx7fSlbdF09ZSl9cmV0dXJuInN0cmluZyI9PXR5cGVvZiB0JiYodD10LnNwbGl0KCIuIikubWFwKChmdW5jdGlvbih0KXtyZXR1cm4iJCoiPT09dD97ZW1pdEtleTohMH06IioiPT09dHx8KCIiPT09dD97cmVjdXJzZTohMH06dCl9KSkpLHQmJnQubGVuZ3RofHwodD1udWxsKSxhLm9uVmFsdWU9ZnVuY3Rpb24ocil7aWYodGhpcy5yb290fHwocy5yb290PXIpLHQpe2Zvcih2YXIgaT0wLGE9MCxmPSExLGg9ITE7aTx0Lmxlbmd0aDspe3ZhciBjPXRbaV0sbD12b2lkIDA7aWYoYSsrLGMmJiFjLnJlY3Vyc2Upe2lmKCEobD1hPT09dGhpcy5zdGFjay5sZW5ndGg/dGhpczp0aGlzLnN0YWNrW2FdKSlyZXR1cm47aWYoIW8oYyxsLmtleSkpcmV0dXJuIHZvaWQgdShsLmtleSxyKTtmPSEhYy5lbWl0S2V5LGg9ISFjLmVtaXRQYXRoLGkrK31lbHNle2krKzt2YXIgZD10W2ldO2lmKCFkKXJldHVybjtmb3IoOzspe2lmKCEobD1hPT09dGhpcy5zdGFjay5sZW5ndGg/dGhpczp0aGlzLnN0YWNrW2FdKSlyZXR1cm47aWYobyhkLGwua2V5KSl7aSsrLE9iamVjdC5pc0Zyb3plbih0aGlzLnN0YWNrW2FdKXx8KHRoaXMuc3RhY2tbYV0udmFsdWU9bnVsbCk7YnJlYWt9dShsLmtleSxyKSxhKyt9fX1pZihuJiYocy5lbWl0KCJoZWFkZXIiLG4pLG49ITEpLGE9PT10aGlzLnN0YWNrLmxlbmd0aCl7dmFyIHA9dGhpcy5zdGFjay5zbGljZSgxKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmtleX0pKS5jb25jYXQoW3RoaXMua2V5XSksZz1yO2Zvcih2YXIgeSBpbiBudWxsIT1nJiZudWxsIT0oZz1lP2UoZyxwKTpnKSYmKChmfHxoKSYmKGc9e3ZhbHVlOmd9LGYmJihnLmtleT10aGlzLmtleSksaCYmKGcucGF0aD1wKSkscy5xdWV1ZShnKSksdGhpcy52YWx1ZSYmZGVsZXRlIHRoaXMudmFsdWVbdGhpcy5rZXldLHRoaXMuc3RhY2spT2JqZWN0LmlzRnJvemVuKHRoaXMuc3RhY2tbeV0pfHwodGhpcy5zdGFja1t5XS52YWx1ZT1udWxsKX19fSxhLl9vblRva2VuPWEub25Ub2tlbixhLm9uVG9rZW49ZnVuY3Rpb24oZSxyKXthLl9vblRva2VuKGUsciksMD09PXRoaXMuc3RhY2subGVuZ3RoJiZzLnJvb3QmJih0fHxzLnF1ZXVlKHMucm9vdCkscy5yb290PW51bGwpfSxhLm9uRXJyb3I9ZnVuY3Rpb24odCl7dC5tZXNzYWdlLmluZGV4T2YoImF0IHBvc2l0aW9uIik+LTEmJih0Lm1lc3NhZ2U9IkludmFsaWQgSlNPTiAoIit0Lm1lc3NhZ2UrIikiKSxzLmVtaXQoImVycm9yIix0KX0sc319LHBvPWZ1bmN0aW9uKHQsZSl7cmV0dXJuKHBvPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbih0LGUpe3QuX19wcm90b19fPWV9fHxmdW5jdGlvbih0LGUpe2Zvcih2YXIgciBpbiBlKWUuaGFzT3duUHJvcGVydHkocikmJih0W3JdPWVbcl0pfSkodCxlKX07dmFyIGdvLHlvPS9bXFwiXHUwMDAwLVx1MDAxZlx1MDA3Zi1cdTAwOWZcdTAwYWRcdTA2MDAtXHUwNjA0XHUwNzBmXHUxN2I0XHUxN2I1XHUyMDBjLVx1MjAwZlx1MjAyOC1cdTIwMmZcdTIwNjAtXHUyMDZmXHVmZWZmXHVmZmYwLVx1ZmZmZl0vZyx2bz17IlxiIjoiXFxiIiwiXHQiOiJcXHQiLCJcbiI6IlxcbiIsIlxmIjoiXFxmIiwiXHIiOiJcXHIiLCciJzonXFwiJywiXFwiOiJcXFxcIn07ZnVuY3Rpb24gYm8odCl7cmV0dXJuIHQ/ImZ1bmN0aW9uIj09dHlwZW9mIHQudGhlbj9nby5Qcm9taXNlOmZ1bmN0aW9uKHQpe3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiB0LnJlYWQmJiJmdW5jdGlvbiI9PXR5cGVvZiB0LnBhdXNlJiYiZnVuY3Rpb24iPT10eXBlb2YgdC5yZXN1bWUmJiJmdW5jdGlvbiI9PXR5cGVvZiB0LnBpcGUmJiJmdW5jdGlvbiI9PXR5cGVvZiB0Lm9uY2UmJiJmdW5jdGlvbiI9PXR5cGVvZiB0LnJlbW92ZUxpc3RlbmVyfSh0KT90Ll9yZWFkYWJsZVN0YXRlLm9iamVjdE1vZGU/Z28uUmVhZGFibGVPYmplY3Q6Z28uUmVhZGFibGVTdHJpbmc6QXJyYXkuaXNBcnJheSh0KT9nby5BcnJheToib2JqZWN0Ij09PXIodCl8fHQgaW5zdGFuY2VvZiBPYmplY3Q/Z28uT2JqZWN0OmdvLlByaW1pdGl2ZTpnby5QcmltaXRpdmV9IWZ1bmN0aW9uKHQpe3RbdC5BcnJheT0wXT0iQXJyYXkiLHRbdC5PYmplY3Q9MV09Ik9iamVjdCIsdFt0LlJlYWRhYmxlU3RyaW5nPTJdPSJSZWFkYWJsZVN0cmluZyIsdFt0LlJlYWRhYmxlT2JqZWN0PTNdPSJSZWFkYWJsZU9iamVjdCIsdFt0LlByaW1pdGl2ZT00XT0iUHJpbWl0aXZlIix0W3QuUHJvbWlzZT01XT0iUHJvbWlzZSJ9KGdvfHwoZ289e30pKTt2YXIgd289W107d29bZ28uQXJyYXldPSJbIix3b1tnby5PYmplY3RdPSJ7Iix3b1tnby5SZWFkYWJsZVN0cmluZ109JyInLHdvW2dvLlJlYWRhYmxlT2JqZWN0XT0iWyI7dmFyIG1vPVtdO21vW2dvLkFycmF5XT0iXSIsbW9bZ28uT2JqZWN0XT0ifSIsbW9bZ28uUmVhZGFibGVTdHJpbmddPSciJyxtb1tnby5SZWFkYWJsZU9iamVjdF09Il0iO2Zvcih2YXIgX289W10sU289MCxFbz1PYmplY3QuZW50cmllcyhnbyk7U288RW8ubGVuZ3RoO1NvKyspe3ZhciBrbz1Fb1tTb10sUm89a29bMF0sam89a29bMV07Im51bWJlciI9PXR5cGVvZiBqbyYmKF9vW2pvXT0icHJvY2VzcyIrUm8pfWZ1bmN0aW9uIHhvKHQpe3JldHVybiB0LnJlcGxhY2UoeW8sKGZ1bmN0aW9uKHQpe3ZhciBlPXZvW3RdO3JldHVybiJzdHJpbmciPT10eXBlb2YgZT9lOiJcXHUiK3QuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikucGFkU3RhcnQoNCwiMCIpfSkpfWZ1bmN0aW9uIFRvKHQpe3JldHVybiciJyt4byh0KSsnIid9ZnVuY3Rpb24gT28odCxlKXt2YXIgcj10LnJlYWQoZSk7cmV0dXJuIG51bGw9PT1yP25ldyBQcm9taXNlKChmdW5jdGlvbihlLHIpe3ZhciBuPWZ1bmN0aW9uKCl7cmV0dXJuIGUobnVsbCl9O3Qub25jZSgiZW5kIixuKSx0Lm9uY2UoImVycm9yIixyKSx0Lm9uY2UoInJlYWRhYmxlIiwoZnVuY3Rpb24oKXt0LnJlbW92ZUxpc3RlbmVyKCJlbmQiLG4pLHQucmVtb3ZlTGlzdGVuZXIoImVycm9yIixyKSxlKHQucmVhZCgpKX0pKX0pKTpQcm9taXNlLnJlc29sdmUocil9ZnVuY3Rpb24gQW8odCl7cmV0dXJuIHQudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIGJvKHQpPT09Z28uUHJvbWlzZT9Bbyh0KTp0fSkpfXZhciBMbz1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUsbixpLG8pe3ZvaWQgMD09PW8mJihvPSExKTt2YXIgYT10LmNhbGwodGhpcyl8fHRoaXM7YS5jeWNsZT1vLGEuc3RhY2s9W10sYS5kZXB0aD0wLGEucHVzaENhbGxlZD0hMSxhLmVuZD0hMSxhLmlzUmVhZGluZz0hMSxhLnJlYWRNb3JlPSExO3ZhciBzPXIoaSk7cmV0dXJuInN0cmluZyIhPT1zJiYibnVtYmVyIiE9PXN8fChhLmdhcD1OdW1iZXIuaXNGaW5pdGUoaSk/IiAiLnJlcGVhdChpKTppKSxPYmplY3QuYXNzaWduKGEse3Zpc2l0ZWQ6bz9uZXcgV2Vha01hcDpuZXcgV2Vha1NldCxyZXBsYWNlckZ1bmN0aW9uOm4gaW5zdGFuY2VvZiBGdW5jdGlvbiYmbixyZXBsYWNlckFycmF5OkFycmF5LmlzQXJyYXkobikmJm59KSxuIGluc3RhbmNlb2YgRnVuY3Rpb24mJihhLnJlcGxhY2VyRnVuY3Rpb249biksQXJyYXkuaXNBcnJheShuKSYmKGEucmVwbGFjZXJBcnJheT1uKSxhLmFkZFRvU3RhY2soZSksYX1yZXR1cm4gZnVuY3Rpb24odCxlKXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj10fXBvKHQsZSksdC5wcm90b3R5cGU9bnVsbD09PWU/T2JqZWN0LmNyZWF0ZShlKTooci5wcm90b3R5cGU9ZS5wcm90b3R5cGUsbmV3IHIpfShlLHQpLGUucHJvdG90eXBlLmN5Y2xlcj1mdW5jdGlvbih0LGUpe3ZhciByPXRoaXMudmlzaXRlZC5nZXQoZSk7aWYocilyZXR1cm57JHJlZjpyfTt2YXIgbj10aGlzLnBhdGgoKTtyZXR1cm4gdm9pZCAwIT09dCYmbi5wdXNoKHQpLG49bi5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiJbIisoTnVtYmVyLmlzSW50ZWdlcih0KT90OlRvKHQpKSsiXSJ9KSksdGhpcy52aXNpdGVkLnNldChlLG4ubGVuZ3RoPyIkIituLmpvaW4oIiIpOiIkIiksZX0sZS5wcm90b3R5cGUuYWRkVG9TdGFjaz1mdW5jdGlvbih0LGUsbixpKXt2YXIgbyxhLHM9dGhpcyx1PXQ7dGhpcy5yZXBsYWNlckZ1bmN0aW9uJiYodT10aGlzLnJlcGxhY2VyRnVuY3Rpb24oZXx8bix1LHRoaXMpKSx1JiZ1LnRvSlNPTiBpbnN0YW5jZW9mIEZ1bmN0aW9uJiYodT11LnRvSlNPTigpKSwodSBpbnN0YW5jZW9mIEZ1bmN0aW9ufHwic3ltYm9sIj09PXIodCkpJiYodT12b2lkIDApLHZvaWQgMCE9PWUmJnRoaXMucmVwbGFjZXJBcnJheSYmKHRoaXMucmVwbGFjZXJBcnJheS5pbmNsdWRlcyhlKXx8KHU9dm9pZCAwKSk7dmFyIGY9Ym8odSk7aWYoKGkmJmkudHlwZT09PWdvLkFycmF5fHx2b2lkIDAhPT11KSYmZiE9PWdvLlByb21pc2UmJihpJiYhaS5maXJzdCYmdGhpcy5fcHVzaCgiLCIpLGkmJihpLmZpcnN0PSExKSksdm9pZCAwIT09dSYmZiE9PWdvLlByb21pc2UmJmUmJih0aGlzLmdhcD90aGlzLl9wdXNoKCJcbiIrdGhpcy5nYXAucmVwZWF0KHRoaXMuZGVwdGgpKyciJyt4byhlKSsnIjogJyk6dGhpcy5fcHVzaCgnIicreG8oZSkrJyI6JykpLGYhPT1nby5QcmltaXRpdmUpaWYodGhpcy5jeWNsZSlmPWJvKHU9dGhpcy5jeWNsZXIoZXx8bix1KSk7ZWxzZXtpZih0aGlzLnZpc2l0ZWQuaGFzKHUpKXRocm93IE9iamVjdC5hc3NpZ24obmV3IEVycm9yKCJDb252ZXJ0aW5nIGNpcmN1bGFyIHN0cnVjdHVyZSB0byBKU09OIikse3JlYWxWYWx1ZTp1LGtleTplfHxufSk7dGhpcy52aXNpdGVkLmFkZCh1KX0hZSYmbj4tMSYmdGhpcy5kZXB0aCYmdGhpcy5nYXAmJnRoaXMuX3B1c2goIlxuIit0aGlzLmdhcC5yZXBlYXQodGhpcy5kZXB0aCkpO3ZhciBoPXdvW2ZdO2gmJnRoaXMuX3B1c2goaCk7dmFyIGM9e2tleTplLGluZGV4Om4sdHlwZTpmLHBhcmVudDppLHZhbHVlOnUsZmlyc3Q6ITB9O3JldHVybiBmPT09Z28uT2JqZWN0Pyh0aGlzLmRlcHRoKz0xLGMudW5yZWFkPU9iamVjdC5rZXlzKHUpLGMuaXNFbXB0eT0hYy51bnJlYWQubGVuZ3RoKTpmPT09Z28uQXJyYXk/KHRoaXMuZGVwdGgrPTEsYy51bnJlYWQ9dS5sZW5ndGgsYy5hcnJheUxlbmd0aD1jLnVucmVhZCxjLmlzRW1wdHk9IWMudW5yZWFkKTpmIT09Z28uUmVhZGFibGVTdHJpbmcmJmYhPT1nby5SZWFkYWJsZU9iamVjdHx8KHRoaXMuZGVwdGgrPTEsdS5yZWFkYWJsZUVuZGVkfHwobnVsbD09PShvPXUuX3JlYWRhYmxlU3RhdGUpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLmVuZEVtaXR0ZWQpP3RoaXMuZW1pdCgiZXJyb3IiLG5ldyBFcnJvcigiUmVhZGFibGUgU3RyZWFtIGhhcyBlbmRlZCBiZWZvcmUgaXQgd2FzIHNlcmlhbGl6ZWQuIEFsbCBzdHJlYW0gZGF0YSBoYXZlIGJlZW4gbG9zdCIpLHUsZXx8bik6KHUucmVhZGFibGVGbG93aW5nfHwobnVsbD09PShhPXUuX3JlYWRhYmxlU3RhdGUpfHx2b2lkIDA9PT1hP3ZvaWQgMDphLmZsb3dpbmcpKSYmKHUucGF1c2UoKSx0aGlzLmVtaXQoImVycm9yIixuZXcgRXJyb3IoIlJlYWRhYmxlIFN0cmVhbSBpcyBpbiBmbG93aW5nIG1vZGUsIGRhdGEgbWF5IGhhdmUgYmVlbiBsb3N0LiBUcnlpbmcgdG8gcGF1c2Ugc3RyZWFtLiIpLHUsZXx8bikpLGMucmVhZENvdW50PTAsdS5vbmNlKCJlbmQiLChmdW5jdGlvbigpe2MuZW5kPSEwLHMuX19yZWFkKCl9KSksdS5vbmNlKCJlcnJvciIsKGZ1bmN0aW9uKHQpe3MuZXJyb3I9ITAscy5lbWl0KCJlcnJvciIsdCl9KSkpLHRoaXMuc3RhY2sudW5zaGlmdChjKSxjfSxlLnByb3RvdHlwZS5yZW1vdmVGcm9tU3RhY2s9ZnVuY3Rpb24odCl7dmFyIGU9dC50eXBlLHI9ZT09PWdvLk9iamVjdHx8ZT09PWdvLkFycmF5fHxlPT09Z28uUmVhZGFibGVTdHJpbmd8fGU9PT1nby5SZWFkYWJsZU9iamVjdDtlIT09Z28uUHJpbWl0aXZlJiYodGhpcy5jeWNsZXx8dGhpcy52aXNpdGVkLmRlbGV0ZSh0LnZhbHVlKSxyJiYodGhpcy5kZXB0aC09MSkpO3ZhciBuPW1vW2VdO3ImJiF0LmlzRW1wdHkmJnRoaXMuZ2FwJiZ0aGlzLl9wdXNoKCJcbiIrdGhpcy5nYXAucmVwZWF0KHRoaXMuZGVwdGgpKSxuJiZ0aGlzLl9wdXNoKG4pO3ZhciBpPXRoaXMuc3RhY2suaW5kZXhPZih0KTt0aGlzLnN0YWNrLnNwbGljZShpLDEpfSxlLnByb3RvdHlwZS5fcHVzaD1mdW5jdGlvbih0KXt0aGlzLnB1c2hDYWxsZWQ9ITAsdGhpcy5wdXNoKHQpfSxlLnByb3RvdHlwZS5wcm9jZXNzUmVhZGFibGVPYmplY3Q9ZnVuY3Rpb24odCxlKXt2YXIgcj10aGlzO2lmKCF0LmVuZClyZXR1cm4gT28odC52YWx1ZSxlKS50aGVuKChmdW5jdGlvbihlKXtudWxsIT09ZSYmKHQuZmlyc3R8fHIuX3B1c2goIiwiKSx0LmZpcnN0PSExLHIuYWRkVG9TdGFjayhlLHZvaWQgMCx0LnJlYWRDb3VudCksdC5yZWFkQ291bnQrPTEpfSkpO3RoaXMucmVtb3ZlRnJvbVN0YWNrKHQpfSxlLnByb3RvdHlwZS5wcm9jZXNzT2JqZWN0PWZ1bmN0aW9uKHQpe2lmKHQudW5yZWFkLmxlbmd0aCl7dmFyIGU9dC51bnJlYWQuc2hpZnQoKSxyPXQudmFsdWVbZV07dGhpcy5hZGRUb1N0YWNrKHIsZSx2b2lkIDAsdCl9ZWxzZSB0aGlzLnJlbW92ZUZyb21TdGFjayh0KX0sZS5wcm90b3R5cGUucHJvY2Vzc0FycmF5PWZ1bmN0aW9uKHQpe3ZhciBlPXQudW5yZWFkO2lmKGUpe3ZhciByPXQuYXJyYXlMZW5ndGgtZSxuPXQudmFsdWVbcl07dC51bnJlYWQtPTEsdGhpcy5hZGRUb1N0YWNrKG4sdm9pZCAwLHIsdCl9ZWxzZSB0aGlzLnJlbW92ZUZyb21TdGFjayh0KX0sZS5wcm90b3R5cGUucHJvY2Vzc1ByaW1pdGl2ZT1mdW5jdGlvbih0KXtpZih2b2lkIDAhPT10LnZhbHVlKXt2YXIgZSxuPXIodC52YWx1ZSk7c3dpdGNoKG4pe2Nhc2Uic3RyaW5nIjplPVRvKHQudmFsdWUpO2JyZWFrO2Nhc2UibnVtYmVyIjplPU51bWJlci5pc0Zpbml0ZSh0LnZhbHVlKT9TdHJpbmcodC52YWx1ZSk6Im51bGwiO2JyZWFrO2Nhc2UiYm9vbGVhbiI6ZT1TdHJpbmcodC52YWx1ZSk7YnJlYWs7Y2FzZSJvYmplY3QiOnQudmFsdWV8fChlPSJudWxsIik7YnJlYWs7ZGVmYXVsdDp0aHJvdyBPYmplY3QuYXNzaWduKG5ldyBFcnJvcignVW5rbm93biB0eXBlICInK24rJyIuIFBsZWFzZSBmaWxlIGFuIGlzc3VlIScpLHt2YWx1ZTp0LnZhbHVlfSl9dGhpcy5fcHVzaChlKX1lbHNlIXRoaXMuc3RhY2tbMV18fHRoaXMuc3RhY2tbMV0udHlwZSE9PWdvLkFycmF5JiZ0aGlzLnN0YWNrWzFdLnR5cGUhPT1nby5SZWFkYWJsZU9iamVjdD90LmFkZFNlcGFyYXRvckFmdGVyRW5kPSExOnRoaXMuX3B1c2goIm51bGwiKTt0aGlzLnJlbW92ZUZyb21TdGFjayh0KX0sZS5wcm90b3R5cGUucHJvY2Vzc1JlYWRhYmxlU3RyaW5nPWZ1bmN0aW9uKHQsZSl7dmFyIHI9dGhpcztpZighdC5lbmQpcmV0dXJuIE9vKHQudmFsdWUsZSkudGhlbigoZnVuY3Rpb24odCl7dCYmci5fcHVzaCh4byh0LnRvU3RyaW5nKCkpKX0pKTt0aGlzLnJlbW92ZUZyb21TdGFjayh0KX0sZS5wcm90b3R5cGUucHJvY2Vzc1Byb21pc2U9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztyZXR1cm4gQW8odC52YWx1ZSkudGhlbigoZnVuY3Rpb24ocil7ZS5yZW1vdmVGcm9tU3RhY2sodCksZS5hZGRUb1N0YWNrKHIsdC5rZXksdC5pbmRleCx0LnBhcmVudCl9KSl9LGUucHJvdG90eXBlLnByb2Nlc3NTdGFja1RvcEl0ZW09ZnVuY3Rpb24odCl7dmFyIGUscj10aGlzLG49dGhpcy5zdGFja1swXTtpZighbnx8dGhpcy5lcnJvcilyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7dHJ5e2U9dGhpc1tfb1tuLnR5cGVdXShuLHQpfWNhdGNoKHQpe3JldHVybiBQcm9taXNlLnJlamVjdCh0KX1yZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGUpLnRoZW4oKGZ1bmN0aW9uKCl7MD09PXIuc3RhY2subGVuZ3RoJiYoci5lbmQ9ITAsci5fcHVzaChudWxsKSl9KSl9LGUucHJvdG90eXBlLl9fcmVhZD1mdW5jdGlvbih0KXt2YXIgZT10aGlzO2lmKCF0aGlzLmlzUmVhZGluZyYmIXRoaXMuZXJyb3IpcmV0dXJuIHRoaXMuaXNSZWFkaW5nPSEwLHRoaXMucmVhZE1vcmU9ITEsdGhpcy5wcm9jZXNzU3RhY2tUb3BJdGVtKHQpLnRoZW4oKGZ1bmN0aW9uKCl7IWUuZW5kJiYhZS5lcnJvciYmKGUucmVhZE1vcmV8fCFlLnB1c2hDYWxsZWQpP19uKChmdW5jdGlvbigpe2UuaXNSZWFkaW5nPSExLGUuX19yZWFkKCl9KSk6ZS5pc1JlYWRpbmc9ITF9KSkuY2F0Y2goKGZ1bmN0aW9uKHQpe2UuZXJyb3I9ITAsZS5lbWl0KCJlcnJvciIsdCl9KSk7dGhpcy5yZWFkTW9yZT0hMH0sZS5wcm90b3R5cGUuX3JlYWQ9ZnVuY3Rpb24odCl7dGhpcy5wdXNoQ2FsbGVkPSExLHRoaXMuX19yZWFkKHQpfSxlLnByb3RvdHlwZS5wYXRoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RhY2subWFwKChmdW5jdGlvbih0KXt2YXIgZT10LmtleSxyPXQuaW5kZXg7cmV0dXJuIGV8fHJ9KSkuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gdHx8dD4tMX0pKS5yZXZlcnNlKCl9LGV9KEFpKSxDbz1BcnJheS5pc0FycmF5LE1vPSJvYmplY3QiPT1yKG4pJiZuJiZuLk9iamVjdD09PU9iamVjdCYmbixQbz0ib2JqZWN0Ij09KCJ1bmRlZmluZWQiPT10eXBlb2Ygc2VsZj8idW5kZWZpbmVkIjpyKHNlbGYpKSYmc2VsZiYmc2VsZi5PYmplY3Q9PT1PYmplY3QmJnNlbGYsQm89TW98fFBvfHxGdW5jdGlvbigicmV0dXJuIHRoaXMiKSgpLE5vPUJvLlN5bWJvbCxVbz1PYmplY3QucHJvdG90eXBlLERvPVVvLmhhc093blByb3BlcnR5LElvPVVvLnRvU3RyaW5nLEZvPU5vP05vLnRvU3RyaW5nVGFnOnZvaWQgMDt2YXIgcW89ZnVuY3Rpb24odCl7dmFyIGU9RG8uY2FsbCh0LEZvKSxyPXRbRm9dO3RyeXt0W0ZvXT12b2lkIDA7dmFyIG49ITB9Y2F0Y2godCl7fXZhciBpPUlvLmNhbGwodCk7cmV0dXJuIG4mJihlP3RbRm9dPXI6ZGVsZXRlIHRbRm9dKSxpfSxXbz1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO3ZhciB6bz1mdW5jdGlvbih0KXtyZXR1cm4gV28uY2FsbCh0KX0sWW89Tm8/Tm8udG9TdHJpbmdUYWc6dm9pZCAwO3ZhciAkbz1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09dD92b2lkIDA9PT10PyJbb2JqZWN0IFVuZGVmaW5lZF0iOiJbb2JqZWN0IE51bGxdIjpZbyYmWW8gaW4gT2JqZWN0KHQpP3FvKHQpOnpvKHQpfTt2YXIgR289ZnVuY3Rpb24odCl7cmV0dXJuIG51bGwhPXQmJiJvYmplY3QiPT1yKHQpfTt2YXIgSG89ZnVuY3Rpb24odCl7cmV0dXJuInN5bWJvbCI9PXIodCl8fEdvKHQpJiYiW29iamVjdCBTeW1ib2xdIj09JG8odCl9LEpvPS9cLnxcWyg/OlteW1xdXSp8KFsiJ10pKD86KD8hXDEpW15cXF18XFwuKSo/XDEpXF0vLFZvPS9eXHcqJC87dmFyIEtvPWZ1bmN0aW9uKHQsZSl7aWYoQ28odCkpcmV0dXJuITE7dmFyIG49cih0KTtyZXR1cm4hKCJudW1iZXIiIT1uJiYic3ltYm9sIiE9biYmImJvb2xlYW4iIT1uJiZudWxsIT10JiYhSG8odCkpfHwoVm8udGVzdCh0KXx8IUpvLnRlc3QodCl8fG51bGwhPWUmJnQgaW4gT2JqZWN0KGUpKX07dmFyIFpvPWZ1bmN0aW9uKHQpe3ZhciBlPXIodCk7cmV0dXJuIG51bGwhPXQmJigib2JqZWN0Ij09ZXx8ImZ1bmN0aW9uIj09ZSl9O3ZhciBYbyxRbz1mdW5jdGlvbih0KXtpZighWm8odCkpcmV0dXJuITE7dmFyIGU9JG8odCk7cmV0dXJuIltvYmplY3QgRnVuY3Rpb25dIj09ZXx8IltvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dIj09ZXx8IltvYmplY3QgQXN5bmNGdW5jdGlvbl0iPT1lfHwiW29iamVjdCBQcm94eV0iPT1lfSx0YT1Cb1siX19jb3JlLWpzX3NoYXJlZF9fIl0sZWE9KFhvPS9bXi5dKyQvLmV4ZWModGEmJnRhLmtleXMmJnRhLmtleXMuSUVfUFJPVE98fCIiKSk/IlN5bWJvbChzcmMpXzEuIitYbzoiIjt2YXIgcmE9ZnVuY3Rpb24odCl7cmV0dXJuISFlYSYmZWEgaW4gdH0sbmE9RnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO3ZhciBpYT1mdW5jdGlvbih0KXtpZihudWxsIT10KXt0cnl7cmV0dXJuIG5hLmNhbGwodCl9Y2F0Y2godCl7fXRyeXtyZXR1cm4gdCsiIn1jYXRjaCh0KXt9fXJldHVybiIifSxvYT0vXlxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXF0kLyxhYT1GdW5jdGlvbi5wcm90b3R5cGUsc2E9T2JqZWN0LnByb3RvdHlwZSx1YT1hYS50b1N0cmluZyxmYT1zYS5oYXNPd25Qcm9wZXJ0eSxoYT1SZWdFeHAoIl4iK3VhLmNhbGwoZmEpLnJlcGxhY2UoL1tcXF4kLiorPygpW1xde318XS9nLCJcXCQmIikucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXCgpfCBmb3IgLis/KD89XFxcXSkvZywiJDEuKj8iKSsiJCIpO3ZhciBjYT1mdW5jdGlvbih0KXtyZXR1cm4hKCFabyh0KXx8cmEodCkpJiYoUW8odCk/aGE6b2EpLnRlc3QoaWEodCkpfTt2YXIgbGE9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbnVsbD09dD92b2lkIDA6dFtlXX07dmFyIGRhPWZ1bmN0aW9uKHQsZSl7dmFyIHI9bGEodCxlKTtyZXR1cm4gY2Eocik/cjp2b2lkIDB9LHBhPWRhKE9iamVjdCwiY3JlYXRlIik7dmFyIGdhPWZ1bmN0aW9uKCl7dGhpcy5fX2RhdGFfXz1wYT9wYShudWxsKTp7fSx0aGlzLnNpemU9MH07dmFyIHlhPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuaGFzKHQpJiZkZWxldGUgdGhpcy5fX2RhdGFfX1t0XTtyZXR1cm4gdGhpcy5zaXplLT1lPzE6MCxlfSx2YT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O3ZhciBiYT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl9fZGF0YV9fO2lmKHBhKXt2YXIgcj1lW3RdO3JldHVybiJfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fIj09PXI/dm9pZCAwOnJ9cmV0dXJuIHZhLmNhbGwoZSx0KT9lW3RdOnZvaWQgMH0sd2E9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTt2YXIgbWE9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fX2RhdGFfXztyZXR1cm4gcGE/dm9pZCAwIT09ZVt0XTp3YS5jYWxsKGUsdCl9O3ZhciBfYT1mdW5jdGlvbih0LGUpe3ZhciByPXRoaXMuX19kYXRhX187cmV0dXJuIHRoaXMuc2l6ZSs9dGhpcy5oYXModCk/MDoxLHJbdF09cGEmJnZvaWQgMD09PWU/Il9fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18iOmUsdGhpc307ZnVuY3Rpb24gU2EodCl7dmFyIGU9LTEscj1udWxsPT10PzA6dC5sZW5ndGg7Zm9yKHRoaXMuY2xlYXIoKTsrK2U8cjspe3ZhciBuPXRbZV07dGhpcy5zZXQoblswXSxuWzFdKX19U2EucHJvdG90eXBlLmNsZWFyPWdhLFNhLnByb3RvdHlwZS5kZWxldGU9eWEsU2EucHJvdG90eXBlLmdldD1iYSxTYS5wcm90b3R5cGUuaGFzPW1hLFNhLnByb3RvdHlwZS5zZXQ9X2E7dmFyIEVhPVNhO3ZhciBrYT1mdW5jdGlvbigpe3RoaXMuX19kYXRhX189W10sdGhpcy5zaXplPTB9O3ZhciBSYT1mdW5jdGlvbih0LGUpe3JldHVybiB0PT09ZXx8dCE9dCYmZSE9ZX07dmFyIGphPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciByPXQubGVuZ3RoO3ItLTspaWYoUmEodFtyXVswXSxlKSlyZXR1cm4gcjtyZXR1cm4tMX0seGE9QXJyYXkucHJvdG90eXBlLnNwbGljZTt2YXIgVGE9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fX2RhdGFfXyxyPWphKGUsdCk7cmV0dXJuIShyPDApJiYocj09ZS5sZW5ndGgtMT9lLnBvcCgpOnhhLmNhbGwoZSxyLDEpLC0tdGhpcy5zaXplLCEwKX07dmFyIE9hPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX19kYXRhX18scj1qYShlLHQpO3JldHVybiByPDA/dm9pZCAwOmVbcl1bMV19O3ZhciBBYT1mdW5jdGlvbih0KXtyZXR1cm4gamEodGhpcy5fX2RhdGFfXyx0KT4tMX07dmFyIExhPWZ1bmN0aW9uKHQsZSl7dmFyIHI9dGhpcy5fX2RhdGFfXyxuPWphKHIsdCk7cmV0dXJuIG48MD8oKyt0aGlzLnNpemUsci5wdXNoKFt0LGVdKSk6cltuXVsxXT1lLHRoaXN9O2Z1bmN0aW9uIENhKHQpe3ZhciBlPS0xLHI9bnVsbD09dD8wOnQubGVuZ3RoO2Zvcih0aGlzLmNsZWFyKCk7KytlPHI7KXt2YXIgbj10W2VdO3RoaXMuc2V0KG5bMF0sblsxXSl9fUNhLnByb3RvdHlwZS5jbGVhcj1rYSxDYS5wcm90b3R5cGUuZGVsZXRlPVRhLENhLnByb3RvdHlwZS5nZXQ9T2EsQ2EucHJvdG90eXBlLmhhcz1BYSxDYS5wcm90b3R5cGUuc2V0PUxhO3ZhciBNYT1DYSxQYT1kYShCbywiTWFwIik7dmFyIEJhPWZ1bmN0aW9uKCl7dGhpcy5zaXplPTAsdGhpcy5fX2RhdGFfXz17aGFzaDpuZXcgRWEsbWFwOm5ldyhQYXx8TWEpLHN0cmluZzpuZXcgRWF9fTt2YXIgTmE9ZnVuY3Rpb24odCl7dmFyIGU9cih0KTtyZXR1cm4ic3RyaW5nIj09ZXx8Im51bWJlciI9PWV8fCJzeW1ib2wiPT1lfHwiYm9vbGVhbiI9PWU/Il9fcHJvdG9fXyIhPT10Om51bGw9PT10fTt2YXIgVWE9ZnVuY3Rpb24odCxlKXt2YXIgcj10Ll9fZGF0YV9fO3JldHVybiBOYShlKT9yWyJzdHJpbmciPT10eXBlb2YgZT8ic3RyaW5nIjoiaGFzaCJdOnIubWFwfTt2YXIgRGE9ZnVuY3Rpb24odCl7dmFyIGU9VWEodGhpcyx0KS5kZWxldGUodCk7cmV0dXJuIHRoaXMuc2l6ZS09ZT8xOjAsZX07dmFyIElhPWZ1bmN0aW9uKHQpe3JldHVybiBVYSh0aGlzLHQpLmdldCh0KX07dmFyIEZhPWZ1bmN0aW9uKHQpe3JldHVybiBVYSh0aGlzLHQpLmhhcyh0KX07dmFyIHFhPWZ1bmN0aW9uKHQsZSl7dmFyIHI9VWEodGhpcyx0KSxuPXIuc2l6ZTtyZXR1cm4gci5zZXQodCxlKSx0aGlzLnNpemUrPXIuc2l6ZT09bj8wOjEsdGhpc307ZnVuY3Rpb24gV2EodCl7dmFyIGU9LTEscj1udWxsPT10PzA6dC5sZW5ndGg7Zm9yKHRoaXMuY2xlYXIoKTsrK2U8cjspe3ZhciBuPXRbZV07dGhpcy5zZXQoblswXSxuWzFdKX19V2EucHJvdG90eXBlLmNsZWFyPUJhLFdhLnByb3RvdHlwZS5kZWxldGU9RGEsV2EucHJvdG90eXBlLmdldD1JYSxXYS5wcm90b3R5cGUuaGFzPUZhLFdhLnByb3RvdHlwZS5zZXQ9cWE7dmFyIHphPVdhO2Z1bmN0aW9uIFlhKHQsZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIHR8fG51bGwhPWUmJiJmdW5jdGlvbiIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoIkV4cGVjdGVkIGEgZnVuY3Rpb24iKTt2YXIgcj1mdW5jdGlvbiByKCl7dmFyIG49YXJndW1lbnRzLGk9ZT9lLmFwcGx5KHRoaXMsbik6blswXSxvPXIuY2FjaGU7aWYoby5oYXMoaSkpcmV0dXJuIG8uZ2V0KGkpO3ZhciBhPXQuYXBwbHkodGhpcyxuKTtyZXR1cm4gci5jYWNoZT1vLnNldChpLGEpfHxvLGF9O3JldHVybiByLmNhY2hlPW5ldyhZYS5DYWNoZXx8emEpLHJ9WWEuQ2FjaGU9emE7dmFyICRhPVlhO3ZhciBHYT0vW14uW1xdXSt8XFsoPzooLT9cZCsoPzpcLlxkKyk/KXwoWyInXSkoKD86KD8hXDIpW15cXF18XFwuKSo/KVwyKVxdfCg/PSg/OlwufFxbXF0pKD86XC58XFtcXXwkKSkvZyxIYT0vXFwoXFwpPy9nLEphPWZ1bmN0aW9uKHQpe3ZhciBlPSRhKHQsKGZ1bmN0aW9uKHQpe3JldHVybiA1MDA9PT1yLnNpemUmJnIuY2xlYXIoKSx0fSkpLHI9ZS5jYWNoZTtyZXR1cm4gZX0oKGZ1bmN0aW9uKHQpe3ZhciBlPVtdO3JldHVybiA0Nj09PXQuY2hhckNvZGVBdCgwKSYmZS5wdXNoKCIiKSx0LnJlcGxhY2UoR2EsKGZ1bmN0aW9uKHQscixuLGkpe2UucHVzaChuP2kucmVwbGFjZShIYSwiJDEiKTpyfHx0KX0pKSxlfSkpO3ZhciBWYT1mdW5jdGlvbih0LGUpe2Zvcih2YXIgcj0tMSxuPW51bGw9PXQ/MDp0Lmxlbmd0aCxpPUFycmF5KG4pOysrcjxuOylpW3JdPWUodFtyXSxyLHQpO3JldHVybiBpfSxLYT1Obz9Oby5wcm90b3R5cGU6dm9pZCAwLFphPUthP0thLnRvU3RyaW5nOnZvaWQgMDt2YXIgWGE9ZnVuY3Rpb24gdChlKXtpZigic3RyaW5nIj09dHlwZW9mIGUpcmV0dXJuIGU7aWYoQ28oZSkpcmV0dXJuIFZhKGUsdCkrIiI7aWYoSG8oZSkpcmV0dXJuIFphP1phLmNhbGwoZSk6IiI7dmFyIHI9ZSsiIjtyZXR1cm4iMCI9PXImJjEvZT09LUluZmluaXR5PyItMCI6cn07dmFyIFFhPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsPT10PyIiOlhhKHQpfTt2YXIgdHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gQ28odCk/dDpLbyh0LGUpP1t0XTpKYShRYSh0KSl9O3ZhciBlcz1mdW5jdGlvbih0KXtpZigic3RyaW5nIj09dHlwZW9mIHR8fEhvKHQpKXJldHVybiB0O3ZhciBlPXQrIiI7cmV0dXJuIjAiPT1lJiYxL3Q9PS1JbmZpbml0eT8iLTAiOmV9O3ZhciBycz1mdW5jdGlvbih0LGUpe2Zvcih2YXIgcj0wLG49KGU9dHMoZSx0KSkubGVuZ3RoO251bGwhPXQmJnI8bjspdD10W2VzKGVbcisrXSldO3JldHVybiByJiZyPT1uP3Q6dm9pZCAwfTt2YXIgbnM9ZnVuY3Rpb24odCxlLHIpe3ZhciBuPW51bGw9PXQ/dm9pZCAwOnJzKHQsZSk7cmV0dXJuIHZvaWQgMD09PW4/cjpufTt2YXIgaXM9ZnVuY3Rpb24odCl7cmV0dXJuIm51bWJlciI9PXR5cGVvZiB0fHxHbyh0KSYmIltvYmplY3QgTnVtYmVyXSI9PSRvKHQpfTtmdW5jdGlvbiBvcyh0KXtyZXR1cm4iW29iamVjdCBTdHJpbmddIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KX1mdW5jdGlvbiBhcyh0KXtyZXR1cm4hKCFvcyh0KXx8IiI9PT10KX1mdW5jdGlvbiBzcyh0KXtyZXR1cm4iW29iamVjdCBBcnJheV0iPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpfWZ1bmN0aW9uIHVzKHQpe3JldHVybiJbb2JqZWN0IFVuZGVmaW5lZF0iPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpfWZ1bmN0aW9uIGZzKHQpe3JldHVybiJbb2JqZWN0IE9iamVjdF0iPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpfWZ1bmN0aW9uIGhzKHQpe3JldHVybiEoIW9zKHQpfHwiIiE9PXQpfWZ1bmN0aW9uIGNzKHQpe3JldHVybiEhdXModCl8fCghIWZ1bmN0aW9uKHQpe3JldHVybiJbb2JqZWN0IE51bGxdIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KX0odCl8fCghIWZ1bmN0aW9uKHQpe2lmKGZzKHQpKXtmb3IodmFyIGUgaW4gdClyZXR1cm4hMTtyZXR1cm4hMH1yZXR1cm4hMX0odCl8fCghIWhzKHQpfHwhIWZ1bmN0aW9uKHQpe3JldHVybiEhc3ModCkmJjA9PT10Lmxlbmd0aH0odCkpKSl9ZnVuY3Rpb24gbHMoKXt2YXIgdCxlLHI9bmV3IFByb21pc2UoKGZ1bmN0aW9uKCl7dD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV19KSk7cmV0dXJuIHIucmVzb2x2ZT10LHIucmVqZWN0PWUscn1mdW5jdGlvbiBkcygpe3JldHVybihkcz1lKGEubWFyaygoZnVuY3Rpb24gdChlKXt2YXIgcjtyZXR1cm4gYS53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDppZihhcyhlKSl7dC5uZXh0PTI7YnJlYWt9cmV0dXJuIHQuYWJydXB0KCJyZXR1cm4iLHt9KTtjYXNlIDI6cj17fTt0cnl7cj1KU09OLnBhcnNlKGUpfWNhdGNoKHQpe3I9e319cmV0dXJuIHQuYWJydXB0KCJyZXR1cm4iLHIpO2Nhc2UgNTpjYXNlImVuZCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQpfSkpKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIHBzKCl7cmV0dXJuKHBzPWUoYS5tYXJrKChmdW5jdGlvbiB0KGUpe3ZhciByO3JldHVybiBhLndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOmlmKCF1cyhlKSl7dC5uZXh0PTI7YnJlYWt9cmV0dXJuIHQuYWJydXB0KCJyZXR1cm4iLCIiKTtjYXNlIDI6cj0iIjt0cnl7cj1KU09OLnN0cmluZ2lmeShlKX1jYXRjaCh0KXtyPSIifXJldHVybiB0LmFicnVwdCgicmV0dXJuIixyKTtjYXNlIDU6Y2FzZSJlbmQiOnJldHVybiB0LnN0b3AoKX19KSx0KX0pKSkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZ3M9e3BhcnNlOmZ1bmN0aW9uKHQpe3JldHVybiBkcy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LHBhcnNlQnlTdHJlYW06ZnVuY3Rpb24odCl7dmFyIGU9e307aWYoIm51bGwiPT09dClyZXR1cm4gbnVsbDtpZigiIj09PXQpcmV0dXJue307dmFyIHI9Il9fc3lzdGVtX18iLG49J3siJy5jb25jYXQociwnIjonKS5jb25jYXQodCwifSIpLGk9bHMoKSxvPU9uKG4pLGE9bG8ucGFyc2UoIiQqIik7cmV0dXJuIGEub24oImRhdGEiLChmdW5jdGlvbih0KXtlW3Qua2V5XT10LnZhbHVlfSkpLGEub24oImVuZCIsKGZ1bmN0aW9uKCl7dmFyIHQ9bnMoZSxyKTtpLnJlc29sdmUodCl9KSksYS5vbigiZXJyb3IiLChmdW5jdGlvbih0KXtpLnJlamVjdCh0KX0pKSxvLnBpcGUoYSksaX0sY3JlYXRlUGFyc2VTdHJlYW06ZnVuY3Rpb24odCl7cmV0dXJuIGFzKHQpfHxmdW5jdGlvbih0KXtyZXR1cm4hKCFzcyh0KXx8MD09PXQubGVuZ3RofHwxPT09dC5sZW5ndGgmJmNzKHRbMF0pKX0odCl8fCh0PSIkKiIpLGxvLnBhcnNlKHQpfSxzdHJpbmdpZnk6ZnVuY3Rpb24odCl7cmV0dXJuIHBzLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sc3RyaW5naWZ5QnlTdHJlYW06ZnVuY3Rpb24odCl7dmFyIGU9IiI7aWYodXModCkpcmV0dXJuIiI7aWYobnVsbD09PXQpcmV0dXJuIm51bGwiO2lmKGhzKHQpKXJldHVybiciIic7aWYoaXModCkpcmV0dXJuIiIuY29uY2F0KHQpO2lmKG9zKHQpKXJldHVybiciJy5jb25jYXQodCwnIicpO3ZhciByPWxzKCksbj1uZXcgTG8odCxudWxsLG51bGwsITEpO3JldHVybiBuLm9uKCJkYXRhIiwoZnVuY3Rpb24odCl7ZSs9dH0pKSxuLm9uKCJlbmQiLChmdW5jdGlvbigpe3IucmVzb2x2ZShlKX0pKSxuLm9uKCJlcnJvciIsKGZ1bmN0aW9uKHQpe3IucmVqZWN0KHQpfSkpLHJ9LGNyZWF0ZVN0cmluZ2lmeVN0cmVhbTpmdW5jdGlvbih0KXtpZighZnModCkmJiFzcyh0KSl0aHJvdyBuZXcgRXJyb3IoImRhdGEgaXMgbm90IG9iamVjdCBvciBhcnJheSIpO3JldHVybiBuZXcgTG8odCxudWxsLG51bGwsITEpfX07bGV0IGdXb3JrZXI2X09ialN0cmVhbT17c3RyaW5naWZ5OmdzLnN0cmluZ2lmeSxwYXJzZTpncy5wYXJzZX07CgpsZXQgaW5zdGFuY2UgPSBudWxsCmZ1bmN0aW9uIGluaXQoaW5wdXQpewoKICAgIC8vaW5pdAogICAgbGV0IHIKICAgIAogICAgICAgIHIgPSBnV29ya2VyNl9PYmpTdHJlYW0oLi4uaW5wdXQpCiAgICAgICAgCgogICAgLy9vbgogICAgCgogICAgLy9zYXZlCiAgICBpbnN0YW5jZSA9IHIKCn0KCmZ1bmN0aW9uIHNlbmRNZXNzYWdlKGRhdGEpIHsKICAgIAogICAgICAgIHBhcmVudFBvcnQucG9zdE1lc3NhZ2UoZGF0YSkKICAgICAgICAKfQoKYXN5bmMgZnVuY3Rpb24gcnVuKGRhdGEpIHsKICAgIC8vIGNvbnNvbGUubG9nKCdpbm5lciB3b3JrZXIgcnVuJyxkYXRhKQoKICAgIC8vbW9kZQogICAgbGV0IG1vZGUgPSBkYXRhLm1vZGUKCiAgICAvL2NoZWNrCiAgICBpZihtb2RlICE9PSAnaW5pdCcgJiYgbW9kZSAhPT0gJ2NhbGwnKXsKICAgICAgICByZXR1cm4KICAgIH0KCiAgICAvL2luaXQKICAgIGlmKG1vZGUgPT09ICdpbml0Jyl7CiAgICAgICAgCiAgICAgICAgdHJ5ewoKICAgICAgICAgICAgLy90eXBlCiAgICAgICAgICAgIGxldCB0eXBlID0gZGF0YS50eXBlCgogICAgICAgICAgICAvL2lucHV0CiAgICAgICAgICAgIGxldCBpbnB1dCA9IGRhdGEuaW5wdXQKICAgIAogICAgICAgICAgICAvL2luc3RhbmNlCiAgICAgICAgICAgIGlmKHR5cGUgPT09ICdmdW5jdGlvbicpewogICAgICAgICAgICAgICAgaW5pdCguLi5pbnB1dCkKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmKHR5cGUgPT09ICdvYmplY3QnKXsKICAgICAgICAgICAgICAgIGluc3RhbmNlID0gZ1dvcmtlcjZfT2JqU3RyZWFtCiAgICAgICAgICAgIH0KCiAgICAgICAgfQogICAgICAgIGNhdGNoKGVycil7CiAgICAgICAgCiAgICAgICAgICAgIC8vc2VuZE1lc3NhZ2UKICAgICAgICAgICAgbGV0IHJlcyA9IHsKICAgICAgICAgICAgICAgIG1vZGU6ICdlbWl0JywKICAgICAgICAgICAgICAgIGV2TmFtZTogJ2Vycm9yJywKICAgICAgICAgICAgICAgIG1zZzogZXJyLAogICAgICAgICAgICB9CiAgICAgICAgICAgIHNlbmRNZXNzYWdlKHJlcykKCiAgICAgICAgfQogICAgICAgICAgICAKICAgIH0KCiAgICAvL2NoZWNrCiAgICBpZihtb2RlID09PSAnY2FsbCcpewogICAgICAgIGxldCBzdGF0ZSA9ICcnCiAgICAgICAgbGV0IG1zZyA9IG51bGwKCiAgICAgICAgdHJ5ewoKICAgICAgICAgICAgLy9mdW4KICAgICAgICAgICAgbGV0IGZ1biA9IGluc3RhbmNlW2RhdGEuZnVuXQoKICAgICAgICAgICAgLy9pbnB1dAogICAgICAgICAgICBsZXQgaW5wdXQgPSBkYXRhLmlucHV0CgogICAgICAgICAgICAvL2V4ZWMKICAgICAgICAgICAgYXdhaXQgZnVuKC4uLmlucHV0KQogICAgICAgICAgICAgICAgLnRoZW4oKHN1YykgPT4gewogICAgICAgICAgICAgICAgICAgIHN0YXRlPSdzdWNjZXNzJwogICAgICAgICAgICAgICAgICAgIG1zZz1zdWMKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gewogICAgICAgICAgICAgICAgICAgIHN0YXRlPSdlcnJvcicKICAgICAgICAgICAgICAgICAgICBtc2c9ZXJyCiAgICAgICAgICAgICAgICB9KQoKICAgICAgICB9CiAgICAgICAgY2F0Y2goZXJyKXsKICAgICAgICAgICAgc3RhdGUgPSAnZXJyb3InCiAgICAgICAgICAgIG1zZyA9IGVycgogICAgICAgIH0KICAgICAgICAKICAgICAgICAvL3NlbmRNZXNzYWdlCiAgICAgICAgbGV0IHJlcyA9IHsKICAgICAgICAgICAgbW9kZTogJ3JldHVybicsCiAgICAgICAgICAgIGlkOiBkYXRhLmlkLAogICAgICAgICAgICBmdW46IGRhdGEuZnVuLAogICAgICAgICAgICBzdGF0ZSwKICAgICAgICAgICAgbXNnLAogICAgICAgIH0KICAgICAgICBzZW5kTWVzc2FnZShyZXMpCgogICAgfQoKfQoKZnVuY3Rpb24gcmVjdk1lc3NhZ2UoZGF0YSkgewogICAgLy8gY29uc29sZS5sb2coJ2lubmVyIHdvcmtlciByZWN2OicsIGRhdGEpCgogICAgLy9kYXRhUmVjdgogICAgbGV0IGRhdGFSZWN2ID0gZGF0YQoKICAgIC8vcnVuCiAgICBydW4oZGF0YVJlY3YpCgp9CgoKICAgICAgICBwYXJlbnRQb3J0Lm9uKCdtZXNzYWdlJywgcmVjdk1lc3NhZ2UpCiAgICAgICAgCgo=",Buffer.from(G,"base64").toString("ascii"));function y(){var d=Z();function c(Z){try{return new l.Worker(Z,{eval:!0})}catch(l){V(l)}}var G=c(X);if(!G)return V("invalid worker"),null;function W(){G?(G.terminate(),G=void 0):V("worker has been terminated")}function i(){var l={mode:"init",type:"object",input:Array.prototype.slice.call(arguments)};G.postMessage(l)}function u(){var l=m(),Z=b(),c={mode:"call",id:Z,fun:"stringify",input:Array.prototype.slice.call(arguments)};return G.postMessage(c),d.once(Z,(function(Z){"success"===Z.state?l.resolve(Z.msg):l.reject(Z.msg)})),l}function y(){var l=m(),Z=b(),c={mode:"call",id:Z,fun:"parse",input:Array.prototype.slice.call(arguments)};return G.postMessage(c),d.once(Z,(function(Z){"success"===Z.state?l.resolve(Z.msg):l.reject(Z.msg)})),l}function p(l){var Z=l,m=Z.mode;"emit"!==m&&"return"!==m||("emit"===m&&d.emit(Z.evName,Z.msg),"return"===m&&d.emit(Z.id,Z))}function V(l){d.emit("error",l)}return G.on("message",p),G.on("error",V),i(Array.prototype.slice.call(arguments)),d.stringify=u,d.parse=y,d.terminate=W,d}var p,V,I={stringify:(V=c(i.mark((function l(){var Z,m,b,c=arguments;return i.wrap((function(l){for(;;)switch(l.prev=l.next){case 0:return Z=Array.prototype.slice.call(c),m=y(),l.next=4,m.stringify.apply(m,d(Z)).finally((function(){m.terminate()}));case 4:return b=l.sent,l.abrupt("return",b);case 6:case"end":return l.stop()}}),l)}))),function(){return V.apply(this,arguments)}),parse:(p=c(i.mark((function l(){var Z,m,b,c=arguments;return i.wrap((function(l){for(;;)switch(l.prev=l.next){case 0:return Z=Array.prototype.slice.call(c),m=y(),l.next=4,m.parse.apply(m,d(Z)).finally((function(){m.terminate()}));case 4:return b=l.sent,l.abrupt("return",b);case 6:case"end":return l.stop()}}),l)}))),function(){return p.apply(this,arguments)})};for(var h in W=Z(),I){var a=I[h];W[h]=a}}(),W}(d.default)})),G=b((function(l,Z){l.exports=function(){function l(l,Z){(null==Z||Z>l.length)&&(Z=l.length);for(var d=0,m=new Array(Z);d<Z;d++)m[d]=l[d];return m}function Z(Z){return function(Z){if(Array.isArray(Z))return l(Z)}(Z)||function(l){if("undefined"!=typeof Symbol&&null!=l[Symbol.iterator]||null!=l["@@iterator"])return Array.from(l)}(Z)||function(Z,d){if(Z){if("string"==typeof Z)return l(Z,d);var m=Object.prototype.toString.call(Z).slice(8,-1);return"Object"===m&&Z.constructor&&(m=Z.constructor.name),"Map"===m||"Set"===m?Array.from(Z):"Arguments"===m||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m)?l(Z,d):void 0}}(Z)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(l,Z,d,m,b,c,G){try{var X=l[c](G),W=X.value}catch(l){return void d(l)}X.done?Z(W):Promise.resolve(W).then(m,b)}function b(l){return function(){var Z=this,m=arguments;return new Promise((function(b,c){var G=l.apply(Z,m);function X(l){d(G,b,c,X,W,"next",l)}function W(l){d(G,b,c,X,W,"throw",l)}X(void 0)}))}}function c(l){return(c="function"==typeof Symbol&&"symbol"==m(Symbol.iterator)?function(l){return m(l)}:function(l){return l&&"function"==typeof Symbol&&l.constructor===Symbol&&l!==Symbol.prototype?"symbol":m(l)})(l)}function G(l){var Z={exports:{}};return l(Z,Z.exports),Z.exports}var X,W=G((function(l){var Z=function(l){var Z,d=Object.prototype,m=d.hasOwnProperty,b="function"==typeof Symbol?Symbol:{},G=b.iterator||"@@iterator",X=b.asyncIterator||"@@asyncIterator",W=b.toStringTag||"@@toStringTag";function i(l,Z,d){return Object.defineProperty(l,Z,{value:d,enumerable:!0,configurable:!0,writable:!0}),l[Z]}try{i({},"")}catch(l){i=function(l,Z,d){return l[Z]=d}}function u(l,Z,d,m){var b=Z&&Z.prototype instanceof Y?Z:Y,c=Object.create(b.prototype),G=new t(m||[]);return c._invoke=function(l,Z,d){var m=p;return function(b,c){if(m===I)throw new Error("Generator is already running");if(m===h){if("throw"===b)throw c;return N()}for(d.method=b,d.arg=c;;){var G=d.delegate;if(G){var X=S(G,d);if(X){if(X===a)continue;return X}}if("next"===d.method)d.sent=d._sent=d.arg;else if("throw"===d.method){if(m===p)throw m=h,d.arg;d.dispatchException(d.arg)}else"return"===d.method&&d.abrupt("return",d.arg);m=I;var W=y(l,Z,d);if("normal"===W.type){if(m=d.done?h:V,W.arg===a)continue;return{value:W.arg,done:d.done}}"throw"===W.type&&(m=h,d.method="throw",d.arg=W.arg)}}}(l,d,G),c}function y(l,Z,d){try{return{type:"normal",arg:l.call(Z,d)}}catch(l){return{type:"throw",arg:l}}}l.wrap=u;var p="suspendedStart",V="suspendedYield",I="executing",h="completed",a={};function Y(){}function R(){}function K(){}var o={};o[G]=function(){return this};var L=Object.getPrototypeOf,J=L&&L(L(T([])));J&&J!==d&&m.call(J,G)&&(o=J);var n=K.prototype=Y.prototype=Object.create(o);function H(l){["next","throw","return"].forEach((function(Z){i(l,Z,(function(l){return this._invoke(Z,l)}))}))}function s(l,Z){function d(b,G,X,W){var i=y(l[b],l,G);if("throw"!==i.type){var u=i.arg,p=u.value;return p&&"object"===c(p)&&m.call(p,"__await")?Z.resolve(p.__await).then((function(l){d("next",l,X,W)}),(function(l){d("throw",l,X,W)})):Z.resolve(p).then((function(l){u.value=l,X(u)}),(function(l){return d("throw",l,X,W)}))}W(i.arg)}var b;this._invoke=function(l,m){function c(){return new Z((function(Z,b){d(l,m,Z,b)}))}return b=b?b.then(c,c):c()}}function S(l,d){var m=l.iterator[d.method];if(m===Z){if(d.delegate=null,"throw"===d.method){if(l.iterator.return&&(d.method="return",d.arg=Z,S(l,d),"throw"===d.method))return a;d.method="throw",d.arg=new TypeError("The iterator does not provide a 'throw' method")}return a}var b=y(m,l.iterator,d.arg);if("throw"===b.type)return d.method="throw",d.arg=b.arg,d.delegate=null,a;var c=b.arg;return c?c.done?(d[l.resultName]=c.value,d.next=l.nextLoc,"return"!==d.method&&(d.method="next",d.arg=Z),d.delegate=null,a):c:(d.method="throw",d.arg=new TypeError("iterator result is not an object"),d.delegate=null,a)}function C(l){var Z={tryLoc:l[0]};1 in l&&(Z.catchLoc=l[1]),2 in l&&(Z.finallyLoc=l[2],Z.afterLoc=l[3]),this.tryEntries.push(Z)}function x(l){var Z=l.completion||{};Z.type="normal",delete Z.arg,l.completion=Z}function t(l){this.tryEntries=[{tryLoc:"root"}],l.forEach(C,this),this.reset(!0)}function T(l){if(l){var d=l[G];if(d)return d.call(l);if("function"==typeof l.next)return l;if(!isNaN(l.length)){var b=-1,c=function d(){for(;++b<l.length;)if(m.call(l,b))return d.value=l[b],d.done=!1,d;return d.value=Z,d.done=!0,d};return c.next=c}}return{next:N}}function N(){return{value:Z,done:!0}}return R.prototype=n.constructor=K,K.constructor=R,R.displayName=i(K,W,"GeneratorFunction"),l.isGeneratorFunction=function(l){var Z="function"==typeof l&&l.constructor;return!!Z&&(Z===R||"GeneratorFunction"===(Z.displayName||Z.name))},l.mark=function(l){return Object.setPrototypeOf?Object.setPrototypeOf(l,K):(l.__proto__=K,i(l,W,"GeneratorFunction")),l.prototype=Object.create(n),l},l.awrap=function(l){return{__await:l}},H(s.prototype),s.prototype[X]=function(){return this},l.AsyncIterator=s,l.async=function(Z,d,m,b,c){void 0===c&&(c=Promise);var G=new s(u(Z,d,m,b),c);return l.isGeneratorFunction(d)?G:G.next().then((function(l){return l.done?l.value:G.next()}))},H(n),i(n,W,"Generator"),n[G]=function(){return this},n.toString=function(){return"[object Generator]"},l.keys=function(l){var Z=[];for(var d in l)Z.push(d);return Z.reverse(),function d(){for(;Z.length;){var m=Z.pop();if(m in l)return d.value=m,d.done=!1,d}return d.done=!0,d}},l.values=T,t.prototype={constructor:t,reset:function(l){if(this.prev=0,this.next=0,this.sent=this._sent=Z,this.done=!1,this.delegate=null,this.method="next",this.arg=Z,this.tryEntries.forEach(x),!l)for(var d in this)"t"===d.charAt(0)&&m.call(this,d)&&!isNaN(+d.slice(1))&&(this[d]=Z)},stop:function(){this.done=!0;var l=this.tryEntries[0].completion;if("throw"===l.type)throw l.arg;return this.rval},dispatchException:function(l){if(this.done)throw l;var d=this;function b(m,b){return X.type="throw",X.arg=l,d.next=m,b&&(d.method="next",d.arg=Z),!!b}for(var c=this.tryEntries.length-1;c>=0;--c){var G=this.tryEntries[c],X=G.completion;if("root"===G.tryLoc)return b("end");if(G.tryLoc<=this.prev){var W=m.call(G,"catchLoc"),i=m.call(G,"finallyLoc");if(W&&i){if(this.prev<G.catchLoc)return b(G.catchLoc,!0);if(this.prev<G.finallyLoc)return b(G.finallyLoc)}else if(W){if(this.prev<G.catchLoc)return b(G.catchLoc,!0)}else{if(!i)throw new Error("try statement without catch or finally");if(this.prev<G.finallyLoc)return b(G.finallyLoc)}}}},abrupt:function(l,Z){for(var d=this.tryEntries.length-1;d>=0;--d){var b=this.tryEntries[d];if(b.tryLoc<=this.prev&&m.call(b,"finallyLoc")&&this.prev<b.finallyLoc){var c=b;break}}c&&("break"===l||"continue"===l)&&c.tryLoc<=Z&&Z<=c.finallyLoc&&(c=null);var G=c?c.completion:{};return G.type=l,G.arg=Z,c?(this.method="next",this.next=c.finallyLoc,a):this.complete(G)},complete:function(l,Z){if("throw"===l.type)throw l.arg;return"break"===l.type||"continue"===l.type?this.next=l.arg:"return"===l.type?(this.rval=this.arg=l.arg,this.method="return",this.next="end"):"normal"===l.type&&Z&&(this.next=Z),a},finish:function(l){for(var Z=this.tryEntries.length-1;Z>=0;--Z){var d=this.tryEntries[Z];if(d.finallyLoc===l)return this.complete(d.completion,d.afterLoc),x(d),a}},catch:function(l){for(var Z=this.tryEntries.length-1;Z>=0;--Z){var d=this.tryEntries[Z];if(d.tryLoc===l){var m=d.completion;if("throw"===m.type){var b=m.arg;x(d)}return b}}throw new Error("illegal catch attempt")},delegateYield:function(l,d,m){return this.delegate={iterator:T(l),resultName:d,nextLoc:m},"next"===this.method&&(this.arg=Z),a}},l}(l.exports);try{regeneratorRuntime=Z}catch(l){Function("r","regeneratorRuntime = r")(Z)}})),i=G((function(l){var Z=Object.prototype.hasOwnProperty,d="~";function m(){}function b(l,Z,d){this.fn=l,this.context=Z,this.once=d||!1}function c(l,Z,m,c,G){if("function"!=typeof m)throw new TypeError("The listener must be a function");var X=new b(m,c||l,G),W=d?d+Z:Z;return l._events[W]?l._events[W].fn?l._events[W]=[l._events[W],X]:l._events[W].push(X):(l._events[W]=X,l._eventsCount++),l}function G(l,Z){0==--l._eventsCount?l._events=new m:delete l._events[Z]}function X(){this._events=new m,this._eventsCount=0}Object.create&&(m.prototype=Object.create(null),(new m).__proto__||(d=!1)),X.prototype.eventNames=function(){var l,m,b=[];if(0===this._eventsCount)return b;for(m in l=this._events)Z.call(l,m)&&b.push(d?m.slice(1):m);return Object.getOwnPropertySymbols?b.concat(Object.getOwnPropertySymbols(l)):b},X.prototype.listeners=function(l){var Z=d?d+l:l,m=this._events[Z];if(!m)return[];if(m.fn)return[m.fn];for(var b=0,c=m.length,G=new Array(c);b<c;b++)G[b]=m[b].fn;return G},X.prototype.listenerCount=function(l){var Z=d?d+l:l,m=this._events[Z];return m?m.fn?1:m.length:0},X.prototype.emit=function(l,Z,m,b,c,G){var X=d?d+l:l;if(!this._events[X])return!1;var W,i,u=this._events[X],y=arguments.length;if(u.fn){switch(u.once&&this.removeListener(l,u.fn,void 0,!0),y){case 1:return u.fn.call(u.context),!0;case 2:return u.fn.call(u.context,Z),!0;case 3:return u.fn.call(u.context,Z,m),!0;case 4:return u.fn.call(u.context,Z,m,b),!0;case 5:return u.fn.call(u.context,Z,m,b,c),!0;case 6:return u.fn.call(u.context,Z,m,b,c,G),!0}for(i=1,W=new Array(y-1);i<y;i++)W[i-1]=arguments[i];u.fn.apply(u.context,W)}else{var p,V=u.length;for(i=0;i<V;i++)switch(u[i].once&&this.removeListener(l,u[i].fn,void 0,!0),y){case 1:u[i].fn.call(u[i].context);break;case 2:u[i].fn.call(u[i].context,Z);break;case 3:u[i].fn.call(u[i].context,Z,m);break;case 4:u[i].fn.call(u[i].context,Z,m,b);break;default:if(!W)for(p=1,W=new Array(y-1);p<y;p++)W[p-1]=arguments[p];u[i].fn.apply(u[i].context,W)}}return!0},X.prototype.on=function(l,Z,d){return c(this,l,Z,d,!1)},X.prototype.once=function(l,Z,d){return c(this,l,Z,d,!0)},X.prototype.removeListener=function(l,Z,m,b){var c=d?d+l:l;if(!this._events[c])return this;if(!Z)return G(this,c),this;var X=this._events[c];if(X.fn)X.fn!==Z||b&&!X.once||m&&X.context!==m||G(this,c);else{for(var W=0,i=[],u=X.length;W<u;W++)(X[W].fn!==Z||b&&!X[W].once||m&&X[W].context!==m)&&i.push(X[W]);i.length?this._events[c]=1===i.length?i[0]:i:G(this,c)}return this},X.prototype.removeAllListeners=function(l){var Z;return l?(Z=d?d+l:l,this._events[Z]&&G(this,Z)):(this._events=new m,this._eventsCount=0),this},X.prototype.off=X.prototype.removeListener,X.prototype.addListener=X.prototype.on,X.prefixed=d,X.EventEmitter=X,l.exports=X}));return function(){if("browser"!=("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;function l(){return new i}function d(){var l,Z,d=new Promise((function(){l=arguments[0],Z=arguments[1]}));return d.resolve=l,d.reject=Z,d}function m(){for(var l=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,Z=[],d="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),m=d.length,b=0;b<l;b++)Z[b]=d[0|Math.random()*m];return Z.join("")}var c,G=(c="",window.atob(c));function u(){var Z=l();function b(l){try{var Z=new Blob([l]),d=window.URL||window.webkitURL;return new Worker(d.createObjectURL(Z))}catch(l){p(l)}}var c=b(G);if(!c)return p("invalid worker"),null;function X(){c?(c.terminate(),c=void 0):p("worker has been terminated")}function W(){var l={mode:"init",type:"object",input:Array.prototype.slice.call(arguments)};c.postMessage(l)}function i(){var l=d(),b=m(),G={mode:"call",id:b,fun:"stringify",input:Array.prototype.slice.call(arguments)};return c.postMessage(G),Z.once(b,(function(Z){"success"===Z.state?l.resolve(Z.msg):l.reject(Z.msg)})),l}function u(){var l=d(),b=m(),G={mode:"call",id:b,fun:"parse",input:Array.prototype.slice.call(arguments)};return c.postMessage(G),Z.once(b,(function(Z){"success"===Z.state?l.resolve(Z.msg):l.reject(Z.msg)})),l}function y(l){var d=l,m=d.mode;"emit"!==m&&"return"!==m||("emit"===m&&Z.emit(d.evName,d.msg),"return"===m&&Z.emit(d.id,d))}function p(l){Z.emit("error",l)}return c.onmessage=function(l){y(l.data)},c.onerror=p,W(Array.prototype.slice.call(arguments)),Z.stringify=i,Z.parse=u,Z.terminate=X,Z}var y,p,V={stringify:(p=b(W.mark((function l(){var d,m,b,c=arguments;return W.wrap((function(l){for(;;)switch(l.prev=l.next){case 0:return d=Array.prototype.slice.call(c),m=u(),l.next=4,m.stringify.apply(m,Z(d)).finally((function(){m.terminate()}));case 4:return b=l.sent,l.abrupt("return",b);case 6:case"end":return l.stop()}}),l)}))),function(){return p.apply(this,arguments)}),parse:(y=b(W.mark((function l(){var d,m,b,c=arguments;return W.wrap((function(l){for(;;)switch(l.prev=l.next){case 0:return d=Array.prototype.slice.call(c),m=u(),l.next=4,m.parse.apply(m,Z(d)).finally((function(){m.terminate()}));case 4:return b=l.sent,l.abrupt("return",b);case 6:case"end":return l.stop()}}),l)}))),function(){return y.apply(this,arguments)})};for(var I in X=l(),V){var h=V[I];X[I]=h}}(),X}()}));return"undefined"!=typeof window&&void 0!==window.document?G:c}));
