!function(g,I){"object"==typeof exports&&"undefined"!=typeof module?module.exports=I():"function"==typeof define&&define.amd?define(I):(g="undefined"!=typeof globalThis?globalThis:g||self).gWebWorker2_Obj=I()}(this,(function(){"use strict";var g=function(g){var I={exports:{}};return g(I,I.exports),I.exports}((function(g){var I=Object.prototype.hasOwnProperty,C="~";function c(){}function Z(g,I,C){this.fn=g,this.context=I,this.once=C||!1}function m(g,I,c,m,l){if("function"!=typeof c)throw new TypeError("The listener must be a function");var b=new Z(c,m||g,l),A=C?C+I:I;return g._events[A]?g._events[A].fn?g._events[A]=[g._events[A],b]:g._events[A].push(b):(g._events[A]=b,g._eventsCount++),g}function l(g,I){0==--g._eventsCount?g._events=new c:delete g._events[I]}function b(){this._events=new c,this._eventsCount=0}Object.create&&(c.prototype=Object.create(null),(new c).__proto__||(C=!1)),b.prototype.eventNames=function(){var g,c,Z=[];if(0===this._eventsCount)return Z;for(c in g=this._events)I.call(g,c)&&Z.push(C?c.slice(1):c);return Object.getOwnPropertySymbols?Z.concat(Object.getOwnPropertySymbols(g)):Z},b.prototype.listeners=function(g){var I=C?C+g:g,c=this._events[I];if(!c)return[];if(c.fn)return[c.fn];for(var Z=0,m=c.length,l=new Array(m);Z<m;Z++)l[Z]=c[Z].fn;return l},b.prototype.listenerCount=function(g){var I=C?C+g:g,c=this._events[I];return c?c.fn?1:c.length:0},b.prototype.emit=function(g,I,c,Z,m,l){var b=C?C+g:g;if(!this._events[b])return!1;var A,B,d=this._events[b],y=arguments.length;if(d.fn){switch(d.once&&this.removeListener(g,d.fn,void 0,!0),y){case 1:return d.fn.call(d.context),!0;case 2:return d.fn.call(d.context,I),!0;case 3:return d.fn.call(d.context,I,c),!0;case 4:return d.fn.call(d.context,I,c,Z),!0;case 5:return d.fn.call(d.context,I,c,Z,m),!0;case 6:return d.fn.call(d.context,I,c,Z,m,l),!0}for(B=1,A=new Array(y-1);B<y;B++)A[B-1]=arguments[B];d.fn.apply(d.context,A)}else{var G,i=d.length;for(B=0;B<i;B++)switch(d[B].once&&this.removeListener(g,d[B].fn,void 0,!0),y){case 1:d[B].fn.call(d[B].context);break;case 2:d[B].fn.call(d[B].context,I);break;case 3:d[B].fn.call(d[B].context,I,c);break;case 4:d[B].fn.call(d[B].context,I,c,Z);break;default:if(!A)for(G=1,A=new Array(y-1);G<y;G++)A[G-1]=arguments[G];d[B].fn.apply(d[B].context,A)}}return!0},b.prototype.on=function(g,I,C){return m(this,g,I,C,!1)},b.prototype.once=function(g,I,C){return m(this,g,I,C,!0)},b.prototype.removeListener=function(g,I,c,Z){var m=C?C+g:g;if(!this._events[m])return this;if(!I)return l(this,m),this;var b=this._events[m];if(b.fn)b.fn!==I||Z&&!b.once||c&&b.context!==c||l(this,m);else{for(var A=0,B=[],d=b.length;A<d;A++)(b[A].fn!==I||Z&&!b[A].once||c&&b[A].context!==c)&&B.push(b[A]);B.length?this._events[m]=1===B.length?B[0]:B:l(this,m)}return this},b.prototype.removeAllListeners=function(g){var I;return g?(I=C?C+g:g,this._events[I]&&l(this,I)):(this._events=new c,this._eventsCount=0),this},b.prototype.off=b.prototype.removeListener,b.prototype.addListener=b.prototype.on,b.prefixed=C,b.EventEmitter=b,g.exports=b}));function I(){return new g}function C(){let g,I,C=new Promise((function(){g=arguments[0],I=arguments[1]}));return C.resolve=g,C.reject=I,C}function c(g=10){let I=[],C="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),c=C.length;for(let Z=0;Z<g;Z++)I[Z]=C[0|Math.random()*c];return I.join("")}let Z=atob("");let m=null;return m=function(){function g(g){let I,C=window.URL||window.webkitURL;try{return I=new Blob([g]),new Worker(C.createObjectURL(I))}catch(g){console.log(g)}}let m=g(Z);if(null===m)return console.log("invalid webworker"),null;let l=I();function b(){let g={mode:"init",type:"object",input:[...arguments]};m.postMessage(g)}function A(){let g=C(),I=c(),Z={mode:"call",id:I,fun:"aaa",input:[...arguments]};return m.postMessage(Z),l.once(I,(I=>{"success"===I.state?g.resolve(I.msg):g.reject(I.msg)})),g}function B(){let g=C(),I=c(),Z={mode:"call",id:I,fun:"bbb",input:[...arguments]};return m.postMessage(Z),l.once(I,(I=>{"success"===I.state?g.resolve(I.msg):g.reject(I.msg)})),g}function d(){let g=C(),I=c(),Z={mode:"call",id:I,fun:"ccc",input:[...arguments]};return m.postMessage(Z),l.once(I,(I=>{"success"===I.state?g.resolve(I.msg):g.reject(I.msg)})),g}return m.onmessage=function(g){let I=g.data,C=I.mode;"emit"!==C&&"return"!==C||("emit"===C&&l.emit(I.evName,I.msg),"return"===C&&l.emit(I.id,I))},b([...arguments]),l.aaa=A,l.bbb=B,l.ccc=d,l}(),m}));
