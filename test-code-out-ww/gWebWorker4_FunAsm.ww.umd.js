!function(I,B){"object"==typeof exports&&"undefined"!=typeof module?module.exports=B():"function"==typeof define&&define.amd?define(B):(I="undefined"!=typeof globalThis?globalThis:I||self).gWebWorker4_FunAsm=B()}(this,(function(){"use strict";var I=function(I){var B={exports:{}};return I(B,B.exports),B.exports}((function(I){var B=Object.prototype.hasOwnProperty,U="~";function g(){}function F(I,B,U){this.fn=I,this.context=B,this.once=U||!1}function Q(I,B,g,Q,C){if("function"!=typeof g)throw new TypeError("The listener must be a function");var A=new F(g,Q||I,C),V=U?U+B:B;return I._events[V]?I._events[V].fn?I._events[V]=[I._events[V],A]:I._events[V].push(A):(I._events[V]=A,I._eventsCount++),I}function C(I,B){0==--I._eventsCount?I._events=new g:delete I._events[B]}function A(){this._events=new g,this._eventsCount=0}Object.create&&(g.prototype=Object.create(null),(new g).__proto__||(U=!1)),A.prototype.eventNames=function(){var I,g,F=[];if(0===this._eventsCount)return F;for(g in I=this._events)B.call(I,g)&&F.push(U?g.slice(1):g);return Object.getOwnPropertySymbols?F.concat(Object.getOwnPropertySymbols(I)):F},A.prototype.listeners=function(I){var B=U?U+I:I,g=this._events[B];if(!g)return[];if(g.fn)return[g.fn];for(var F=0,Q=g.length,C=new Array(Q);F<Q;F++)C[F]=g[F].fn;return C},A.prototype.listenerCount=function(I){var B=U?U+I:I,g=this._events[B];return g?g.fn?1:g.length:0},A.prototype.emit=function(I,B,g,F,Q,C){var A=U?U+I:I;if(!this._events[A])return!1;var V,R,l=this._events[A],Z=arguments.length;if(l.fn){switch(l.once&&this.removeListener(I,l.fn,void 0,!0),Z){case 1:return l.fn.call(l.context),!0;case 2:return l.fn.call(l.context,B),!0;case 3:return l.fn.call(l.context,B,g),!0;case 4:return l.fn.call(l.context,B,g,F),!0;case 5:return l.fn.call(l.context,B,g,F,Q),!0;case 6:return l.fn.call(l.context,B,g,F,Q,C),!0}for(R=1,V=new Array(Z-1);R<Z;R++)V[R-1]=arguments[R];l.fn.apply(l.context,V)}else{var d,S=l.length;for(R=0;R<S;R++)switch(l[R].once&&this.removeListener(I,l[R].fn,void 0,!0),Z){case 1:l[R].fn.call(l[R].context);break;case 2:l[R].fn.call(l[R].context,B);break;case 3:l[R].fn.call(l[R].context,B,g);break;case 4:l[R].fn.call(l[R].context,B,g,F);break;default:if(!V)for(d=1,V=new Array(Z-1);d<Z;d++)V[d-1]=arguments[d];l[R].fn.apply(l[R].context,V)}}return!0},A.prototype.on=function(I,B,U){return Q(this,I,B,U,!1)},A.prototype.once=function(I,B,U){return Q(this,I,B,U,!0)},A.prototype.removeListener=function(I,B,g,F){var Q=U?U+I:I;if(!this._events[Q])return this;if(!B)return C(this,Q),this;var A=this._events[Q];if(A.fn)A.fn!==B||F&&!A.once||g&&A.context!==g||C(this,Q);else{for(var V=0,R=[],l=A.length;V<l;V++)(A[V].fn!==B||F&&!A[V].once||g&&A[V].context!==g)&&R.push(A[V]);R.length?this._events[Q]=1===R.length?R[0]:R:C(this,Q)}return this},A.prototype.removeAllListeners=function(I){var B;return I?(B=U?U+I:I,this._events[B]&&C(this,B)):(this._events=new g,this._eventsCount=0),this},A.prototype.off=A.prototype.removeListener,A.prototype.addListener=A.prototype.on,A.prefixed=U,A.EventEmitter=A,I.exports=A}));function B(){return new I}function U(){let I,B,U=new Promise((function(){I=arguments[0],B=arguments[1]}));return U.resolve=I,U.reject=B,U}function g(I=10){let B=[],U="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),g=U.length;for(let F=0;F<I;F++)B[F]=U[0|Math.random()*g];return B.join("")}let F=atob("");let Q=null;return Q=function(){function I(I){let B,U=window.URL||window.webkitURL;try{return B=new Blob([I]),new Worker(U.createObjectURL(B))}catch(I){console.log(I)}}let Q=I(F);if(null===Q)return console.log("invalid webworker"),null;let C=B();function A(){let I={mode:"init",type:"function",input:[...arguments]};Q.postMessage(I)}function V(){let I=U(),B=g(),F={mode:"call",id:B,fun:"aaa",input:[...arguments]};return Q.postMessage(F),C.once(B,(B=>{"success"===B.state?I.resolve(B.msg):I.reject(B.msg)})),I}function R(){let I=U(),B=g(),F={mode:"call",id:B,fun:"bbb",input:[...arguments]};return Q.postMessage(F),C.once(B,(B=>{"success"===B.state?I.resolve(B.msg):I.reject(B.msg)})),I}function l(){let I=U(),B=g(),F={mode:"call",id:B,fun:"ccc",input:[...arguments]};return Q.postMessage(F),C.once(B,(B=>{"success"===B.state?I.resolve(B.msg):I.reject(B.msg)})),I}function Z(){let I=U(),B=g(),F={mode:"call",id:B,fun:"ddd",input:[...arguments]};return Q.postMessage(F),C.once(B,(B=>{"success"===B.state?I.resolve(B.msg):I.reject(B.msg)})),I}function d(){let I=U(),B=g(),F={mode:"call",id:B,fun:"eee",input:[...arguments]};return Q.postMessage(F),C.once(B,(B=>{"success"===B.state?I.resolve(B.msg):I.reject(B.msg)})),I}return Q.onmessage=function(I){let B=I.data,U=B.mode;"emit"!==U&&"return"!==U||("emit"===U&&C.emit(B.evName,B.msg),"return"===U&&C.emit(B.id,B))},A([...arguments]),C.aaa=V,C.bbb=R,C.ccc=l,C.ddd=Z,C.eee=d,C},Q}));
