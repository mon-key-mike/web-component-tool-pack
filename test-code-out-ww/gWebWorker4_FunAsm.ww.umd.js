!function(U,F){"object"==typeof exports&&"undefined"!=typeof module?module.exports=F():"function"==typeof define&&define.amd?define(F):(U="undefined"!=typeof globalThis?globalThis:U||self).gWebWorker4_FunAsm=F()}(this,(function(){"use strict";function U(F){return(U="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(U){return typeof U}:function(U){return U&&"function"==typeof Symbol&&U.constructor===Symbol&&U!==Symbol.prototype?"symbol":typeof U})(F)}function F(U){var F={exports:{}};return U(F,F.exports),F.exports}F((function(F){var Q=function(F){var Q,B=Object.prototype,V=B.hasOwnProperty,l="function"==typeof Symbol?Symbol:{},R=l.iterator||"@@iterator",d=l.asyncIterator||"@@asyncIterator",Z=l.toStringTag||"@@toStringTag";function J(U,F,Q){return Object.defineProperty(U,F,{value:Q,enumerable:!0,configurable:!0,writable:!0}),U[F]}try{J({},"")}catch(U){J=function(U,F,Q){return U[F]=Q}}function W(U,F,Q,B){var V=F&&F.prototype instanceof b?F:b,l=Object.create(V.prototype),R=new t(B||[]);return l._invoke=function(U,F,Q){var B=E;return function(V,l){if(B===m)throw new Error("Generator is already running");if(B===N){if("throw"===V)throw l;return H()}for(Q.method=V,Q.arg=l;;){var R=Q.delegate;if(R){var d=T(R,Q);if(d){if(d===X)continue;return d}}if("next"===Q.method)Q.sent=Q._sent=Q.arg;else if("throw"===Q.method){if(B===E)throw B=N,Q.arg;Q.dispatchException(Q.arg)}else"return"===Q.method&&Q.abrupt("return",Q.arg);B=m;var Z=S(U,F,Q);if("normal"===Z.type){if(B=Q.done?N:c,Z.arg===X)continue;return{value:Z.arg,done:Q.done}}"throw"===Z.type&&(B=N,Q.method="throw",Q.arg=Z.arg)}}}(U,Q,R),l}function S(U,F,Q){try{return{type:"normal",arg:U.call(F,Q)}}catch(U){return{type:"throw",arg:U}}}F.wrap=W;var E="suspendedStart",c="suspendedYield",m="executing",N="completed",X={};function b(){}function I(){}function n(){}var G={};G[R]=function(){return this};var i=Object.getPrototypeOf,h=i&&i(i(C([])));h&&h!==B&&V.call(h,R)&&(G=h);var a=n.prototype=b.prototype=Object.create(G);function k(U){["next","throw","return"].forEach((function(F){J(U,F,(function(U){return this._invoke(F,U)}))}))}function p(F,Q){function B(l,R,d,Z){var J=S(F[l],F,R);if("throw"!==J.type){var W=J.arg,E=W.value;return E&&"object"===U(E)&&V.call(E,"__await")?Q.resolve(E.__await).then((function(U){B("next",U,d,Z)}),(function(U){B("throw",U,d,Z)})):Q.resolve(E).then((function(U){W.value=U,d(W)}),(function(U){return B("throw",U,d,Z)}))}Z(J.arg)}var l;this._invoke=function(U,F){function V(){return new Q((function(Q,V){B(U,F,Q,V)}))}return l=l?l.then(V,V):V()}}function T(U,F){var B=U.iterator[F.method];if(B===Q){if(F.delegate=null,"throw"===F.method){if(U.iterator.return&&(F.method="return",F.arg=Q,T(U,F),"throw"===F.method))return X;F.method="throw",F.arg=new TypeError("The iterator does not provide a 'throw' method")}return X}var V=S(B,U.iterator,F.arg);if("throw"===V.type)return F.method="throw",F.arg=V.arg,F.delegate=null,X;var l=V.arg;return l?l.done?(F[U.resultName]=l.value,F.next=U.nextLoc,"return"!==F.method&&(F.method="next",F.arg=Q),F.delegate=null,X):l:(F.method="throw",F.arg=new TypeError("iterator result is not an object"),F.delegate=null,X)}function y(U){var F={tryLoc:U[0]};1 in U&&(F.catchLoc=U[1]),2 in U&&(F.finallyLoc=U[2],F.afterLoc=U[3]),this.tryEntries.push(F)}function Y(U){var F=U.completion||{};F.type="normal",delete F.arg,U.completion=F}function t(U){this.tryEntries=[{tryLoc:"root"}],U.forEach(y,this),this.reset(!0)}function C(U){if(U){var F=U[R];if(F)return F.call(U);if("function"==typeof U.next)return U;if(!isNaN(U.length)){var B=-1,l=function F(){for(;++B<U.length;)if(V.call(U,B))return F.value=U[B],F.done=!1,F;return F.value=Q,F.done=!0,F};return l.next=l}}return{next:H}}function H(){return{value:Q,done:!0}}return I.prototype=a.constructor=n,n.constructor=I,I.displayName=J(n,Z,"GeneratorFunction"),F.isGeneratorFunction=function(U){var F="function"==typeof U&&U.constructor;return!!F&&(F===I||"GeneratorFunction"===(F.displayName||F.name))},F.mark=function(U){return Object.setPrototypeOf?Object.setPrototypeOf(U,n):(U.__proto__=n,J(U,Z,"GeneratorFunction")),U.prototype=Object.create(a),U},F.awrap=function(U){return{__await:U}},k(p.prototype),p.prototype[d]=function(){return this},F.AsyncIterator=p,F.async=function(U,Q,B,V,l){void 0===l&&(l=Promise);var R=new p(W(U,Q,B,V),l);return F.isGeneratorFunction(Q)?R:R.next().then((function(U){return U.done?U.value:R.next()}))},k(a),J(a,Z,"Generator"),a[R]=function(){return this},a.toString=function(){return"[object Generator]"},F.keys=function(U){var F=[];for(var Q in U)F.push(Q);return F.reverse(),function Q(){for(;F.length;){var B=F.pop();if(B in U)return Q.value=B,Q.done=!1,Q}return Q.done=!0,Q}},F.values=C,t.prototype={constructor:t,reset:function(U){if(this.prev=0,this.next=0,this.sent=this._sent=Q,this.done=!1,this.delegate=null,this.method="next",this.arg=Q,this.tryEntries.forEach(Y),!U)for(var F in this)"t"===F.charAt(0)&&V.call(this,F)&&!isNaN(+F.slice(1))&&(this[F]=Q)},stop:function(){this.done=!0;var U=this.tryEntries[0].completion;if("throw"===U.type)throw U.arg;return this.rval},dispatchException:function(U){if(this.done)throw U;var F=this;function B(B,V){return d.type="throw",d.arg=U,F.next=B,V&&(F.method="next",F.arg=Q),!!V}for(var l=this.tryEntries.length-1;l>=0;--l){var R=this.tryEntries[l],d=R.completion;if("root"===R.tryLoc)return B("end");if(R.tryLoc<=this.prev){var Z=V.call(R,"catchLoc"),J=V.call(R,"finallyLoc");if(Z&&J){if(this.prev<R.catchLoc)return B(R.catchLoc,!0);if(this.prev<R.finallyLoc)return B(R.finallyLoc)}else if(Z){if(this.prev<R.catchLoc)return B(R.catchLoc,!0)}else{if(!J)throw new Error("try statement without catch or finally");if(this.prev<R.finallyLoc)return B(R.finallyLoc)}}}},abrupt:function(U,F){for(var Q=this.tryEntries.length-1;Q>=0;--Q){var B=this.tryEntries[Q];if(B.tryLoc<=this.prev&&V.call(B,"finallyLoc")&&this.prev<B.finallyLoc){var l=B;break}}l&&("break"===U||"continue"===U)&&l.tryLoc<=F&&F<=l.finallyLoc&&(l=null);var R=l?l.completion:{};return R.type=U,R.arg=F,l?(this.method="next",this.next=l.finallyLoc,X):this.complete(R)},complete:function(U,F){if("throw"===U.type)throw U.arg;return"break"===U.type||"continue"===U.type?this.next=U.arg:"return"===U.type?(this.rval=this.arg=U.arg,this.method="return",this.next="end"):"normal"===U.type&&F&&(this.next=F),X},finish:function(U){for(var F=this.tryEntries.length-1;F>=0;--F){var Q=this.tryEntries[F];if(Q.finallyLoc===U)return this.complete(Q.completion,Q.afterLoc),Y(Q),X}},catch:function(U){for(var F=this.tryEntries.length-1;F>=0;--F){var Q=this.tryEntries[F];if(Q.tryLoc===U){var B=Q.completion;if("throw"===B.type){var V=B.arg;Y(Q)}return V}}throw new Error("illegal catch attempt")},delegateYield:function(U,F,B){return this.delegate={iterator:C(U),resultName:F,nextLoc:B},"next"===this.method&&(this.arg=Q),X}},F}(F.exports);try{regeneratorRuntime=Q}catch(U){Function("r","regeneratorRuntime = r")(Q)}}));var Q=F((function(U){var F=Object.prototype.hasOwnProperty,Q="~";function B(){}function V(U,F,Q){this.fn=U,this.context=F,this.once=Q||!1}function l(U,F,B,l,R){if("function"!=typeof B)throw new TypeError("The listener must be a function");var d=new V(B,l||U,R),Z=Q?Q+F:F;return U._events[Z]?U._events[Z].fn?U._events[Z]=[U._events[Z],d]:U._events[Z].push(d):(U._events[Z]=d,U._eventsCount++),U}function R(U,F){0==--U._eventsCount?U._events=new B:delete U._events[F]}function d(){this._events=new B,this._eventsCount=0}Object.create&&(B.prototype=Object.create(null),(new B).__proto__||(Q=!1)),d.prototype.eventNames=function(){var U,B,V=[];if(0===this._eventsCount)return V;for(B in U=this._events)F.call(U,B)&&V.push(Q?B.slice(1):B);return Object.getOwnPropertySymbols?V.concat(Object.getOwnPropertySymbols(U)):V},d.prototype.listeners=function(U){var F=Q?Q+U:U,B=this._events[F];if(!B)return[];if(B.fn)return[B.fn];for(var V=0,l=B.length,R=new Array(l);V<l;V++)R[V]=B[V].fn;return R},d.prototype.listenerCount=function(U){var F=Q?Q+U:U,B=this._events[F];return B?B.fn?1:B.length:0},d.prototype.emit=function(U,F,B,V,l,R){var d=Q?Q+U:U;if(!this._events[d])return!1;var Z,J,W=this._events[d],S=arguments.length;if(W.fn){switch(W.once&&this.removeListener(U,W.fn,void 0,!0),S){case 1:return W.fn.call(W.context),!0;case 2:return W.fn.call(W.context,F),!0;case 3:return W.fn.call(W.context,F,B),!0;case 4:return W.fn.call(W.context,F,B,V),!0;case 5:return W.fn.call(W.context,F,B,V,l),!0;case 6:return W.fn.call(W.context,F,B,V,l,R),!0}for(J=1,Z=new Array(S-1);J<S;J++)Z[J-1]=arguments[J];W.fn.apply(W.context,Z)}else{var E,c=W.length;for(J=0;J<c;J++)switch(W[J].once&&this.removeListener(U,W[J].fn,void 0,!0),S){case 1:W[J].fn.call(W[J].context);break;case 2:W[J].fn.call(W[J].context,F);break;case 3:W[J].fn.call(W[J].context,F,B);break;case 4:W[J].fn.call(W[J].context,F,B,V);break;default:if(!Z)for(E=1,Z=new Array(S-1);E<S;E++)Z[E-1]=arguments[E];W[J].fn.apply(W[J].context,Z)}}return!0},d.prototype.on=function(U,F,Q){return l(this,U,F,Q,!1)},d.prototype.once=function(U,F,Q){return l(this,U,F,Q,!0)},d.prototype.removeListener=function(U,F,B,V){var l=Q?Q+U:U;if(!this._events[l])return this;if(!F)return R(this,l),this;var d=this._events[l];if(d.fn)d.fn!==F||V&&!d.once||B&&d.context!==B||R(this,l);else{for(var Z=0,J=[],W=d.length;Z<W;Z++)(d[Z].fn!==F||V&&!d[Z].once||B&&d[Z].context!==B)&&J.push(d[Z]);J.length?this._events[l]=1===J.length?J[0]:J:R(this,l)}return this},d.prototype.removeAllListeners=function(U){var F;return U?(F=Q?Q+U:U,this._events[F]&&R(this,F)):(this._events=new B,this._eventsCount=0),this},d.prototype.off=d.prototype.removeListener,d.prototype.addListener=d.prototype.on,d.prefixed=Q,d.EventEmitter=d,U.exports=d}));function B(){return new Q}function V(){var U,F,Q=new Promise((function(){U=arguments[0],F=arguments[1]}));return Q.resolve=U,Q.reject=F,Q}function l(){for(var U=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,F=[],Q="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),B=Q.length,V=0;V<U;V++)F[V]=Q[0|Math.random()*B];var l=F.join("");return l}var R=atob("");return function(){function U(U){var F,Q=window.URL||window.webkitURL;try{return F=new Blob([U]),new Worker(Q.createObjectURL(F))}catch(U){console.log(U)}}var F=U(R);if(null===F)return console.log("invalid webworker"),null;function Q(){F.terminate(),F=void 0}var d=B();function Z(){var U={mode:"init",type:"function",input:Array.prototype.slice.call(arguments)};F.postMessage(U)}function J(){var U=V(),Q=l(),B={mode:"call",id:Q,fun:"aaa",input:Array.prototype.slice.call(arguments)};return F.postMessage(B),d.once(Q,(function(F){"success"===F.state?U.resolve(F.msg):U.reject(F.msg)})),U}function W(){var U=V(),Q=l(),B={mode:"call",id:Q,fun:"bbb",input:Array.prototype.slice.call(arguments)};return F.postMessage(B),d.once(Q,(function(F){"success"===F.state?U.resolve(F.msg):U.reject(F.msg)})),U}function S(){var U=V(),Q=l(),B={mode:"call",id:Q,fun:"ccc",input:Array.prototype.slice.call(arguments)};return F.postMessage(B),d.once(Q,(function(F){"success"===F.state?U.resolve(F.msg):U.reject(F.msg)})),U}function E(){var U=V(),Q=l(),B={mode:"call",id:Q,fun:"ddd",input:Array.prototype.slice.call(arguments)};return F.postMessage(B),d.once(Q,(function(F){"success"===F.state?U.resolve(F.msg):U.reject(F.msg)})),U}function c(){var U=V(),Q=l(),B={mode:"call",id:Q,fun:"eee",input:Array.prototype.slice.call(arguments)};return F.postMessage(B),d.once(Q,(function(F){"success"===F.state?U.resolve(F.msg):U.reject(F.msg)})),U}return F.onmessage=function(U){var F=U.data,Q=F.mode;"emit"!==Q&&"return"!==Q||("emit"===Q&&d.emit(F.evName,F.msg),"return"===Q&&d.emit(F.id,F))},Z(Array.prototype.slice.call(arguments)),d.aaa=J,d.bbb=W,d.ccc=S,d.ddd=E,d.eee=c,d.terminate=Q,d}}));
